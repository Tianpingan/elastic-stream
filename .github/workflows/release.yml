name: Release

on:
  push:
    tags:
      - 'v[0-9]+\.[0-9]+\.[0-9]+'

jobs:
  check-version:
    name: Check version in Cargo.toml
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Check version in Cargo.toml
        run: |
          tag_version=$(echo ${{ github.ref_name }} | sed 's/v//')
          range_server_version=$(cargo metadata --format-version=1 --no-deps | jq -r '.packages[] | select(.name == "range-server") | .version')
          if [ "$tag_version" != "$range_server_version" ]; then
            echo "Range Server version $range_server_version does not match version in tag $tag_version" >&2
            exit 1
          fi

  release:
    needs: check-version
    name: Release with Debian Packages and Docker Images
    strategy:
      matrix:
        go-version: [ "1.21" ]
        platform: [ "ubuntu-22.04" ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Go Cache
        uses: actions/cache@v3
        with:
          path: ./pd/.go/cache
          key: ${{matrix.platform}}-${{matrix.go-version}}-pd-release-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{matrix.platform}}-${{matrix.go-version}}-pd-release-
            ${{matrix.platform}}-${{matrix.go-version}}-pd-
      - name: Install flatc
        run: |
          sudo ./scripts/try_install_flatc.sh
      - name: Build Placement Driver Debian Packages
        working-directory: ./pd
        run: make all-deb GO_VERSION=${{ matrix.go-version }}

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2.4.0
        with:
          prefix-key: ""
          env-vars: ""
      - name: Install Deps
        run: |
          sudo ./scripts/install_deps.sh
          cargo install cross --git https://github.com/cross-rs/cross
      - name: Build Range Server Debian Packages
        run: |
          git diff --exit-code
          make all-deb PROFILE=release

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          generate_release_notes: true
          files: |
            ./dist/*.deb
            ./pd/distribution/*.deb
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: elasticstream
          password: ${{ secrets.DOCKERHUB_READ_WRITE_TOKEN }}
      - name: Build Docker Image
        working-directory: ./dist/docker
        run: |
          git diff --exit-code
          ./build.sh
  java-release:
    needs: check-version
    name: Publish snapshot package to the Maven Central Repository
    strategy:
      matrix:
        platform: [ "ubuntu-22.04" ]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Deps
        run: |
          sudo ./scripts/install_deps.sh
          cargo install cross --git https://github.com/cross-rs/cross
      - name: Build Shared Library
        run: |
          make .flatc
          cross build -p frontend --target aarch64-unknown-linux-gnu -v
          cp target/aarch64-unknown-linux-gnu/debug/libfrontend.so sdks/frontend-java/client/src/main/resources/META-INF/native/libfrontend_linux_aarch_64.so
          cross build -p frontend --target x86_64-unknown-linux-gnu -v
          cp target/x86_64-unknown-linux-gnu/debug/libfrontend.so sdks/frontend-java/client/src/main/resources/META-INF/native/libfrontend_linux_x86_64.so
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: '17'
      - name: Build Packages
        working-directory: ./sdks/frontend-java
        run: mvn -DargLine="--add-opens=java.base/java.nio=ALL-UNNAMED" clean package
        env:
          GITHUB_TOKEN: ${{ github.token }} # GITHUB_TOKEN is the default env for the password
      - name: Set up Apache Maven Central
        uses: actions/setup-java@v3
        with: # running setup-java again overwrites the settings.xml
          distribution: 'zulu'
          java-version: '17'
          server-id: maven # Value of the distributionManagement/repository/id field of the pom.xml
          server-username: MAVEN_USERNAME # env variable for username in deploy
          server-password: MAVEN_CENTRAL_TOKEN # env variable for token in deploy
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }} # Value of the GPG private key to import
          gpg-passphrase: MAVEN_GPG_PASSPHRASE # env variable for GPG private key passphrase
      - name: Publish to Apache Maven Central
        working-directory: ./sdks/frontend-java
        run: |
          mvn -DargLine="--add-opens=java.base/java.nio=ALL-UNNAMED" deploy
        env:
          MAVEN_USERNAME: mooc9988
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
