<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="1847"><g><title>&lt;observation::metrics::uring_metrics::INFLIGHT_IO as core::ops::deref::Deref&gt;::deref (1 samples, 0.05%)</title><rect x="2.4364%" y="565" width="0.0541%" height="15" fill="rgb(219,208,4)" fg:x="45" fg:w="1"/><text x="2.6864%" y="575.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until.2063 (11 samples, 0.60%)</title><rect x="2.6530%" y="549" width="0.5956%" height="15" fill="rgb(235,161,42)" fg:x="49" fg:w="11"/><text x="2.9030%" y="559.50"></text></g><g><title>std::thread::park (5 samples, 0.27%)</title><rect x="2.9778%" y="533" width="0.2707%" height="15" fill="rgb(247,218,18)" fg:x="55" fg:w="5"/><text x="3.2278%" y="543.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (16 samples, 0.87%)</title><rect x="2.4905%" y="565" width="0.8663%" height="15" fill="rgb(232,114,51)" fg:x="46" fg:w="16"/><text x="2.7405%" y="575.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::register (2 samples, 0.11%)</title><rect x="3.2485%" y="549" width="0.1083%" height="15" fill="rgb(222,95,3)" fg:x="60" fg:w="2"/><text x="3.4985%" y="559.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (9 samples, 0.49%)</title><rect x="3.3568%" y="565" width="0.4873%" height="15" fill="rgb(240,65,29)" fg:x="62" fg:w="9"/><text x="3.6068%" y="575.50"></text></g><g><title>rocksdb_get_pinned_cf (1 samples, 0.05%)</title><rect x="3.8441%" y="565" width="0.0541%" height="15" fill="rgb(249,209,20)" fg:x="71" fg:w="1"/><text x="4.0941%" y="575.50"></text></g><g><title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.05%)</title><rect x="3.8441%" y="549" width="0.0541%" height="15" fill="rgb(241,48,37)" fg:x="71" fg:w="1"/><text x="4.0941%" y="559.50"></text></g><g><title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.05%)</title><rect x="3.8441%" y="533" width="0.0541%" height="15" fill="rgb(230,140,42)" fg:x="71" fg:w="1"/><text x="4.0941%" y="543.50"></text></g><g><title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (1 samples, 0.05%)</title><rect x="3.8441%" y="517" width="0.0541%" height="15" fill="rgb(230,176,45)" fg:x="71" fg:w="1"/><text x="4.0941%" y="527.50"></text></g><g><title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::PinnableWideColumns*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, rocksdb::PinnedIteratorsManager*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.05%)</title><rect x="3.8441%" y="501" width="0.0541%" height="15" fill="rgb(245,112,21)" fg:x="71" fg:w="1"/><text x="4.0941%" y="511.50"></text></g><g><title>sdallocx (1 samples, 0.05%)</title><rect x="3.8982%" y="565" width="0.0541%" height="15" fill="rgb(207,183,35)" fg:x="72" fg:w="1"/><text x="4.1482%" y="575.50"></text></g><g><title>free_fastpath (1 samples, 0.05%)</title><rect x="3.8982%" y="549" width="0.0541%" height="15" fill="rgb(227,44,33)" fg:x="72" fg:w="1"/><text x="4.1482%" y="559.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.05%)</title><rect x="3.8982%" y="533" width="0.0541%" height="15" fill="rgb(246,120,21)" fg:x="72" fg:w="1"/><text x="4.1482%" y="543.50"></text></g><g><title>store::io::uring::IO::add_pending_task (5 samples, 0.27%)</title><rect x="3.9524%" y="565" width="0.2707%" height="15" fill="rgb(235,57,52)" fg:x="73" fg:w="5"/><text x="4.2024%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.27%)</title><rect x="5.9015%" y="549" width="0.2707%" height="15" fill="rgb(238,84,10)" fg:x="109" fg:w="5"/><text x="6.1515%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.11%)</title><rect x="6.0639%" y="533" width="0.1083%" height="15" fill="rgb(251,200,32)" fg:x="112" fg:w="2"/><text x="6.3139%" y="543.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="6.1180%" y="517" width="0.0541%" height="15" fill="rgb(247,159,13)" fg:x="113" fg:w="1"/><text x="6.3680%" y="527.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="6.1180%" y="501" width="0.0541%" height="15" fill="rgb(238,64,4)" fg:x="113" fg:w="1"/><text x="6.3680%" y="511.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="6.1180%" y="485" width="0.0541%" height="15" fill="rgb(221,131,51)" fg:x="113" fg:w="1"/><text x="6.3680%" y="495.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="6.1180%" y="469" width="0.0541%" height="15" fill="rgb(242,5,29)" fg:x="113" fg:w="1"/><text x="6.3680%" y="479.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (13 samples, 0.70%)</title><rect x="6.1722%" y="549" width="0.7038%" height="15" fill="rgb(214,130,32)" fg:x="114" fg:w="13"/><text x="6.4222%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.22%)</title><rect x="6.8760%" y="549" width="0.2166%" height="15" fill="rgb(244,210,16)" fg:x="127" fg:w="4"/><text x="7.1260%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.16%)</title><rect x="6.9302%" y="533" width="0.1624%" height="15" fill="rgb(234,48,26)" fg:x="128" fg:w="3"/><text x="7.1802%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.16%)</title><rect x="6.9302%" y="517" width="0.1624%" height="15" fill="rgb(231,82,38)" fg:x="128" fg:w="3"/><text x="7.1802%" y="527.50"></text></g><g><title>malloc (6 samples, 0.32%)</title><rect x="7.0926%" y="549" width="0.3249%" height="15" fill="rgb(254,128,41)" fg:x="131" fg:w="6"/><text x="7.3426%" y="559.50"></text></g><g><title>imalloc_fastpath (6 samples, 0.32%)</title><rect x="7.0926%" y="533" width="0.3249%" height="15" fill="rgb(212,73,49)" fg:x="131" fg:w="6"/><text x="7.3426%" y="543.50"></text></g><g><title>cache_bin_alloc_easy (6 samples, 0.32%)</title><rect x="7.0926%" y="517" width="0.3249%" height="15" fill="rgb(205,62,54)" fg:x="131" fg:w="6"/><text x="7.3426%" y="527.50"></text></g><g><title>cache_bin_alloc_impl (6 samples, 0.32%)</title><rect x="7.0926%" y="501" width="0.3249%" height="15" fill="rgb(228,0,8)" fg:x="131" fg:w="6"/><text x="7.3426%" y="511.50"></text></g><g><title>sdallocx (1 samples, 0.05%)</title><rect x="7.4174%" y="549" width="0.0541%" height="15" fill="rgb(251,28,17)" fg:x="137" fg:w="1"/><text x="7.6674%" y="559.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::remaining (2 samples, 0.11%)</title><rect x="7.4716%" y="549" width="0.1083%" height="15" fill="rgb(238,105,27)" fg:x="138" fg:w="2"/><text x="7.7216%" y="559.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="7.6340%" y="533" width="0.0541%" height="15" fill="rgb(237,216,33)" fg:x="141" fg:w="1"/><text x="7.8840%" y="543.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="7.6340%" y="517" width="0.0541%" height="15" fill="rgb(229,228,25)" fg:x="141" fg:w="1"/><text x="7.8840%" y="527.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="7.6340%" y="501" width="0.0541%" height="15" fill="rgb(233,75,23)" fg:x="141" fg:w="1"/><text x="7.8840%" y="511.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="7.6340%" y="485" width="0.0541%" height="15" fill="rgb(231,207,16)" fg:x="141" fg:w="1"/><text x="7.8840%" y="495.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.05%)</title><rect x="7.9047%" y="261" width="0.0541%" height="15" fill="rgb(231,191,45)" fg:x="146" fg:w="1"/><text x="8.1547%" y="271.50"></text></g><g><title>extent_recycle (1 samples, 0.05%)</title><rect x="7.9047%" y="245" width="0.0541%" height="15" fill="rgb(224,133,17)" fg:x="146" fg:w="1"/><text x="8.1547%" y="255.50"></text></g><g><title>extent_recycle_extract (1 samples, 0.05%)</title><rect x="7.9047%" y="229" width="0.0541%" height="15" fill="rgb(209,178,27)" fg:x="146" fg:w="1"/><text x="8.1547%" y="239.50"></text></g><g><title>_rjem_je_eset_fit (1 samples, 0.05%)</title><rect x="7.9047%" y="213" width="0.0541%" height="15" fill="rgb(218,37,11)" fg:x="146" fg:w="1"/><text x="8.1547%" y="223.50"></text></g><g><title>eset_first_fit (1 samples, 0.05%)</title><rect x="7.9047%" y="197" width="0.0541%" height="15" fill="rgb(251,226,25)" fg:x="146" fg:w="1"/><text x="8.1547%" y="207.50"></text></g><g><title>_rjem_je_sz_psz_quantize_ceil (1 samples, 0.05%)</title><rect x="7.9047%" y="181" width="0.0541%" height="15" fill="rgb(209,222,27)" fg:x="146" fg:w="1"/><text x="8.1547%" y="191.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::reserve_to (8 samples, 0.43%)</title><rect x="7.5799%" y="549" width="0.4331%" height="15" fill="rgb(238,22,21)" fg:x="140" fg:w="8"/><text x="7.8299%" y="559.50"></text></g><g><title>store::io::buf::aligned_buf::AlignedBuf::new (6 samples, 0.32%)</title><rect x="7.6881%" y="533" width="0.3249%" height="15" fill="rgb(233,161,25)" fg:x="142" fg:w="6"/><text x="7.9381%" y="543.50"></text></g><g><title>mallocx (5 samples, 0.27%)</title><rect x="7.7423%" y="517" width="0.2707%" height="15" fill="rgb(226,122,53)" fg:x="143" fg:w="5"/><text x="7.9923%" y="527.50"></text></g><g><title>imalloc (5 samples, 0.27%)</title><rect x="7.7423%" y="501" width="0.2707%" height="15" fill="rgb(220,123,17)" fg:x="143" fg:w="5"/><text x="7.9923%" y="511.50"></text></g><g><title>imalloc_body (5 samples, 0.27%)</title><rect x="7.7423%" y="485" width="0.2707%" height="15" fill="rgb(230,224,35)" fg:x="143" fg:w="5"/><text x="7.9923%" y="495.50"></text></g><g><title>imalloc_no_sample (5 samples, 0.27%)</title><rect x="7.7423%" y="469" width="0.2707%" height="15" fill="rgb(246,83,8)" fg:x="143" fg:w="5"/><text x="7.9923%" y="479.50"></text></g><g><title>ipalloct (5 samples, 0.27%)</title><rect x="7.7423%" y="453" width="0.2707%" height="15" fill="rgb(230,214,17)" fg:x="143" fg:w="5"/><text x="7.9923%" y="463.50"></text></g><g><title>ipallocztm (5 samples, 0.27%)</title><rect x="7.7423%" y="437" width="0.2707%" height="15" fill="rgb(222,97,18)" fg:x="143" fg:w="5"/><text x="7.9923%" y="447.50"></text></g><g><title>_rjem_je_arena_palloc (5 samples, 0.27%)</title><rect x="7.7423%" y="421" width="0.2707%" height="15" fill="rgb(206,79,1)" fg:x="143" fg:w="5"/><text x="7.9923%" y="431.50"></text></g><g><title>arena_malloc (5 samples, 0.27%)</title><rect x="7.7423%" y="405" width="0.2707%" height="15" fill="rgb(214,121,34)" fg:x="143" fg:w="5"/><text x="7.9923%" y="415.50"></text></g><g><title>tcache_alloc_small (5 samples, 0.27%)</title><rect x="7.7423%" y="389" width="0.2707%" height="15" fill="rgb(249,199,46)" fg:x="143" fg:w="5"/><text x="7.9923%" y="399.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.11%)</title><rect x="7.9047%" y="373" width="0.1083%" height="15" fill="rgb(214,222,46)" fg:x="146" fg:w="2"/><text x="8.1547%" y="383.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (2 samples, 0.11%)</title><rect x="7.9047%" y="357" width="0.1083%" height="15" fill="rgb(248,168,30)" fg:x="146" fg:w="2"/><text x="8.1547%" y="367.50"></text></g><g><title>arena_slab_alloc (2 samples, 0.11%)</title><rect x="7.9047%" y="341" width="0.1083%" height="15" fill="rgb(226,14,28)" fg:x="146" fg:w="2"/><text x="8.1547%" y="351.50"></text></g><g><title>_rjem_je_pa_alloc (2 samples, 0.11%)</title><rect x="7.9047%" y="325" width="0.1083%" height="15" fill="rgb(253,123,1)" fg:x="146" fg:w="2"/><text x="8.1547%" y="335.50"></text></g><g><title>pai_alloc (2 samples, 0.11%)</title><rect x="7.9047%" y="309" width="0.1083%" height="15" fill="rgb(225,24,42)" fg:x="146" fg:w="2"/><text x="8.1547%" y="319.50"></text></g><g><title>pac_alloc_impl (2 samples, 0.11%)</title><rect x="7.9047%" y="293" width="0.1083%" height="15" fill="rgb(216,161,37)" fg:x="146" fg:w="2"/><text x="8.1547%" y="303.50"></text></g><g><title>pac_alloc_real (2 samples, 0.11%)</title><rect x="7.9047%" y="277" width="0.1083%" height="15" fill="rgb(251,164,26)" fg:x="146" fg:w="2"/><text x="8.1547%" y="287.50"></text></g><g><title>_rjem_je_ecache_alloc_grow (1 samples, 0.05%)</title><rect x="7.9589%" y="261" width="0.0541%" height="15" fill="rgb(219,177,3)" fg:x="147" fg:w="1"/><text x="8.2089%" y="271.50"></text></g><g><title>extent_alloc_retained (1 samples, 0.05%)</title><rect x="7.9589%" y="245" width="0.0541%" height="15" fill="rgb(222,65,0)" fg:x="147" fg:w="1"/><text x="8.2089%" y="255.50"></text></g><g><title>extent_recycle (1 samples, 0.05%)</title><rect x="7.9589%" y="229" width="0.0541%" height="15" fill="rgb(223,69,54)" fg:x="147" fg:w="1"/><text x="8.2089%" y="239.50"></text></g><g><title>extent_recycle_split (1 samples, 0.05%)</title><rect x="7.9589%" y="213" width="0.0541%" height="15" fill="rgb(235,30,27)" fg:x="147" fg:w="1"/><text x="8.2089%" y="223.50"></text></g><g><title>extent_split_interior (1 samples, 0.05%)</title><rect x="7.9589%" y="197" width="0.0541%" height="15" fill="rgb(220,183,50)" fg:x="147" fg:w="1"/><text x="8.2089%" y="207.50"></text></g><g><title>extent_split_impl (1 samples, 0.05%)</title><rect x="7.9589%" y="181" width="0.0541%" height="15" fill="rgb(248,198,15)" fg:x="147" fg:w="1"/><text x="8.2089%" y="191.50"></text></g><g><title>ehooks_split (1 samples, 0.05%)</title><rect x="7.9589%" y="165" width="0.0541%" height="15" fill="rgb(222,211,4)" fg:x="147" fg:w="1"/><text x="8.2089%" y="175.50"></text></g><g><title>ehooks_post_reentrancy (1 samples, 0.05%)</title><rect x="7.9589%" y="149" width="0.0541%" height="15" fill="rgb(214,102,34)" fg:x="147" fg:w="1"/><text x="8.2089%" y="159.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::write (9 samples, 0.49%)</title><rect x="8.0130%" y="549" width="0.4873%" height="15" fill="rgb(245,92,5)" fg:x="148" fg:w="9"/><text x="8.2630%" y="559.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::swap (2 samples, 0.11%)</title><rect x="8.3920%" y="533" width="0.1083%" height="15" fill="rgb(252,72,51)" fg:x="155" fg:w="2"/><text x="8.6420%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="9.2583%" y="533" width="0.0541%" height="15" fill="rgb(252,208,19)" fg:x="171" fg:w="1"/><text x="9.5083%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="9.2583%" y="517" width="0.0541%" height="15" fill="rgb(211,69,7)" fg:x="171" fg:w="1"/><text x="9.5083%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map_while::MapWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="9.3124%" y="533" width="0.0541%" height="15" fill="rgb(211,27,16)" fg:x="172" fg:w="1"/><text x="9.5624%" y="543.50"></text></g><g><title>store::io::uring::try_reclaim_from_wal (17 samples, 0.92%)</title><rect x="8.5003%" y="549" width="0.9204%" height="15" fill="rgb(219,216,14)" fg:x="157" fg:w="17"/><text x="8.7503%" y="559.50"></text></g><g><title>store::io::block_cache::Entry::score (1 samples, 0.05%)</title><rect x="9.3665%" y="533" width="0.0541%" height="15" fill="rgb(219,71,8)" fg:x="173" fg:w="1"/><text x="9.6165%" y="543.50"></text></g><g><title>store::io::uring::IO::build_sqe (101 samples, 5.47%)</title><rect x="4.2231%" y="565" width="5.4683%" height="15" fill="rgb(223,170,53)" fg:x="78" fg:w="101"/><text x="4.4731%" y="575.50">store::..</text></g><g><title>store::io::wal::Wal::segment_file_of (5 samples, 0.27%)</title><rect x="9.4207%" y="549" width="0.2707%" height="15" fill="rgb(246,21,26)" fg:x="174" fg:w="5"/><text x="9.6707%" y="559.50"></text></g><g><title>log4rs::encode::pattern::Chunk::encode (2 samples, 0.11%)</title><rect x="11.8571%" y="501" width="0.1083%" height="15" fill="rgb(248,20,46)" fg:x="219" fg:w="2"/><text x="12.1071%" y="511.50"></text></g><g><title>log4rs::encode::pattern::LeftAlignWriter&lt;W&gt;::finish (1 samples, 0.05%)</title><rect x="11.9112%" y="485" width="0.0541%" height="15" fill="rgb(252,94,11)" fg:x="220" fg:w="1"/><text x="12.1612%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.05%)</title><rect x="11.9112%" y="469" width="0.0541%" height="15" fill="rgb(236,163,8)" fg:x="220" fg:w="1"/><text x="12.1612%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.05%)</title><rect x="11.9112%" y="453" width="0.0541%" height="15" fill="rgb(217,221,45)" fg:x="220" fg:w="1"/><text x="12.1612%" y="463.50"></text></g><g><title>core::fmt::Write::write_char (1 samples, 0.05%)</title><rect x="11.9112%" y="437" width="0.0541%" height="15" fill="rgb(238,38,17)" fg:x="220" fg:w="1"/><text x="12.1612%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.1051 (1 samples, 0.05%)</title><rect x="11.9653%" y="421" width="0.0541%" height="15" fill="rgb(242,210,23)" fg:x="221" fg:w="1"/><text x="12.2153%" y="431.50"></text></g><g><title>alloc::string::String::push.1052 (1 samples, 0.05%)</title><rect x="11.9653%" y="405" width="0.0541%" height="15" fill="rgb(250,86,53)" fg:x="221" fg:w="1"/><text x="12.2153%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.05%)</title><rect x="11.9653%" y="389" width="0.0541%" height="15" fill="rgb(223,168,25)" fg:x="221" fg:w="1"/><text x="12.2153%" y="399.50"></text></g><g><title>&lt;chrono::offset::fixed::FixedOffset as core::fmt::Debug&gt;::fmt (3 samples, 0.16%)</title><rect x="11.9653%" y="485" width="0.1624%" height="15" fill="rgb(251,189,4)" fg:x="221" fg:w="3"/><text x="12.2153%" y="495.50"></text></g><g><title>core::fmt::write (3 samples, 0.16%)</title><rect x="11.9653%" y="469" width="0.1624%" height="15" fill="rgb(245,19,28)" fg:x="221" fg:w="3"/><text x="12.2153%" y="479.50"></text></g><g><title>core::fmt::run (3 samples, 0.16%)</title><rect x="11.9653%" y="453" width="0.1624%" height="15" fill="rgb(207,10,34)" fg:x="221" fg:w="3"/><text x="12.2153%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.16%)</title><rect x="11.9653%" y="437" width="0.1624%" height="15" fill="rgb(235,153,31)" fg:x="221" fg:w="3"/><text x="12.2153%" y="447.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 0.11%)</title><rect x="12.0195%" y="421" width="0.1083%" height="15" fill="rgb(228,72,37)" fg:x="222" fg:w="2"/><text x="12.2695%" y="431.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.11%)</title><rect x="12.0195%" y="405" width="0.1083%" height="15" fill="rgb(215,15,16)" fg:x="222" fg:w="2"/><text x="12.2695%" y="415.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.11%)</title><rect x="12.0195%" y="389" width="0.1083%" height="15" fill="rgb(250,119,29)" fg:x="222" fg:w="2"/><text x="12.2695%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.05%)</title><rect x="12.0736%" y="373" width="0.0541%" height="15" fill="rgb(214,59,1)" fg:x="223" fg:w="1"/><text x="12.3236%" y="383.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.05%)</title><rect x="12.1278%" y="485" width="0.0541%" height="15" fill="rgb(223,109,25)" fg:x="224" fg:w="1"/><text x="12.3778%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.05%)</title><rect x="12.1278%" y="469" width="0.0541%" height="15" fill="rgb(230,198,22)" fg:x="224" fg:w="1"/><text x="12.3778%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.05%)</title><rect x="12.1819%" y="437" width="0.0541%" height="15" fill="rgb(245,184,46)" fg:x="225" fg:w="1"/><text x="12.4319%" y="447.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.05%)</title><rect x="12.2361%" y="181" width="0.0541%" height="15" fill="rgb(253,73,16)" fg:x="226" fg:w="1"/><text x="12.4861%" y="191.50"></text></g><g><title>chrono::format::format_inner (2 samples, 0.11%)</title><rect x="12.2361%" y="421" width="0.1083%" height="15" fill="rgb(206,94,45)" fg:x="226" fg:w="2"/><text x="12.4861%" y="431.50"></text></g><g><title>core::fmt::write (2 samples, 0.11%)</title><rect x="12.2361%" y="405" width="0.1083%" height="15" fill="rgb(236,83,27)" fg:x="226" fg:w="2"/><text x="12.4861%" y="415.50"></text></g><g><title>core::fmt::run (2 samples, 0.11%)</title><rect x="12.2361%" y="389" width="0.1083%" height="15" fill="rgb(220,196,8)" fg:x="226" fg:w="2"/><text x="12.4861%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.11%)</title><rect x="12.2361%" y="373" width="0.1083%" height="15" fill="rgb(254,185,14)" fg:x="226" fg:w="2"/><text x="12.4861%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (2 samples, 0.11%)</title><rect x="12.2361%" y="357" width="0.1083%" height="15" fill="rgb(226,50,22)" fg:x="226" fg:w="2"/><text x="12.4861%" y="367.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.11%)</title><rect x="12.2361%" y="341" width="0.1083%" height="15" fill="rgb(253,147,0)" fg:x="226" fg:w="2"/><text x="12.4861%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.11%)</title><rect x="12.2361%" y="325" width="0.1083%" height="15" fill="rgb(252,46,33)" fg:x="226" fg:w="2"/><text x="12.4861%" y="335.50"></text></g><g><title>core::fmt::Formatter::padding (2 samples, 0.11%)</title><rect x="12.2361%" y="309" width="0.1083%" height="15" fill="rgb(242,22,54)" fg:x="226" fg:w="2"/><text x="12.4861%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (2 samples, 0.11%)</title><rect x="12.2361%" y="293" width="0.1083%" height="15" fill="rgb(223,178,32)" fg:x="226" fg:w="2"/><text x="12.4861%" y="303.50"></text></g><g><title>alloc::string::String::push.1052 (2 samples, 0.11%)</title><rect x="12.2361%" y="277" width="0.1083%" height="15" fill="rgb(214,106,53)" fg:x="226" fg:w="2"/><text x="12.4861%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.11%)</title><rect x="12.2361%" y="261" width="0.1083%" height="15" fill="rgb(232,65,50)" fg:x="226" fg:w="2"/><text x="12.4861%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.11%)</title><rect x="12.2361%" y="245" width="0.1083%" height="15" fill="rgb(231,110,28)" fg:x="226" fg:w="2"/><text x="12.4861%" y="255.50"></text></g><g><title>do_rallocx (2 samples, 0.11%)</title><rect x="12.2361%" y="229" width="0.1083%" height="15" fill="rgb(216,71,40)" fg:x="226" fg:w="2"/><text x="12.4861%" y="239.50"></text></g><g><title>iralloct (2 samples, 0.11%)</title><rect x="12.2361%" y="213" width="0.1083%" height="15" fill="rgb(229,89,53)" fg:x="226" fg:w="2"/><text x="12.4861%" y="223.50"></text></g><g><title>_rjem_je_arena_ralloc (2 samples, 0.11%)</title><rect x="12.2361%" y="197" width="0.1083%" height="15" fill="rgb(210,124,14)" fg:x="226" fg:w="2"/><text x="12.4861%" y="207.50"></text></g><g><title>isdalloct (1 samples, 0.05%)</title><rect x="12.2902%" y="181" width="0.0541%" height="15" fill="rgb(236,213,6)" fg:x="227" fg:w="1"/><text x="12.5402%" y="191.50"></text></g><g><title>arena_sdalloc (1 samples, 0.05%)</title><rect x="12.2902%" y="165" width="0.0541%" height="15" fill="rgb(228,41,5)" fg:x="227" fg:w="1"/><text x="12.5402%" y="175.50"></text></g><g><title>arena_dalloc_large (1 samples, 0.05%)</title><rect x="12.2902%" y="149" width="0.0541%" height="15" fill="rgb(221,167,25)" fg:x="227" fg:w="1"/><text x="12.5402%" y="159.50"></text></g><g><title>tcache_dalloc_large (1 samples, 0.05%)</title><rect x="12.2902%" y="133" width="0.0541%" height="15" fill="rgb(228,144,37)" fg:x="227" fg:w="1"/><text x="12.5402%" y="143.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.05%)</title><rect x="12.2902%" y="117" width="0.0541%" height="15" fill="rgb(227,189,38)" fg:x="227" fg:w="1"/><text x="12.5402%" y="127.50"></text></g><g><title>&lt;log4rs::append::rolling_file::RollingFileAppender as log4rs::append::Append&gt;::append (10 samples, 0.54%)</title><rect x="11.8571%" y="533" width="0.5414%" height="15" fill="rgb(218,8,2)" fg:x="219" fg:w="10"/><text x="12.1071%" y="543.50"></text></g><g><title>&lt;log4rs::encode::pattern::PatternEncoder as log4rs::encode::Encode&gt;::encode (10 samples, 0.54%)</title><rect x="11.8571%" y="517" width="0.5414%" height="15" fill="rgb(209,61,28)" fg:x="219" fg:w="10"/><text x="12.1071%" y="527.50"></text></g><g><title>log4rs::encode::pattern::FormattedChunk::encode (8 samples, 0.43%)</title><rect x="11.9653%" y="501" width="0.4331%" height="15" fill="rgb(233,140,39)" fg:x="221" fg:w="8"/><text x="12.2153%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.22%)</title><rect x="12.1819%" y="485" width="0.2166%" height="15" fill="rgb(251,66,48)" fg:x="225" fg:w="4"/><text x="12.4319%" y="495.50"></text></g><g><title>core::fmt::write (4 samples, 0.22%)</title><rect x="12.1819%" y="469" width="0.2166%" height="15" fill="rgb(210,44,45)" fg:x="225" fg:w="4"/><text x="12.4319%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.22%)</title><rect x="12.1819%" y="453" width="0.2166%" height="15" fill="rgb(214,136,46)" fg:x="225" fg:w="4"/><text x="12.4319%" y="463.50"></text></g><g><title>&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (3 samples, 0.16%)</title><rect x="12.2361%" y="437" width="0.1624%" height="15" fill="rgb(207,130,50)" fg:x="226" fg:w="3"/><text x="12.4861%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.05%)</title><rect x="12.3443%" y="421" width="0.0541%" height="15" fill="rgb(228,102,49)" fg:x="228" fg:w="1"/><text x="12.5943%" y="431.50"></text></g><g><title>&lt;log4rs::Logger as log::Log&gt;::log (12 samples, 0.65%)</title><rect x="11.8571%" y="549" width="0.6497%" height="15" fill="rgb(253,55,1)" fg:x="219" fg:w="12"/><text x="12.1071%" y="559.50"></text></g><g><title>log4rs::ConfiguredLogger::find (2 samples, 0.11%)</title><rect x="12.3985%" y="533" width="0.1083%" height="15" fill="rgb(238,222,9)" fg:x="229" fg:w="2"/><text x="12.6485%" y="543.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.05%)</title><rect x="12.4526%" y="517" width="0.0541%" height="15" fill="rgb(246,99,6)" fg:x="230" fg:w="1"/><text x="12.7026%" y="527.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.05%)</title><rect x="12.4526%" y="501" width="0.0541%" height="15" fill="rgb(219,110,26)" fg:x="230" fg:w="1"/><text x="12.7026%" y="511.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (1 samples, 0.05%)</title><rect x="12.4526%" y="485" width="0.0541%" height="15" fill="rgb(239,160,33)" fg:x="230" fg:w="1"/><text x="12.7026%" y="495.50"></text></g><g><title>&lt;observation::metrics::uring_metrics::COMPLETED_WRITE_IO as core::ops::deref::Deref&gt;::deref (1 samples, 0.05%)</title><rect x="12.5068%" y="549" width="0.0541%" height="15" fill="rgb(220,202,23)" fg:x="231" fg:w="1"/><text x="12.7568%" y="559.50"></text></g><g><title>&lt;observation::metrics::uring_metrics::INFLIGHT_IO as core::ops::deref::Deref&gt;::deref (2 samples, 0.11%)</title><rect x="12.5609%" y="549" width="0.1083%" height="15" fill="rgb(208,80,26)" fg:x="232" fg:w="2"/><text x="12.8109%" y="559.50"></text></g><g><title>__floattidf (2 samples, 0.11%)</title><rect x="12.6692%" y="549" width="0.1083%" height="15" fill="rgb(243,85,7)" fg:x="234" fg:w="2"/><text x="12.9192%" y="559.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (2 samples, 0.11%)</title><rect x="12.6692%" y="533" width="0.1083%" height="15" fill="rgb(228,77,47)" fg:x="234" fg:w="2"/><text x="12.9192%" y="543.50"></text></g><g><title>core::num::&lt;impl i128&gt;::unsigned_abs (2 samples, 0.11%)</title><rect x="12.6692%" y="517" width="0.1083%" height="15" fill="rgb(212,226,8)" fg:x="234" fg:w="2"/><text x="12.9192%" y="527.50"></text></g><g><title>core::num::&lt;impl i128&gt;::wrapping_abs (2 samples, 0.11%)</title><rect x="12.6692%" y="501" width="0.1083%" height="15" fill="rgb(241,120,54)" fg:x="234" fg:w="2"/><text x="12.9192%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.16%)</title><rect x="12.7775%" y="549" width="0.1624%" height="15" fill="rgb(226,80,16)" fg:x="236" fg:w="3"/><text x="13.0275%" y="559.50"></text></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.05%)</title><rect x="12.9399%" y="405" width="0.0541%" height="15" fill="rgb(240,76,13)" fg:x="239" fg:w="1"/><text x="13.1899%" y="415.50"></text></g><g><title>pac_dalloc_impl (1 samples, 0.05%)</title><rect x="12.9399%" y="389" width="0.0541%" height="15" fill="rgb(252,74,8)" fg:x="239" fg:w="1"/><text x="13.1899%" y="399.50"></text></g><g><title>_rjem_je_extent_record (1 samples, 0.05%)</title><rect x="12.9399%" y="373" width="0.0541%" height="15" fill="rgb(244,155,2)" fg:x="239" fg:w="1"/><text x="13.1899%" y="383.50"></text></g><g><title>extent_deactivate_locked (1 samples, 0.05%)</title><rect x="12.9399%" y="357" width="0.0541%" height="15" fill="rgb(215,81,35)" fg:x="239" fg:w="1"/><text x="13.1899%" y="367.50"></text></g><g><title>extent_deactivate_locked_impl (1 samples, 0.05%)</title><rect x="12.9399%" y="341" width="0.0541%" height="15" fill="rgb(206,55,2)" fg:x="239" fg:w="1"/><text x="13.1899%" y="351.50"></text></g><g><title>_rjem_je_eset_insert (1 samples, 0.05%)</title><rect x="12.9399%" y="325" width="0.0541%" height="15" fill="rgb(231,2,34)" fg:x="239" fg:w="1"/><text x="13.1899%" y="335.50"></text></g><g><title>_rjem_je_stats_postfork_child (1 samples, 0.05%)</title><rect x="12.9399%" y="309" width="0.0541%" height="15" fill="rgb(242,176,48)" fg:x="239" fg:w="1"/><text x="13.1899%" y="319.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (3 samples, 0.16%)</title><rect x="12.9399%" y="453" width="0.1624%" height="15" fill="rgb(249,31,36)" fg:x="239" fg:w="3"/><text x="13.1899%" y="463.50"></text></g><g><title>tcache_bin_flush_bottom (3 samples, 0.16%)</title><rect x="12.9399%" y="437" width="0.1624%" height="15" fill="rgb(205,18,17)" fg:x="239" fg:w="3"/><text x="13.1899%" y="447.50"></text></g><g><title>tcache_bin_flush_impl (3 samples, 0.16%)</title><rect x="12.9399%" y="421" width="0.1624%" height="15" fill="rgb(254,130,5)" fg:x="239" fg:w="3"/><text x="13.1899%" y="431.50"></text></g><g><title>arena_dalloc_bin_locked_step (2 samples, 0.11%)</title><rect x="12.9940%" y="405" width="0.1083%" height="15" fill="rgb(229,42,45)" fg:x="240" fg:w="2"/><text x="13.2440%" y="415.50"></text></g><g><title>arena_bin_lower_slab (1 samples, 0.05%)</title><rect x="13.0482%" y="389" width="0.0541%" height="15" fill="rgb(245,95,25)" fg:x="241" fg:w="1"/><text x="13.2982%" y="399.50"></text></g><g><title>arena_bin_slabs_nonfull_insert (1 samples, 0.05%)</title><rect x="13.0482%" y="373" width="0.0541%" height="15" fill="rgb(249,193,38)" fg:x="241" fg:w="1"/><text x="13.2982%" y="383.50"></text></g><g><title>_rjem_je_edata_heap_insert (1 samples, 0.05%)</title><rect x="13.0482%" y="357" width="0.0541%" height="15" fill="rgb(241,140,43)" fg:x="241" fg:w="1"/><text x="13.2982%" y="367.50"></text></g><g><title>_rjem_je_sdallocx_default (4 samples, 0.22%)</title><rect x="12.9399%" y="533" width="0.2166%" height="15" fill="rgb(245,78,48)" fg:x="239" fg:w="4"/><text x="13.1899%" y="543.50"></text></g><g><title>isfree (4 samples, 0.22%)</title><rect x="12.9399%" y="517" width="0.2166%" height="15" fill="rgb(214,92,39)" fg:x="239" fg:w="4"/><text x="13.1899%" y="527.50"></text></g><g><title>isdalloct (4 samples, 0.22%)</title><rect x="12.9399%" y="501" width="0.2166%" height="15" fill="rgb(211,189,14)" fg:x="239" fg:w="4"/><text x="13.1899%" y="511.50"></text></g><g><title>arena_sdalloc (4 samples, 0.22%)</title><rect x="12.9399%" y="485" width="0.2166%" height="15" fill="rgb(218,7,24)" fg:x="239" fg:w="4"/><text x="13.1899%" y="495.50"></text></g><g><title>tcache_dalloc_small (4 samples, 0.22%)</title><rect x="12.9399%" y="469" width="0.2166%" height="15" fill="rgb(224,200,49)" fg:x="239" fg:w="4"/><text x="13.1899%" y="479.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.05%)</title><rect x="13.1023%" y="453" width="0.0541%" height="15" fill="rgb(218,210,14)" fg:x="242" fg:w="1"/><text x="13.3523%" y="463.50"></text></g><g><title>cache_bin_full (1 samples, 0.05%)</title><rect x="13.1023%" y="437" width="0.0541%" height="15" fill="rgb(234,142,31)" fg:x="242" fg:w="1"/><text x="13.3523%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.49%)</title><rect x="12.9399%" y="549" width="0.4873%" height="15" fill="rgb(227,165,2)" fg:x="239" fg:w="9"/><text x="13.1899%" y="559.50"></text></g><g><title>tokio::runtime::task::raw::dealloc (5 samples, 0.27%)</title><rect x="13.1565%" y="533" width="0.2707%" height="15" fill="rgb(232,44,46)" fg:x="243" fg:w="5"/><text x="13.4065%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;range_server::session::Session&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;::process0::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (1 samples, 0.05%)</title><rect x="13.3730%" y="517" width="0.0541%" height="15" fill="rgb(236,149,47)" fg:x="247" fg:w="1"/><text x="13.6230%" y="527.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.05%)</title><rect x="13.4272%" y="549" width="0.0541%" height="15" fill="rgb(227,45,31)" fg:x="248" fg:w="1"/><text x="13.6772%" y="559.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.05%)</title><rect x="13.4272%" y="533" width="0.0541%" height="15" fill="rgb(240,176,51)" fg:x="248" fg:w="1"/><text x="13.6772%" y="543.50"></text></g><g><title>isfree (1 samples, 0.05%)</title><rect x="13.4272%" y="517" width="0.0541%" height="15" fill="rgb(249,146,41)" fg:x="248" fg:w="1"/><text x="13.6772%" y="527.50"></text></g><g><title>isdalloct (1 samples, 0.05%)</title><rect x="13.4272%" y="501" width="0.0541%" height="15" fill="rgb(213,208,4)" fg:x="248" fg:w="1"/><text x="13.6772%" y="511.50"></text></g><g><title>arena_sdalloc (1 samples, 0.05%)</title><rect x="13.4272%" y="485" width="0.0541%" height="15" fill="rgb(245,84,36)" fg:x="248" fg:w="1"/><text x="13.6772%" y="495.50"></text></g><g><title>tcache_dalloc_small (1 samples, 0.05%)</title><rect x="13.4272%" y="469" width="0.0541%" height="15" fill="rgb(254,84,18)" fg:x="248" fg:w="1"/><text x="13.6772%" y="479.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.05%)</title><rect x="13.4272%" y="453" width="0.0541%" height="15" fill="rgb(225,38,54)" fg:x="248" fg:w="1"/><text x="13.6772%" y="463.50"></text></g><g><title>tcache_bin_flush_bottom (1 samples, 0.05%)</title><rect x="13.4272%" y="437" width="0.0541%" height="15" fill="rgb(246,50,30)" fg:x="248" fg:w="1"/><text x="13.6772%" y="447.50"></text></g><g><title>tcache_bin_flush_impl (1 samples, 0.05%)</title><rect x="13.4272%" y="421" width="0.0541%" height="15" fill="rgb(246,148,9)" fg:x="248" fg:w="1"/><text x="13.6772%" y="431.50"></text></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.05%)</title><rect x="13.4272%" y="405" width="0.0541%" height="15" fill="rgb(223,75,4)" fg:x="248" fg:w="1"/><text x="13.6772%" y="415.50"></text></g><g><title>emap_edata_lookup_batch (1 samples, 0.05%)</title><rect x="13.4272%" y="389" width="0.0541%" height="15" fill="rgb(239,148,41)" fg:x="248" fg:w="1"/><text x="13.6772%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.27%)</title><rect x="13.4813%" y="549" width="0.2707%" height="15" fill="rgb(205,195,3)" fg:x="249" fg:w="5"/><text x="13.7313%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.22%)</title><rect x="13.5355%" y="533" width="0.2166%" height="15" fill="rgb(254,161,1)" fg:x="250" fg:w="4"/><text x="13.7855%" y="543.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (12 samples, 0.65%)</title><rect x="13.7520%" y="549" width="0.6497%" height="15" fill="rgb(211,229,8)" fg:x="254" fg:w="12"/><text x="14.0020%" y="559.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify.3940 (4 samples, 0.22%)</title><rect x="14.1852%" y="533" width="0.2166%" height="15" fill="rgb(220,97,9)" fg:x="262" fg:w="4"/><text x="14.4352%" y="543.50"></text></g><g><title>expf32x (12 samples, 0.65%)</title><rect x="14.4017%" y="549" width="0.6497%" height="15" fill="rgb(240,218,8)" fg:x="266" fg:w="12"/><text x="14.6517%" y="559.50"></text></g><g><title>sdallocx (2 samples, 0.11%)</title><rect x="15.0514%" y="549" width="0.1083%" height="15" fill="rgb(250,44,0)" fg:x="278" fg:w="2"/><text x="15.3014%" y="559.50"></text></g><g><title>free_fastpath (2 samples, 0.11%)</title><rect x="15.0514%" y="533" width="0.1083%" height="15" fill="rgb(236,41,53)" fg:x="278" fg:w="2"/><text x="15.3014%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.05%)</title><rect x="15.1597%" y="549" width="0.0541%" height="15" fill="rgb(218,227,13)" fg:x="280" fg:w="1"/><text x="15.4097%" y="559.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.05%)</title><rect x="15.1597%" y="533" width="0.0541%" height="15" fill="rgb(217,94,32)" fg:x="280" fg:w="1"/><text x="15.4097%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.05%)</title><rect x="15.2139%" y="549" width="0.0541%" height="15" fill="rgb(213,217,12)" fg:x="281" fg:w="1"/><text x="15.4639%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.22%)</title><rect x="15.7011%" y="533" width="0.2166%" height="15" fill="rgb(229,13,46)" fg:x="290" fg:w="4"/><text x="15.9511%" y="543.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="15.8636%" y="517" width="0.0541%" height="15" fill="rgb(243,139,5)" fg:x="293" fg:w="1"/><text x="16.1136%" y="527.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="15.8636%" y="501" width="0.0541%" height="15" fill="rgb(249,38,45)" fg:x="293" fg:w="1"/><text x="16.1136%" y="511.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="15.8636%" y="485" width="0.0541%" height="15" fill="rgb(216,70,11)" fg:x="293" fg:w="1"/><text x="16.1136%" y="495.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="15.8636%" y="469" width="0.0541%" height="15" fill="rgb(253,101,25)" fg:x="293" fg:w="1"/><text x="16.1136%" y="479.50"></text></g><g><title>store::io::block_cache::BlockCache::add_entry (15 samples, 0.81%)</title><rect x="15.2680%" y="549" width="0.8121%" height="15" fill="rgb(207,197,30)" fg:x="282" fg:w="15"/><text x="15.5180%" y="559.50"></text></g><g><title>malloc (3 samples, 0.16%)</title><rect x="15.9177%" y="533" width="0.1624%" height="15" fill="rgb(238,87,13)" fg:x="294" fg:w="3"/><text x="16.1677%" y="543.50"></text></g><g><title>imalloc_fastpath (3 samples, 0.16%)</title><rect x="15.9177%" y="517" width="0.1624%" height="15" fill="rgb(215,155,8)" fg:x="294" fg:w="3"/><text x="16.1677%" y="527.50"></text></g><g><title>cache_bin_alloc_easy (3 samples, 0.16%)</title><rect x="15.9177%" y="501" width="0.1624%" height="15" fill="rgb(239,166,38)" fg:x="294" fg:w="3"/><text x="16.1677%" y="511.50"></text></g><g><title>cache_bin_alloc_impl (3 samples, 0.16%)</title><rect x="15.9177%" y="485" width="0.1624%" height="15" fill="rgb(240,194,35)" fg:x="294" fg:w="3"/><text x="16.1677%" y="495.50"></text></g><g><title>store::io::uring::try_reclaim_from_wal (10 samples, 0.54%)</title><rect x="16.0801%" y="549" width="0.5414%" height="15" fill="rgb(219,10,44)" fg:x="297" fg:w="10"/><text x="16.3301%" y="559.50"></text></g><g><title>store::io::wal::Wal::segment_file_of (3 samples, 0.16%)</title><rect x="16.6215%" y="549" width="0.1624%" height="15" fill="rgb(251,220,35)" fg:x="307" fg:w="3"/><text x="16.8715%" y="559.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.11%)</title><rect x="16.8923%" y="533" width="0.1083%" height="15" fill="rgb(218,117,13)" fg:x="312" fg:w="2"/><text x="17.1423%" y="543.50"></text></g><g><title>IO (321 samples, 17.38%)</title><rect x="0.0000%" y="677" width="17.3795%" height="15" fill="rgb(221,213,40)" fg:x="0" fg:w="321"/><text x="0.2500%" y="687.50">IO</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (321 samples, 17.38%)</title><rect x="0.0000%" y="661" width="17.3795%" height="15" fill="rgb(251,224,35)" fg:x="0" fg:w="321"/><text x="0.2500%" y="671.50">std::sys::unix::thread::Thr..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (321 samples, 17.38%)</title><rect x="0.0000%" y="645" width="17.3795%" height="15" fill="rgb(241,33,39)" fg:x="0" fg:w="321"/><text x="0.2500%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (321 samples, 17.38%)</title><rect x="0.0000%" y="629" width="17.3795%" height="15" fill="rgb(222,74,17)" fg:x="0" fg:w="321"/><text x="0.2500%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as ..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (321 samples, 17.38%)</title><rect x="0.0000%" y="613" width="17.3795%" height="15" fill="rgb(225,103,0)" fg:x="0" fg:w="321"/><text x="0.2500%" y="623.50">core::ops::function::FnOnce..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (321 samples, 17.38%)</title><rect x="0.0000%" y="597" width="17.3795%" height="15" fill="rgb(240,0,12)" fg:x="0" fg:w="321"/><text x="0.2500%" y="607.50">std::sys_common::backtrace:..</text></g><g><title>store::io::uring::IO::run (321 samples, 17.38%)</title><rect x="0.0000%" y="581" width="17.3795%" height="15" fill="rgb(233,213,37)" fg:x="0" fg:w="321"/><text x="0.2500%" y="591.50">store::io::uring::IO::run</text></g><g><title>store::io::uring::IO::reap_data_tasks (142 samples, 7.69%)</title><rect x="9.6914%" y="565" width="7.6881%" height="15" fill="rgb(225,84,52)" fg:x="179" fg:w="142"/><text x="9.9414%" y="575.50">store::io::..</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (11 samples, 0.60%)</title><rect x="16.7840%" y="549" width="0.5956%" height="15" fill="rgb(247,160,51)" fg:x="310" fg:w="11"/><text x="17.0340%" y="559.50"></text></g><g><title>tokio::task::local::Shared::schedule (7 samples, 0.38%)</title><rect x="17.0005%" y="533" width="0.3790%" height="15" fill="rgb(244,60,51)" fg:x="314" fg:w="7"/><text x="17.2505%" y="543.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.11%)</title><rect x="17.2713%" y="517" width="0.1083%" height="15" fill="rgb(233,114,7)" fg:x="319" fg:w="2"/><text x="17.5213%" y="527.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (2 samples, 0.11%)</title><rect x="17.2713%" y="501" width="0.1083%" height="15" fill="rgb(246,136,16)" fg:x="319" fg:w="2"/><text x="17.5213%" y="511.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="19.1121%" y="581" width="0.0541%" height="15" fill="rgb(243,114,45)" fg:x="353" fg:w="1"/><text x="19.3621%" y="591.50"></text></g><g><title>&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as crossbeam_channel::select::SelectHandle&gt;::is_ready (6 samples, 0.32%)</title><rect x="19.1662%" y="581" width="0.3249%" height="15" fill="rgb(247,183,43)" fg:x="354" fg:w="6"/><text x="19.4162%" y="591.50"></text></g><g><title>&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as crossbeam_channel::select::SelectHandle&gt;::unwatch (1 samples, 0.05%)</title><rect x="20.0325%" y="565" width="0.0541%" height="15" fill="rgb(251,210,42)" fg:x="370" fg:w="1"/><text x="20.2825%" y="575.50"></text></g><g><title>&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as crossbeam_channel::select::SelectHandle&gt;::watch (5 samples, 0.27%)</title><rect x="20.0866%" y="565" width="0.2707%" height="15" fill="rgb(221,88,35)" fg:x="371" fg:w="5"/><text x="20.3366%" y="575.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::watch (4 samples, 0.22%)</title><rect x="20.1408%" y="549" width="0.2166%" height="15" fill="rgb(242,21,20)" fg:x="372" fg:w="4"/><text x="20.3908%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.05%)</title><rect x="20.5198%" y="549" width="0.0541%" height="15" fill="rgb(233,226,36)" fg:x="379" fg:w="1"/><text x="20.7698%" y="559.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::unwatch (8 samples, 0.43%)</title><rect x="20.3573%" y="565" width="0.4331%" height="15" fill="rgb(243,189,34)" fg:x="376" fg:w="8"/><text x="20.6073%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (4 samples, 0.22%)</title><rect x="20.5739%" y="549" width="0.2166%" height="15" fill="rgb(207,145,50)" fg:x="380" fg:w="4"/><text x="20.8239%" y="559.50"></text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 0.22%)</title><rect x="20.5739%" y="533" width="0.2166%" height="15" fill="rgb(242,1,50)" fg:x="380" fg:w="4"/><text x="20.8239%" y="543.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (29 samples, 1.57%)</title><rect x="19.4911%" y="581" width="1.5701%" height="15" fill="rgb(231,65,32)" fg:x="360" fg:w="29"/><text x="19.7411%" y="591.50"></text></g><g><title>std::thread::park (5 samples, 0.27%)</title><rect x="20.7905%" y="565" width="0.2707%" height="15" fill="rgb(208,68,49)" fg:x="384" fg:w="5"/><text x="21.0405%" y="575.50"></text></g><g><title>std::thread::current (5 samples, 0.27%)</title><rect x="20.7905%" y="549" width="0.2707%" height="15" fill="rgb(253,54,49)" fg:x="384" fg:w="5"/><text x="21.0405%" y="559.50"></text></g><g><title>std::sys_common::thread_info::current_thread (1 samples, 0.05%)</title><rect x="21.0070%" y="533" width="0.0541%" height="15" fill="rgb(245,186,24)" fg:x="388" fg:w="1"/><text x="21.2570%" y="543.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with (1 samples, 0.05%)</title><rect x="21.0070%" y="517" width="0.0541%" height="15" fill="rgb(209,2,41)" fg:x="388" fg:w="1"/><text x="21.2570%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.05%)</title><rect x="21.0070%" y="501" width="0.0541%" height="15" fill="rgb(242,208,54)" fg:x="388" fg:w="1"/><text x="21.2570%" y="511.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with::{{closure}} (1 samples, 0.05%)</title><rect x="21.0070%" y="485" width="0.0541%" height="15" fill="rgb(225,9,51)" fg:x="388" fg:w="1"/><text x="21.2570%" y="495.50"></text></g><g><title>std::sys_common::thread_info::current_thread::{{closure}} (1 samples, 0.05%)</title><rect x="21.0070%" y="469" width="0.0541%" height="15" fill="rgb(207,207,25)" fg:x="388" fg:w="1"/><text x="21.2570%" y="479.50"></text></g><g><title>&lt;std::thread::Thread as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="21.0070%" y="453" width="0.0541%" height="15" fill="rgb(253,96,18)" fg:x="388" fg:w="1"/><text x="21.2570%" y="463.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="21.0070%" y="437" width="0.0541%" height="15" fill="rgb(252,215,20)" fg:x="388" fg:w="1"/><text x="21.2570%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="21.0070%" y="421" width="0.0541%" height="15" fill="rgb(245,227,26)" fg:x="388" fg:w="1"/><text x="21.2570%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.05%)</title><rect x="21.0070%" y="405" width="0.0541%" height="15" fill="rgb(241,208,0)" fg:x="388" fg:w="1"/><text x="21.2570%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.05%)</title><rect x="21.0070%" y="389" width="0.0541%" height="15" fill="rgb(224,130,10)" fg:x="388" fg:w="1"/><text x="21.2570%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (2 samples, 0.11%)</title><rect x="21.0612%" y="581" width="0.1083%" height="15" fill="rgb(237,29,0)" fg:x="389" fg:w="2"/><text x="21.3112%" y="591.50"></text></g><g><title>malloc (8 samples, 0.43%)</title><rect x="21.1695%" y="581" width="0.4331%" height="15" fill="rgb(219,27,41)" fg:x="391" fg:w="8"/><text x="21.4195%" y="591.50"></text></g><g><title>imalloc_fastpath (8 samples, 0.43%)</title><rect x="21.1695%" y="565" width="0.4331%" height="15" fill="rgb(245,101,19)" fg:x="391" fg:w="8"/><text x="21.4195%" y="575.50"></text></g><g><title>cache_bin_alloc_easy (8 samples, 0.43%)</title><rect x="21.1695%" y="549" width="0.4331%" height="15" fill="rgb(243,44,37)" fg:x="391" fg:w="8"/><text x="21.4195%" y="559.50"></text></g><g><title>cache_bin_alloc_impl (8 samples, 0.43%)</title><rect x="21.1695%" y="533" width="0.4331%" height="15" fill="rgb(228,213,43)" fg:x="391" fg:w="8"/><text x="21.4195%" y="543.50"></text></g><g><title>SaveError (4 samples, 0.22%)</title><rect x="21.8733%" y="565" width="0.2166%" height="15" fill="rgb(219,163,21)" fg:x="404" fg:w="4"/><text x="22.1233%" y="575.50"></text></g><g><title>__tls_get_addr (1 samples, 0.05%)</title><rect x="25.2301%" y="501" width="0.0541%" height="15" fill="rgb(234,86,24)" fg:x="466" fg:w="1"/><text x="25.4801%" y="511.50"></text></g><g><title>__tls_init (7 samples, 0.38%)</title><rect x="25.2842%" y="501" width="0.3790%" height="15" fill="rgb(225,10,24)" fg:x="467" fg:w="7"/><text x="25.5342%" y="511.50"></text></g><g><title>__tls_get_addr (3 samples, 0.16%)</title><rect x="25.5008%" y="485" width="0.1624%" height="15" fill="rgb(218,109,7)" fg:x="471" fg:w="3"/><text x="25.7508%" y="495.50"></text></g><g><title>rocksdb::(anonymous namespace)::PosixClock::NowMicros() (3 samples, 0.16%)</title><rect x="25.6632%" y="501" width="0.1624%" height="15" fill="rgb(210,20,26)" fg:x="474" fg:w="3"/><text x="25.9132%" y="511.50"></text></g><g><title>rocksdb::DBImpl::GetMaxTotalWalSize() const (2 samples, 0.11%)</title><rect x="26.7461%" y="485" width="0.1083%" height="15" fill="rgb(216,18,1)" fg:x="494" fg:w="2"/><text x="26.9961%" y="495.50"></text></g><g><title>rocksdb::InstrumentedMutex::Lock() (8 samples, 0.43%)</title><rect x="26.8544%" y="485" width="0.4331%" height="15" fill="rgb(206,163,23)" fg:x="496" fg:w="8"/><text x="27.1044%" y="495.50"></text></g><g><title>rocksdb::port::Mutex::Lock() (3 samples, 0.16%)</title><rect x="27.1251%" y="469" width="0.1624%" height="15" fill="rgb(229,150,31)" fg:x="501" fg:w="3"/><text x="27.3751%" y="479.50"></text></g><g><title>rocksdb::TrimHistoryScheduler::Empty() (2 samples, 0.11%)</title><rect x="27.2875%" y="485" width="0.1083%" height="15" fill="rgb(231,10,5)" fg:x="504" fg:w="2"/><text x="27.5375%" y="495.50"></text></g><g><title>rocksdb::WriteController::IsStopped() const (3 samples, 0.16%)</title><rect x="27.3958%" y="485" width="0.1624%" height="15" fill="rgb(250,40,50)" fg:x="506" fg:w="3"/><text x="27.6458%" y="495.50"></text></g><g><title>rocksdb::port::Mutex::Unlock() (1 samples, 0.05%)</title><rect x="27.5582%" y="485" width="0.0541%" height="15" fill="rgb(217,119,7)" fg:x="509" fg:w="1"/><text x="27.8082%" y="495.50"></text></g><g><title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, rocksdb::DBImpl::LogContext*, rocksdb::DBImpl::WriteContext*) (34 samples, 1.84%)</title><rect x="25.8257%" y="501" width="1.8408%" height="15" fill="rgb(245,214,40)" fg:x="477" fg:w="34"/><text x="26.0757%" y="511.50">r..</text></g><g><title>rocksdb::port::PthreadCall(char const*, int) (1 samples, 0.05%)</title><rect x="27.6123%" y="485" width="0.0541%" height="15" fill="rgb(216,187,1)" fg:x="510" fg:w="1"/><text x="27.8623%" y="495.50"></text></g><g><title>rocksdb::DBImpl::WriteContext::~WriteContext() (4 samples, 0.22%)</title><rect x="27.6665%" y="501" width="0.2166%" height="15" fill="rgb(237,146,21)" fg:x="511" fg:w="4"/><text x="27.9165%" y="511.50"></text></g><g><title>rocksdb::InternalStats::AddDBStats(rocksdb::InternalStats::InternalDBStatsType, unsigned long, bool) (2 samples, 0.11%)</title><rect x="27.8831%" y="501" width="0.1083%" height="15" fill="rgb(210,174,47)" fg:x="515" fg:w="2"/><text x="28.1331%" y="511.50"></text></g><g><title>rocksdb::PerfContext::operator=(rocksdb::PerfContext const&amp;) (2 samples, 0.11%)</title><rect x="27.9913%" y="501" width="0.1083%" height="15" fill="rgb(218,111,39)" fg:x="517" fg:w="2"/><text x="28.2413%" y="511.50"></text></g><g><title>rocksdb::StatisticsImpl::HistEnabledForType(unsigned int) const (1 samples, 0.05%)</title><rect x="28.0996%" y="501" width="0.0541%" height="15" fill="rgb(224,95,19)" fg:x="519" fg:w="1"/><text x="28.3496%" y="511.50"></text></g><g><title>rocksdb::HistogramImpl::Add(unsigned long) (2 samples, 0.11%)</title><rect x="28.3162%" y="485" width="0.1083%" height="15" fill="rgb(234,15,38)" fg:x="523" fg:w="2"/><text x="28.5662%" y="495.50"></text></g><g><title>rocksdb::StatisticsImpl::recordInHistogram(unsigned int, unsigned long) (7 samples, 0.38%)</title><rect x="28.1538%" y="501" width="0.3790%" height="15" fill="rgb(246,56,12)" fg:x="520" fg:w="7"/><text x="28.4038%" y="511.50"></text></g><g><title>rocksdb::HistogramStat::Add(unsigned long) (2 samples, 0.11%)</title><rect x="28.4245%" y="485" width="0.1083%" height="15" fill="rgb(247,16,17)" fg:x="525" fg:w="2"/><text x="28.6745%" y="495.50"></text></g><g><title>rocksdb::HistogramBucketMapper::IndexForValue(unsigned long) const (2 samples, 0.11%)</title><rect x="28.4245%" y="469" width="0.1083%" height="15" fill="rgb(215,151,11)" fg:x="525" fg:w="2"/><text x="28.6745%" y="479.50"></text></g><g><title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long) (2 samples, 0.11%)</title><rect x="28.5328%" y="501" width="0.1083%" height="15" fill="rgb(225,16,24)" fg:x="527" fg:w="2"/><text x="28.7828%" y="511.50"></text></g><g><title>rocksdb::Status::operator=(rocksdb::Status const&amp;) (2 samples, 0.11%)</title><rect x="28.6410%" y="501" width="0.1083%" height="15" fill="rgb(217,117,5)" fg:x="529" fg:w="2"/><text x="28.8910%" y="511.50"></text></g><g><title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.05%)</title><rect x="28.7493%" y="501" width="0.0541%" height="15" fill="rgb(246,187,53)" fg:x="531" fg:w="1"/><text x="28.9993%" y="511.50"></text></g><g><title>rocksdb::StopWatch::~StopWatch() (7 samples, 0.38%)</title><rect x="28.8035%" y="501" width="0.3790%" height="15" fill="rgb(241,71,40)" fg:x="532" fg:w="7"/><text x="29.0535%" y="511.50"></text></g><g><title>rocksdb::(anonymous namespace)::PosixClock::NowMicros() (1 samples, 0.05%)</title><rect x="29.1283%" y="485" width="0.0541%" height="15" fill="rgb(231,67,39)" fg:x="538" fg:w="1"/><text x="29.3783%" y="495.50"></text></g><g><title>rocksdb::SuperVersionContext::SuperVersionContext(bool) (3 samples, 0.16%)</title><rect x="29.1825%" y="501" width="0.1624%" height="15" fill="rgb(222,120,24)" fg:x="539" fg:w="3"/><text x="29.4325%" y="511.50"></text></g><g><title>rocksdb::WriteBatch::GetProtectionBytesPerKey() const (1 samples, 0.05%)</title><rect x="29.3449%" y="501" width="0.0541%" height="15" fill="rgb(248,3,3)" fg:x="542" fg:w="1"/><text x="29.5949%" y="511.50"></text></g><g><title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.05%)</title><rect x="29.3990%" y="501" width="0.0541%" height="15" fill="rgb(228,218,5)" fg:x="543" fg:w="1"/><text x="29.6490%" y="511.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::CheckMemtableFull() (4 samples, 0.22%)</title><rect x="31.2398%" y="421" width="0.2166%" height="15" fill="rgb(212,202,43)" fg:x="577" fg:w="4"/><text x="31.4898%" y="431.50"></text></g><g><title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.05%)</title><rect x="31.4023%" y="405" width="0.0541%" height="15" fill="rgb(235,183,2)" fg:x="580" fg:w="1"/><text x="31.6523%" y="415.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::SeekToColumnFamily(unsigned int, rocksdb::Status*) [clone .constprop.0] (5 samples, 0.27%)</title><rect x="31.4564%" y="421" width="0.2707%" height="15" fill="rgb(230,165,10)" fg:x="581" fg:w="5"/><text x="31.7064%" y="431.50"></text></g><g><title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (5 samples, 0.27%)</title><rect x="31.4564%" y="405" width="0.2707%" height="15" fill="rgb(219,54,40)" fg:x="581" fg:w="5"/><text x="31.7064%" y="415.50"></text></g><g><title>rocksdb::ColumnFamilySet::GetColumnFamily(unsigned int) const (4 samples, 0.22%)</title><rect x="31.5106%" y="389" width="0.2166%" height="15" fill="rgb(244,73,9)" fg:x="582" fg:w="4"/><text x="31.7606%" y="399.50"></text></g><g><title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.11%)</title><rect x="31.7271%" y="421" width="0.1083%" height="15" fill="rgb(212,32,45)" fg:x="586" fg:w="2"/><text x="31.9771%" y="431.50"></text></g><g><title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::RecomputeSpliceLevels(rocksdb::Slice const&amp;, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, int) (8 samples, 0.43%)</title><rect x="33.6762%" y="389" width="0.4331%" height="15" fill="rgb(205,58,31)" fg:x="622" fg:w="8"/><text x="33.9262%" y="399.50"></text></g><g><title>__tls_init (1 samples, 0.05%)</title><rect x="34.2177%" y="373" width="0.0541%" height="15" fill="rgb(250,120,43)" fg:x="632" fg:w="1"/><text x="34.4677%" y="383.50"></text></g><g><title>__tls_get_addr (1 samples, 0.05%)</title><rect x="34.2177%" y="357" width="0.0541%" height="15" fill="rgb(235,13,10)" fg:x="632" fg:w="1"/><text x="34.4677%" y="367.50"></text></g><g><title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.22%)</title><rect x="34.1094%" y="389" width="0.2166%" height="15" fill="rgb(232,219,31)" fg:x="630" fg:w="4"/><text x="34.3594%" y="399.50"></text></g><g><title>{virtual override thunk({offset(-32)}, rocksdb::(anonymous namespace)::BytewiseComparatorImpl::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const)} (1 samples, 0.05%)</title><rect x="34.2718%" y="373" width="0.0541%" height="15" fill="rgb(218,157,51)" fg:x="633" fg:w="1"/><text x="34.5218%" y="383.50"></text></g><g><title>rocksdb::PerfContext::operator=(rocksdb::PerfContext const&amp;) (1 samples, 0.05%)</title><rect x="34.3801%" y="373" width="0.0541%" height="15" fill="rgb(211,91,52)" fg:x="635" fg:w="1"/><text x="34.6301%" y="383.50"></text></g><g><title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (27 samples, 1.46%)</title><rect x="33.0807%" y="405" width="1.4618%" height="15" fill="rgb(240,173,1)" fg:x="611" fg:w="27"/><text x="33.3307%" y="415.50"></text></g><g><title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.22%)</title><rect x="34.3259%" y="389" width="0.2166%" height="15" fill="rgb(248,20,47)" fg:x="634" fg:w="4"/><text x="34.5759%" y="399.50"></text></g><g><title>{virtual override thunk({offset(-32)}, rocksdb::(anonymous namespace)::BytewiseComparatorImpl::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const)} (2 samples, 0.11%)</title><rect x="34.4342%" y="373" width="0.1083%" height="15" fill="rgb(217,221,40)" fg:x="636" fg:w="2"/><text x="34.6842%" y="383.50"></text></g><g><title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::AllocateNode(unsigned long, int) [clone .isra.0] (21 samples, 1.14%)</title><rect x="34.7591%" y="389" width="1.1370%" height="15" fill="rgb(226,149,51)" fg:x="642" fg:w="21"/><text x="35.0091%" y="399.50"></text></g><g><title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (13 samples, 0.70%)</title><rect x="35.1922%" y="373" width="0.7038%" height="15" fill="rgb(252,193,7)" fg:x="650" fg:w="13"/><text x="35.4422%" y="383.50"></text></g><g><title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (5 samples, 0.27%)</title><rect x="35.6253%" y="357" width="0.2707%" height="15" fill="rgb(205,123,0)" fg:x="658" fg:w="5"/><text x="35.8753%" y="367.50"></text></g><g><title>rocksdb::(anonymous namespace)::SkipListRep::Allocate(unsigned long, char**) (27 samples, 1.46%)</title><rect x="34.5425%" y="405" width="1.4618%" height="15" fill="rgb(233,173,25)" fg:x="638" fg:w="27"/><text x="34.7925%" y="415.50"></text></g><g><title>rocksdb::Random::GetTLSInstance() (2 samples, 0.11%)</title><rect x="35.8960%" y="389" width="0.1083%" height="15" fill="rgb(216,63,32)" fg:x="663" fg:w="2"/><text x="36.1460%" y="399.50"></text></g><g><title>rocksdb::(anonymous namespace)::SkipListRep::InsertKey(void*) (1 samples, 0.05%)</title><rect x="36.0043%" y="405" width="0.0541%" height="15" fill="rgb(209,56,45)" fg:x="665" fg:w="1"/><text x="36.2543%" y="415.50"></text></g><g><title>rocksdb::Hash(char const*, unsigned long, unsigned int) (2 samples, 0.11%)</title><rect x="36.0585%" y="405" width="0.1083%" height="15" fill="rgb(226,111,49)" fg:x="666" fg:w="2"/><text x="36.3085%" y="415.50"></text></g><g><title>rocksdb::MemTable::UpdateFlushState() (4 samples, 0.22%)</title><rect x="36.1668%" y="405" width="0.2166%" height="15" fill="rgb(244,181,21)" fg:x="668" fg:w="4"/><text x="36.4168%" y="415.50"></text></g><g><title>rocksdb::MemTable::ShouldFlushNow() (2 samples, 0.11%)</title><rect x="36.2750%" y="389" width="0.1083%" height="15" fill="rgb(222,126,15)" fg:x="670" fg:w="2"/><text x="36.5250%" y="399.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (106 samples, 5.74%)</title><rect x="30.7526%" y="453" width="5.7390%" height="15" fill="rgb(222,95,17)" fg:x="568" fg:w="106"/><text x="31.0026%" y="463.50">rocksdb..</text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType, rocksdb::ProtectionInfoKVOS&lt;unsigned long&gt; const*) (103 samples, 5.58%)</title><rect x="30.9150%" y="437" width="5.5766%" height="15" fill="rgb(254,46,5)" fg:x="571" fg:w="103"/><text x="31.1650%" y="447.50">rocksdb..</text></g><g><title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ProtectionInfoKVOS&lt;unsigned long&gt; const*, bool, rocksdb::MemTablePostProcessInfo*, void**) (86 samples, 4.66%)</title><rect x="31.8354%" y="421" width="4.6562%" height="15" fill="rgb(236,216,35)" fg:x="588" fg:w="86"/><text x="32.0854%" y="431.50">rocks..</text></g><g><title>rocksdb::MemTable::UpdateOldestKeyTime() (2 samples, 0.11%)</title><rect x="36.3833%" y="405" width="0.1083%" height="15" fill="rgb(217,187,26)" fg:x="672" fg:w="2"/><text x="36.6333%" y="415.50"></text></g><g><title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (135 samples, 7.31%)</title><rect x="29.4532%" y="501" width="7.3091%" height="15" fill="rgb(207,192,25)" fg:x="544" fg:w="135"/><text x="29.7032%" y="511.50">rocksdb::W..</text></g><g><title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (125 samples, 6.77%)</title><rect x="29.9946%" y="485" width="6.7677%" height="15" fill="rgb(253,135,27)" fg:x="554" fg:w="125"/><text x="30.2446%" y="495.50">rocksdb::..</text></g><g><title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch*::Handler, unsigned long, unsigned long) (119 samples, 6.44%)</title><rect x="30.3194%" y="469" width="6.4429%" height="15" fill="rgb(211,122,29)" fg:x="560" fg:w="119"/><text x="30.5694%" y="479.50">rocksdb:..</text></g><g><title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (5 samples, 0.27%)</title><rect x="36.4916%" y="453" width="0.2707%" height="15" fill="rgb(233,162,40)" fg:x="674" fg:w="5"/><text x="36.7416%" y="463.50"></text></g><g><title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (3 samples, 0.16%)</title><rect x="36.7623%" y="501" width="0.1624%" height="15" fill="rgb(222,184,47)" fg:x="679" fg:w="3"/><text x="37.0123%" y="511.50"></text></g><g><title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status&amp;) (6 samples, 0.32%)</title><rect x="36.9247%" y="501" width="0.3249%" height="15" fill="rgb(249,99,23)" fg:x="682" fg:w="6"/><text x="37.1747%" y="511.50"></text></g><g><title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (3 samples, 0.16%)</title><rect x="37.2496%" y="501" width="0.1624%" height="15" fill="rgb(214,60,12)" fg:x="688" fg:w="3"/><text x="37.4996%" y="511.50"></text></g><g><title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.05%)</title><rect x="37.3579%" y="485" width="0.0541%" height="15" fill="rgb(250,229,36)" fg:x="690" fg:w="1"/><text x="37.6079%" y="495.50"></text></g><g><title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (267 samples, 14.46%)</title><rect x="23.0103%" y="533" width="14.4559%" height="15" fill="rgb(232,195,10)" fg:x="425" fg:w="267"/><text x="23.2603%" y="543.50">rocksdb::DBImpl::Write..</text></g><g><title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*, rocksdb::PostMemTableCallback*) (266 samples, 14.40%)</title><rect x="23.0644%" y="517" width="14.4017%" height="15" fill="rgb(205,213,31)" fg:x="426" fg:w="266"/><text x="23.3144%" y="527.50">rocksdb::DBImpl::Write..</text></g><g><title>rocksdb::WriteThread::Writer::FinalStatus() (1 samples, 0.05%)</title><rect x="37.4120%" y="501" width="0.0541%" height="15" fill="rgb(237,43,8)" fg:x="691" fg:w="1"/><text x="37.6620%" y="511.50"></text></g><g><title>rocksdb::WriteBatchInternal::GetColumnFamilyIdAndTimestampSize(rocksdb::WriteBatch*, rocksdb::ColumnFamilyHandle*) (6 samples, 0.32%)</title><rect x="37.7369%" y="517" width="0.3249%" height="15" fill="rgb(216,208,3)" fg:x="697" fg:w="6"/><text x="37.9869%" y="527.50"></text></g><g><title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.11%)</title><rect x="37.9534%" y="501" width="0.1083%" height="15" fill="rgb(228,179,44)" fg:x="701" fg:w="2"/><text x="38.2034%" y="511.50"></text></g><g><title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.05%)</title><rect x="38.7656%" y="501" width="0.0541%" height="15" fill="rgb(230,192,27)" fg:x="716" fg:w="1"/><text x="39.0156%" y="511.50"></text></g><g><title>rocksdb::LocalSavePoint::commit() (2 samples, 0.11%)</title><rect x="38.8197%" y="501" width="0.1083%" height="15" fill="rgb(251,30,38)" fg:x="717" fg:w="2"/><text x="39.0697%" y="511.50"></text></g><g><title>rocksdb::SharedCleanablePtr::Impl::UnrefWrapper(void*, void*) (1 samples, 0.05%)</title><rect x="38.9280%" y="501" width="0.0541%" height="15" fill="rgb(246,55,52)" fg:x="719" fg:w="1"/><text x="39.1780%" y="511.50"></text></g><g><title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (32 samples, 1.73%)</title><rect x="37.4662%" y="533" width="1.7325%" height="15" fill="rgb(249,79,26)" fg:x="692" fg:w="32"/><text x="37.7162%" y="543.50"></text></g><g><title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (21 samples, 1.14%)</title><rect x="38.0617%" y="517" width="1.1370%" height="15" fill="rgb(220,202,16)" fg:x="703" fg:w="21"/><text x="38.3117%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (4 samples, 0.22%)</title><rect x="38.9821%" y="501" width="0.2166%" height="15" fill="rgb(250,170,23)" fg:x="720" fg:w="4"/><text x="39.2321%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) (2 samples, 0.11%)</title><rect x="39.5777%" y="517" width="0.1083%" height="15" fill="rgb(230,7,37)" fg:x="731" fg:w="2"/><text x="39.8277%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::pop_back() (3 samples, 0.16%)</title><rect x="39.6860%" y="517" width="0.1624%" height="15" fill="rgb(213,71,1)" fg:x="733" fg:w="3"/><text x="39.9360%" y="527.50"></text></g><g><title>operator new(unsigned long) (4 samples, 0.22%)</title><rect x="40.4440%" y="501" width="0.2166%" height="15" fill="rgb(227,87,39)" fg:x="747" fg:w="4"/><text x="40.6940%" y="511.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="40.6064%" y="485" width="0.0541%" height="15" fill="rgb(210,41,29)" fg:x="750" fg:w="1"/><text x="40.8564%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="40.6064%" y="469" width="0.0541%" height="15" fill="rgb(206,191,31)" fg:x="750" fg:w="1"/><text x="40.8564%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="40.6064%" y="453" width="0.0541%" height="15" fill="rgb(247,75,54)" fg:x="750" fg:w="1"/><text x="40.8564%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="40.6064%" y="437" width="0.0541%" height="15" fill="rgb(208,54,50)" fg:x="750" fg:w="1"/><text x="40.8564%" y="447.50"></text></g><g><title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long, unsigned long, unsigned long) (30 samples, 1.62%)</title><rect x="39.1987%" y="533" width="1.6243%" height="15" fill="rgb(214,90,37)" fg:x="724" fg:w="30"/><text x="39.4487%" y="543.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve(unsigned long) (18 samples, 0.97%)</title><rect x="39.8484%" y="517" width="0.9746%" height="15" fill="rgb(220,132,6)" fg:x="736" fg:w="18"/><text x="40.0984%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create(unsigned long&amp;, unsigned long) (3 samples, 0.16%)</title><rect x="40.6605%" y="501" width="0.1624%" height="15" fill="rgb(213,167,7)" fg:x="751" fg:w="3"/><text x="40.9105%" y="511.50"></text></g><g><title>_rjem_je_free_default (1 samples, 0.05%)</title><rect x="40.9312%" y="517" width="0.0541%" height="15" fill="rgb(243,36,27)" fg:x="756" fg:w="1"/><text x="41.1812%" y="527.50"></text></g><g><title>free (4 samples, 0.22%)</title><rect x="40.9854%" y="517" width="0.2166%" height="15" fill="rgb(235,147,12)" fg:x="757" fg:w="4"/><text x="41.2354%" y="527.50"></text></g><g><title>free_fastpath (4 samples, 0.22%)</title><rect x="40.9854%" y="501" width="0.2166%" height="15" fill="rgb(212,198,44)" fg:x="757" fg:w="4"/><text x="41.2354%" y="511.50"></text></g><g><title>emap_alloc_ctx_try_lookup_fast (4 samples, 0.22%)</title><rect x="40.9854%" y="485" width="0.2166%" height="15" fill="rgb(218,68,50)" fg:x="757" fg:w="4"/><text x="41.2354%" y="495.50"></text></g><g><title>rtree_metadata_try_read_fast (4 samples, 0.22%)</title><rect x="40.9854%" y="469" width="0.2166%" height="15" fill="rgb(224,79,48)" fg:x="757" fg:w="4"/><text x="41.2354%" y="479.50"></text></g><g><title>rtree_leaf_elm_lookup_fast (4 samples, 0.22%)</title><rect x="40.9854%" y="453" width="0.2166%" height="15" fill="rgb(213,191,50)" fg:x="757" fg:w="4"/><text x="41.2354%" y="463.50"></text></g><g><title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (344 samples, 18.62%)</title><rect x="22.6313%" y="549" width="18.6248%" height="15" fill="rgb(254,146,10)" fg:x="418" fg:w="344"/><text x="22.8813%" y="559.50">rocksdb::DB::Put(rocksdb::Wri..</text></g><g><title>rocksdb::WriteBatch::~WriteBatch() (8 samples, 0.43%)</title><rect x="40.8230%" y="533" width="0.4331%" height="15" fill="rgb(215,175,11)" fg:x="754" fg:w="8"/><text x="41.0730%" y="543.50"></text></g><g><title>operator delete(void*) (1 samples, 0.05%)</title><rect x="41.2019%" y="517" width="0.0541%" height="15" fill="rgb(207,49,7)" fg:x="761" fg:w="1"/><text x="41.4519%" y="527.50"></text></g><g><title>IndexDriver (449 samples, 24.31%)</title><rect x="17.3795%" y="677" width="24.3097%" height="15" fill="rgb(234,144,29)" fg:x="321" fg:w="449"/><text x="17.6295%" y="687.50">IndexDriver</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (449 samples, 24.31%)</title><rect x="17.3795%" y="661" width="24.3097%" height="15" fill="rgb(213,222,48)" fg:x="321" fg:w="449"/><text x="17.6295%" y="671.50">std::sys::unix::thread::Thread::new::th..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (449 samples, 24.31%)</title><rect x="17.3795%" y="645" width="24.3097%" height="15" fill="rgb(222,8,6)" fg:x="321" fg:w="449"/><text x="17.6295%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (449 samples, 24.31%)</title><rect x="17.3795%" y="629" width="24.3097%" height="15" fill="rgb(221,114,49)" fg:x="321" fg:w="449"/><text x="17.6295%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::f..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (449 samples, 24.31%)</title><rect x="17.3795%" y="613" width="24.3097%" height="15" fill="rgb(250,140,42)" fg:x="321" fg:w="449"/><text x="17.6295%" y="623.50">core::ops::function::FnOnce::call_once{..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (449 samples, 24.31%)</title><rect x="17.3795%" y="597" width="24.3097%" height="15" fill="rgb(250,150,27)" fg:x="321" fg:w="449"/><text x="17.6295%" y="607.50">std::sys_common::backtrace::__rust_begi..</text></g><g><title>rocksdb_put_cf (371 samples, 20.09%)</title><rect x="21.6026%" y="581" width="20.0866%" height="15" fill="rgb(252,159,3)" fg:x="399" fg:w="371"/><text x="21.8526%" y="591.50">rocksdb_put_cf</text></g><g><title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (362 samples, 19.60%)</title><rect x="22.0899%" y="565" width="19.5994%" height="15" fill="rgb(241,182,3)" fg:x="408" fg:w="362"/><text x="22.3399%" y="575.50">rocksdb::DBImpl::Put(rocksdb::W..</text></g><g><title>rocksdb::DBImpl::FailIfCfHasTs(rocksdb::ColumnFamilyHandle const*) const (8 samples, 0.43%)</title><rect x="41.2561%" y="549" width="0.4331%" height="15" fill="rgb(236,3,9)" fg:x="762" fg:w="8"/><text x="41.5061%" y="559.50"></text></g><g><title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (5 samples, 0.27%)</title><rect x="41.4185%" y="533" width="0.2707%" height="15" fill="rgb(223,227,51)" fg:x="765" fg:w="5"/><text x="41.6685%" y="543.50"></text></g><g><title>rocksdb::ColumnFamilyHandleImpl::cfd() const (2 samples, 0.11%)</title><rect x="41.5809%" y="517" width="0.1083%" height="15" fill="rgb(232,133,30)" fg:x="768" fg:w="2"/><text x="41.8309%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::handle::Handle&gt; (1 samples, 0.05%)</title><rect x="42.5555%" y="565" width="0.0541%" height="15" fill="rgb(209,93,27)" fg:x="786" fg:w="1"/><text x="42.8055%" y="575.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.05%)</title><rect x="42.7721%" y="549" width="0.0541%" height="15" fill="rgb(208,108,34)" fg:x="790" fg:w="1"/><text x="43.0221%" y="559.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.05%)</title><rect x="42.7721%" y="533" width="0.0541%" height="15" fill="rgb(215,189,13)" fg:x="790" fg:w="1"/><text x="43.0221%" y="543.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (7 samples, 0.38%)</title><rect x="42.6096%" y="565" width="0.3790%" height="15" fill="rgb(206,88,23)" fg:x="787" fg:w="7"/><text x="42.8596%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.16%)</title><rect x="42.8262%" y="549" width="0.1624%" height="15" fill="rgb(240,173,0)" fg:x="791" fg:w="3"/><text x="43.0762%" y="559.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (3 samples, 0.16%)</title><rect x="43.0969%" y="549" width="0.1624%" height="15" fill="rgb(223,106,52)" fg:x="796" fg:w="3"/><text x="43.3469%" y="559.50"></text></g><g><title>tokio::runtime::io::Driver::turn (3 samples, 0.16%)</title><rect x="43.2593%" y="549" width="0.1624%" height="15" fill="rgb(206,130,16)" fg:x="799" fg:w="3"/><text x="43.5093%" y="559.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (9 samples, 0.49%)</title><rect x="42.9886%" y="565" width="0.4873%" height="15" fill="rgb(220,54,25)" fg:x="794" fg:w="9"/><text x="43.2386%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.05%)</title><rect x="43.4218%" y="549" width="0.0541%" height="15" fill="rgb(210,4,38)" fg:x="802" fg:w="1"/><text x="43.6718%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (31 samples, 1.68%)</title><rect x="42.1224%" y="581" width="1.6784%" height="15" fill="rgb(238,94,39)" fg:x="778" fg:w="31"/><text x="42.3724%" y="591.50"></text></g><g><title>tokio_uring::runtime::Runtime::new::{{closure}} (6 samples, 0.32%)</title><rect x="43.4759%" y="565" width="0.3249%" height="15" fill="rgb(234,124,34)" fg:x="803" fg:w="6"/><text x="43.7259%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (1 samples, 0.05%)</title><rect x="43.8008%" y="581" width="0.0541%" height="15" fill="rgb(221,91,40)" fg:x="809" fg:w="1"/><text x="44.0508%" y="591.50"></text></g><g><title>tokio::runtime::coop::poll_proceed.1391 (2 samples, 0.11%)</title><rect x="44.7753%" y="549" width="0.1083%" height="15" fill="rgb(246,53,28)" fg:x="827" fg:w="2"/><text x="45.0253%" y="559.50"></text></g><g><title>object_storage::object_storage::AsyncObjectStorage::new::{{closure}}::{{closure}} (19 samples, 1.03%)</title><rect x="44.1256%" y="565" width="1.0287%" height="15" fill="rgb(229,109,7)" fg:x="815" fg:w="19"/><text x="44.3756%" y="575.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (5 samples, 0.27%)</title><rect x="44.8836%" y="549" width="0.2707%" height="15" fill="rgb(249,117,8)" fg:x="829" fg:w="5"/><text x="45.1336%" y="559.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.05%)</title><rect x="45.2626%" y="533" width="0.0541%" height="15" fill="rgb(210,181,1)" fg:x="836" fg:w="1"/><text x="45.5126%" y="543.50"></text></g><g><title>ObjectStorage (70 samples, 3.79%)</title><rect x="41.6892%" y="677" width="3.7899%" height="15" fill="rgb(211,66,1)" fg:x="770" fg:w="70"/><text x="41.9392%" y="687.50">Obje..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (70 samples, 3.79%)</title><rect x="41.6892%" y="661" width="3.7899%" height="15" fill="rgb(221,90,14)" fg:x="770" fg:w="70"/><text x="41.9392%" y="671.50">std:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (70 samples, 3.79%)</title><rect x="41.6892%" y="645" width="3.7899%" height="15" fill="rgb(219,222,44)" fg:x="770" fg:w="70"/><text x="41.9392%" y="655.50">&lt;all..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (70 samples, 3.79%)</title><rect x="41.6892%" y="629" width="3.7899%" height="15" fill="rgb(246,34,33)" fg:x="770" fg:w="70"/><text x="41.9392%" y="639.50">&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (70 samples, 3.79%)</title><rect x="41.6892%" y="613" width="3.7899%" height="15" fill="rgb(227,135,41)" fg:x="770" fg:w="70"/><text x="41.9392%" y="623.50">core..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (70 samples, 3.79%)</title><rect x="41.6892%" y="597" width="3.7899%" height="15" fill="rgb(226,15,14)" fg:x="770" fg:w="70"/><text x="41.9392%" y="607.50">std:..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (30 samples, 1.62%)</title><rect x="43.8549%" y="581" width="1.6243%" height="15" fill="rgb(236,148,47)" fg:x="810" fg:w="30"/><text x="44.1049%" y="591.50"></text></g><g><title>tokio::task::local::LocalSet::tick (6 samples, 0.32%)</title><rect x="45.1543%" y="565" width="0.3249%" height="15" fill="rgb(233,162,52)" fg:x="834" fg:w="6"/><text x="45.4043%" y="575.50"></text></g><g><title>tokio::runtime::task::raw::poll (4 samples, 0.22%)</title><rect x="45.2626%" y="549" width="0.2166%" height="15" fill="rgb(244,35,28)" fg:x="836" fg:w="4"/><text x="45.5126%" y="559.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv::{{closure}} (3 samples, 0.16%)</title><rect x="45.3167%" y="533" width="0.1624%" height="15" fill="rgb(205,121,10)" fg:x="837" fg:w="3"/><text x="45.5667%" y="543.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (2 samples, 0.11%)</title><rect x="45.3709%" y="517" width="0.1083%" height="15" fill="rgb(250,58,18)" fg:x="838" fg:w="2"/><text x="45.6209%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (3 samples, 0.16%)</title><rect x="47.4824%" y="549" width="0.1624%" height="15" fill="rgb(216,37,13)" fg:x="877" fg:w="3"/><text x="47.7324%" y="559.50"></text></g><g><title>tokio::task::local::Shared::schedule (3 samples, 0.16%)</title><rect x="47.4824%" y="533" width="0.1624%" height="15" fill="rgb(221,215,42)" fg:x="877" fg:w="3"/><text x="47.7324%" y="543.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (19 samples, 1.03%)</title><rect x="46.8868%" y="565" width="1.0287%" height="15" fill="rgb(217,214,19)" fg:x="866" fg:w="19"/><text x="47.1368%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (5 samples, 0.27%)</title><rect x="47.6448%" y="549" width="0.2707%" height="15" fill="rgb(233,139,13)" fg:x="880" fg:w="5"/><text x="47.8948%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (3 samples, 0.16%)</title><rect x="48.8360%" y="549" width="0.1624%" height="15" fill="rgb(247,168,23)" fg:x="902" fg:w="3"/><text x="49.0860%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (6 samples, 0.32%)</title><rect x="48.9984%" y="549" width="0.3249%" height="15" fill="rgb(207,202,1)" fg:x="905" fg:w="6"/><text x="49.2484%" y="559.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (5 samples, 0.27%)</title><rect x="49.3232%" y="549" width="0.2707%" height="15" fill="rgb(220,155,48)" fg:x="911" fg:w="5"/><text x="49.5732%" y="559.50"></text></g><g><title>std::sys::unix::decode_error_kind (4 samples, 0.22%)</title><rect x="50.5143%" y="533" width="0.2166%" height="15" fill="rgb(250,43,26)" fg:x="933" fg:w="4"/><text x="50.7643%" y="543.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.11%)</title><rect x="51.2182%" y="501" width="0.1083%" height="15" fill="rgb(212,190,23)" fg:x="946" fg:w="2"/><text x="51.4682%" y="511.50"></text></g><g><title>tokio::runtime::io::Driver::turn (48 samples, 2.60%)</title><rect x="49.5939%" y="549" width="2.5988%" height="15" fill="rgb(216,39,24)" fg:x="916" fg:w="48"/><text x="49.8439%" y="559.50">to..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (27 samples, 1.46%)</title><rect x="50.7309%" y="533" width="1.4618%" height="15" fill="rgb(252,113,16)" fg:x="937" fg:w="27"/><text x="50.9809%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (21 samples, 1.14%)</title><rect x="51.0558%" y="517" width="1.1370%" height="15" fill="rgb(208,113,19)" fg:x="943" fg:w="21"/><text x="51.3058%" y="527.50"></text></g><g><title>tokio::task::local::Shared::schedule (16 samples, 0.87%)</title><rect x="51.3265%" y="501" width="0.8663%" height="15" fill="rgb(234,107,25)" fg:x="948" fg:w="16"/><text x="51.5765%" y="511.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (5 samples, 0.27%)</title><rect x="51.9220%" y="485" width="0.2707%" height="15" fill="rgb(234,217,51)" fg:x="959" fg:w="5"/><text x="52.1720%" y="495.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (2 samples, 0.11%)</title><rect x="52.0845%" y="469" width="0.1083%" height="15" fill="rgb(251,29,42)" fg:x="962" fg:w="2"/><text x="52.3345%" y="479.50"></text></g><g><title>tokio::runtime::signal::Driver::process (3 samples, 0.16%)</title><rect x="52.1927%" y="549" width="0.1624%" height="15" fill="rgb(221,62,51)" fg:x="964" fg:w="3"/><text x="52.4427%" y="559.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (84 samples, 4.55%)</title><rect x="47.9155%" y="565" width="4.5479%" height="15" fill="rgb(240,192,43)" fg:x="885" fg:w="84"/><text x="48.1655%" y="575.50">tokio..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.11%)</title><rect x="52.3552%" y="549" width="0.1083%" height="15" fill="rgb(224,157,47)" fg:x="967" fg:w="2"/><text x="52.6052%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (142 samples, 7.69%)</title><rect x="46.0747%" y="581" width="7.6881%" height="15" fill="rgb(226,84,45)" fg:x="851" fg:w="142"/><text x="46.3247%" y="591.50">tokio::runt..</text></g><g><title>tokio_uring::runtime::Runtime::new::{{closure}} (24 samples, 1.30%)</title><rect x="52.4635%" y="565" width="1.2994%" height="15" fill="rgb(208,207,23)" fg:x="969" fg:w="24"/><text x="52.7135%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (2 samples, 0.11%)</title><rect x="53.7629%" y="581" width="0.1083%" height="15" fill="rgb(253,34,51)" fg:x="993" fg:w="2"/><text x="54.0129%" y="591.50"></text></g><g><title>client::session_manager::SessionManager::get_composite_session::{{closure}} (1 samples, 0.05%)</title><rect x="55.1164%" y="549" width="0.0541%" height="15" fill="rgb(227,26,34)" fg:x="1018" fg:w="1"/><text x="55.3664%" y="559.50"></text></g><g><title>client::composite_session::CompositeSession::refresh_placement_driver_cluster::{{closure}} (1 samples, 0.05%)</title><rect x="55.1164%" y="533" width="0.0541%" height="15" fill="rgb(245,75,19)" fg:x="1018" fg:w="1"/><text x="55.3664%" y="543.50"></text></g><g><title>client::session::Session::write::{{closure}} (1 samples, 0.05%)</title><rect x="55.1164%" y="517" width="0.0541%" height="15" fill="rgb(250,191,31)" fg:x="1018" fg:w="1"/><text x="55.3664%" y="527.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv::{{closure}} (10 samples, 0.54%)</title><rect x="55.1705%" y="549" width="0.5414%" height="15" fill="rgb(224,11,50)" fg:x="1019" fg:w="10"/><text x="55.4205%" y="559.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (8 samples, 0.43%)</title><rect x="55.2788%" y="533" width="0.4331%" height="15" fill="rgb(231,171,7)" fg:x="1021" fg:w="8"/><text x="55.5288%" y="543.50"></text></g><g><title>range_server::worker::Worker&lt;S,M&gt;::serve::{{closure}} (38 samples, 2.06%)</title><rect x="54.4126%" y="565" width="2.0574%" height="15" fill="rgb(252,214,10)" fg:x="1005" fg:w="38"/><text x="54.6626%" y="575.50">r..</text></g><g><title>tokio_uring::net::tcp::listener::TcpListener::accept::{{closure}} (14 samples, 0.76%)</title><rect x="55.7120%" y="549" width="0.7580%" height="15" fill="rgb(249,45,46)" fg:x="1029" fg:w="14"/><text x="55.9620%" y="559.50"></text></g><g><title>&lt;observation::metrics::store_metrics::STORE_FAILED_APPEND_COUNT as core::ops::deref::Deref&gt;::deref (3 samples, 0.16%)</title><rect x="61.5593%" y="533" width="0.1624%" height="15" fill="rgb(240,173,7)" fg:x="1137" fg:w="3"/><text x="61.8093%" y="543.50"></text></g><g><title>&lt;range_server::metrics::APPEND_LATENCY as core::ops::deref::Deref&gt;::deref (3 samples, 0.16%)</title><rect x="61.7217%" y="533" width="0.1624%" height="15" fill="rgb(235,214,13)" fg:x="1140" fg:w="3"/><text x="61.9717%" y="543.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="61.8841%" y="533" width="0.0541%" height="15" fill="rgb(245,156,8)" fg:x="1143" fg:w="1"/><text x="62.1341%" y="543.50"></text></g><g><title>&lt;std::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="62.3173%" y="501" width="0.0541%" height="15" fill="rgb(235,46,12)" fg:x="1151" fg:w="1"/><text x="62.5673%" y="511.50"></text></g><g><title>&lt;std::sys::unix::fs::ReadDir as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="62.3173%" y="485" width="0.0541%" height="15" fill="rgb(221,81,14)" fg:x="1151" fg:w="1"/><text x="62.5673%" y="495.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (2 samples, 0.11%)</title><rect x="62.3714%" y="501" width="0.1083%" height="15" fill="rgb(238,207,9)" fg:x="1152" fg:w="2"/><text x="62.6214%" y="511.50"></text></g><g><title>std::path::Components::parse_next_component_back (1 samples, 0.05%)</title><rect x="62.4256%" y="485" width="0.0541%" height="15" fill="rgb(224,129,35)" fg:x="1153" fg:w="1"/><text x="62.6756%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1 samples, 0.05%)</title><rect x="62.4256%" y="469" width="0.0541%" height="15" fill="rgb(243,218,34)" fg:x="1153" fg:w="1"/><text x="62.6756%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.16%)</title><rect x="62.4797%" y="501" width="0.1624%" height="15" fill="rgb(220,166,13)" fg:x="1154" fg:w="3"/><text x="62.7297%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.16%)</title><rect x="62.4797%" y="485" width="0.1624%" height="15" fill="rgb(227,167,49)" fg:x="1154" fg:w="3"/><text x="62.7297%" y="495.50"></text></g><g><title>do_rallocx (2 samples, 0.11%)</title><rect x="62.5338%" y="469" width="0.1083%" height="15" fill="rgb(234,142,12)" fg:x="1155" fg:w="2"/><text x="62.7838%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.11%)</title><rect x="62.8587%" y="485" width="0.1083%" height="15" fill="rgb(207,100,48)" fg:x="1161" fg:w="2"/><text x="63.1087%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="62.9128%" y="469" width="0.0541%" height="15" fill="rgb(210,25,14)" fg:x="1162" fg:w="1"/><text x="63.1628%" y="479.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="62.9128%" y="453" width="0.0541%" height="15" fill="rgb(246,116,27)" fg:x="1162" fg:w="1"/><text x="63.1628%" y="463.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="62.9128%" y="437" width="0.0541%" height="15" fill="rgb(214,193,42)" fg:x="1162" fg:w="1"/><text x="63.1628%" y="447.50"></text></g><g><title>core::str::pattern::StrSearcher::new (9 samples, 0.49%)</title><rect x="62.9670%" y="485" width="0.4873%" height="15" fill="rgb(214,122,8)" fg:x="1163" fg:w="9"/><text x="63.2170%" y="495.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (9 samples, 0.49%)</title><rect x="62.9670%" y="469" width="0.4873%" height="15" fill="rgb(244,173,18)" fg:x="1163" fg:w="9"/><text x="63.2170%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (9 samples, 0.49%)</title><rect x="62.9670%" y="453" width="0.4873%" height="15" fill="rgb(232,68,19)" fg:x="1163" fg:w="9"/><text x="63.2170%" y="463.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::replace (16 samples, 0.87%)</title><rect x="62.6421%" y="501" width="0.8663%" height="15" fill="rgb(236,224,1)" fg:x="1157" fg:w="16"/><text x="62.8921%" y="511.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (1 samples, 0.05%)</title><rect x="63.4543%" y="485" width="0.0541%" height="15" fill="rgb(240,11,8)" fg:x="1172" fg:w="1"/><text x="63.7043%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5 samples, 0.27%)</title><rect x="63.5084%" y="501" width="0.2707%" height="15" fill="rgb(244,159,20)" fg:x="1173" fg:w="5"/><text x="63.7584%" y="511.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_start_matches (2 samples, 0.11%)</title><rect x="63.7791%" y="501" width="0.1083%" height="15" fill="rgb(240,223,54)" fg:x="1178" fg:w="2"/><text x="64.0291%" y="511.50"></text></g><g><title>sdallocx (1 samples, 0.05%)</title><rect x="63.8874%" y="501" width="0.0541%" height="15" fill="rgb(237,146,5)" fg:x="1180" fg:w="1"/><text x="64.1374%" y="511.50"></text></g><g><title>std::path::Path::_join (1 samples, 0.05%)</title><rect x="63.9415%" y="501" width="0.0541%" height="15" fill="rgb(218,221,32)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="511.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 0.05%)</title><rect x="63.9415%" y="485" width="0.0541%" height="15" fill="rgb(244,96,26)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="495.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.05%)</title><rect x="63.9415%" y="469" width="0.0541%" height="15" fill="rgb(245,184,37)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="479.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.05%)</title><rect x="63.9415%" y="453" width="0.0541%" height="15" fill="rgb(248,91,47)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="463.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.05%)</title><rect x="63.9415%" y="437" width="0.0541%" height="15" fill="rgb(243,199,8)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.05%)</title><rect x="63.9415%" y="421" width="0.0541%" height="15" fill="rgb(249,12,15)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.05%)</title><rect x="63.9415%" y="405" width="0.0541%" height="15" fill="rgb(245,97,12)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.05%)</title><rect x="63.9415%" y="389" width="0.0541%" height="15" fill="rgb(244,61,1)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="63.9415%" y="373" width="0.0541%" height="15" fill="rgb(222,194,10)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.05%)</title><rect x="63.9415%" y="357" width="0.0541%" height="15" fill="rgb(226,178,8)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="63.9415%" y="341" width="0.0541%" height="15" fill="rgb(241,32,34)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.05%)</title><rect x="63.9415%" y="325" width="0.0541%" height="15" fill="rgb(254,26,6)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="335.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="63.9415%" y="309" width="0.0541%" height="15" fill="rgb(249,71,11)" fg:x="1181" fg:w="1"/><text x="64.1915%" y="319.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.05%)</title><rect x="63.9957%" y="485" width="0.0541%" height="15" fill="rgb(232,170,27)" fg:x="1182" fg:w="1"/><text x="64.2457%" y="495.50"></text></g><g><title>isfree (1 samples, 0.05%)</title><rect x="63.9957%" y="469" width="0.0541%" height="15" fill="rgb(214,223,17)" fg:x="1182" fg:w="1"/><text x="64.2457%" y="479.50"></text></g><g><title>thread_dalloc_event (1 samples, 0.05%)</title><rect x="63.9957%" y="453" width="0.0541%" height="15" fill="rgb(250,18,15)" fg:x="1182" fg:w="1"/><text x="64.2457%" y="463.50"></text></g><g><title>te_event_advance (1 samples, 0.05%)</title><rect x="63.9957%" y="437" width="0.0541%" height="15" fill="rgb(212,153,51)" fg:x="1182" fg:w="1"/><text x="64.2457%" y="447.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.05%)</title><rect x="63.9957%" y="421" width="0.0541%" height="15" fill="rgb(219,194,12)" fg:x="1182" fg:w="1"/><text x="64.2457%" y="431.50"></text></g><g><title>core::num::from_str_radix (1 samples, 0.05%)</title><rect x="64.0498%" y="485" width="0.0541%" height="15" fill="rgb(212,58,17)" fg:x="1183" fg:w="1"/><text x="64.2998%" y="495.50"></text></g><g><title>core::str::&lt;impl str&gt;::trim_matches (1 samples, 0.05%)</title><rect x="64.1040%" y="485" width="0.0541%" height="15" fill="rgb(254,5,10)" fg:x="1184" fg:w="1"/><text x="64.3540%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.05%)</title><rect x="64.1581%" y="485" width="0.0541%" height="15" fill="rgb(246,91,7)" fg:x="1185" fg:w="1"/><text x="64.4081%" y="495.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.05%)</title><rect x="64.1581%" y="469" width="0.0541%" height="15" fill="rgb(218,108,49)" fg:x="1185" fg:w="1"/><text x="64.4081%" y="479.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.05%)</title><rect x="64.2122%" y="485" width="0.0541%" height="15" fill="rgb(238,123,20)" fg:x="1186" fg:w="1"/><text x="64.4622%" y="495.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.05%)</title><rect x="64.2122%" y="469" width="0.0541%" height="15" fill="rgb(231,69,23)" fg:x="1186" fg:w="1"/><text x="64.4622%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.05%)</title><rect x="64.2122%" y="453" width="0.0541%" height="15" fill="rgb(230,209,3)" fg:x="1186" fg:w="1"/><text x="64.4622%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="64.3205%" y="293" width="0.0541%" height="15" fill="rgb(231,19,0)" fg:x="1188" fg:w="1"/><text x="64.5705%" y="303.50"></text></g><g><title>do_rallocx (1 samples, 0.05%)</title><rect x="64.3205%" y="277" width="0.0541%" height="15" fill="rgb(226,192,25)" fg:x="1188" fg:w="1"/><text x="64.5705%" y="287.50"></text></g><g><title>iralloct (1 samples, 0.05%)</title><rect x="64.3205%" y="261" width="0.0541%" height="15" fill="rgb(223,175,53)" fg:x="1188" fg:w="1"/><text x="64.5705%" y="271.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.05%)</title><rect x="64.3205%" y="245" width="0.0541%" height="15" fill="rgb(248,35,51)" fg:x="1188" fg:w="1"/><text x="64.5705%" y="255.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.05%)</title><rect x="64.3205%" y="229" width="0.0541%" height="15" fill="rgb(230,37,26)" fg:x="1188" fg:w="1"/><text x="64.5705%" y="239.50"></text></g><g><title>sz_s2u (1 samples, 0.05%)</title><rect x="64.3205%" y="213" width="0.0541%" height="15" fill="rgb(206,120,22)" fg:x="1188" fg:w="1"/><text x="64.5705%" y="223.50"></text></g><g><title>sz_s2u_lookup (1 samples, 0.05%)</title><rect x="64.3205%" y="197" width="0.0541%" height="15" fill="rgb(207,165,28)" fg:x="1188" fg:w="1"/><text x="64.5705%" y="207.50"></text></g><g><title>sz_index2size_lookup (1 samples, 0.05%)</title><rect x="64.3205%" y="181" width="0.0541%" height="15" fill="rgb(226,23,46)" fg:x="1188" fg:w="1"/><text x="64.5705%" y="191.50"></text></g><g><title>sz_index2size_lookup_impl (1 samples, 0.05%)</title><rect x="64.3205%" y="165" width="0.0541%" height="15" fill="rgb(208,130,44)" fg:x="1188" fg:w="1"/><text x="64.5705%" y="175.50"></text></g><g><title>std::path::Path::_join (3 samples, 0.16%)</title><rect x="64.2664%" y="485" width="0.1624%" height="15" fill="rgb(231,67,8)" fg:x="1187" fg:w="3"/><text x="64.5164%" y="495.50"></text></g><g><title>std::path::PathBuf::push (2 samples, 0.11%)</title><rect x="64.3205%" y="469" width="0.1083%" height="15" fill="rgb(205,183,22)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="479.50"></text></g><g><title>std::path::PathBuf::_push (2 samples, 0.11%)</title><rect x="64.3205%" y="453" width="0.1083%" height="15" fill="rgb(224,47,9)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="463.50"></text></g><g><title>std::ffi::os_str::OsString::push (2 samples, 0.11%)</title><rect x="64.3205%" y="437" width="0.1083%" height="15" fill="rgb(250,183,49)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="447.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (2 samples, 0.11%)</title><rect x="64.3205%" y="421" width="0.1083%" height="15" fill="rgb(220,151,39)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.11%)</title><rect x="64.3205%" y="405" width="0.1083%" height="15" fill="rgb(220,118,20)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.11%)</title><rect x="64.3205%" y="389" width="0.1083%" height="15" fill="rgb(231,65,51)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.11%)</title><rect x="64.3205%" y="373" width="0.1083%" height="15" fill="rgb(253,125,37)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.11%)</title><rect x="64.3205%" y="357" width="0.1083%" height="15" fill="rgb(232,102,6)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.11%)</title><rect x="64.3205%" y="341" width="0.1083%" height="15" fill="rgb(251,105,13)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.11%)</title><rect x="64.3205%" y="325" width="0.1083%" height="15" fill="rgb(222,179,29)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.11%)</title><rect x="64.3205%" y="309" width="0.1083%" height="15" fill="rgb(229,180,53)" fg:x="1188" fg:w="2"/><text x="64.5705%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.05%)</title><rect x="64.3747%" y="293" width="0.0541%" height="15" fill="rgb(238,104,13)" fg:x="1189" fg:w="1"/><text x="64.6247%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.05%)</title><rect x="64.3747%" y="277" width="0.0541%" height="15" fill="rgb(210,130,5)" fg:x="1189" fg:w="1"/><text x="64.6247%" y="287.50"></text></g><g><title>std::io::error::Error::kind (1 samples, 0.05%)</title><rect x="64.4829%" y="437" width="0.0541%" height="15" fill="rgb(233,87,49)" fg:x="1191" fg:w="1"/><text x="64.7329%" y="447.50"></text></g><g><title>std::sys::unix::decode_error_kind (1 samples, 0.05%)</title><rect x="64.4829%" y="421" width="0.0541%" height="15" fill="rgb(243,34,9)" fg:x="1191" fg:w="1"/><text x="64.7329%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::open_c (2 samples, 0.11%)</title><rect x="64.4829%" y="469" width="0.1083%" height="15" fill="rgb(235,225,10)" fg:x="1191" fg:w="2"/><text x="64.7329%" y="479.50"></text></g><g><title>std::sys::unix::cvt_r (2 samples, 0.11%)</title><rect x="64.4829%" y="453" width="0.1083%" height="15" fill="rgb(212,0,30)" fg:x="1191" fg:w="2"/><text x="64.7329%" y="463.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.05%)</title><rect x="64.5371%" y="437" width="0.0541%" height="15" fill="rgb(211,177,0)" fg:x="1192" fg:w="1"/><text x="64.7871%" y="447.50"></text></g><g><title>_rjem_je_emap_update_edata_state (2 samples, 0.11%)</title><rect x="64.6454%" y="69" width="0.1083%" height="15" fill="rgb(225,220,11)" fg:x="1194" fg:w="2"/><text x="64.8954%" y="79.50"></text></g><g><title>rtree_leaf_elm_lookup (2 samples, 0.11%)</title><rect x="64.6454%" y="53" width="0.1083%" height="15" fill="rgb(215,10,13)" fg:x="1194" fg:w="2"/><text x="64.8954%" y="63.50"></text></g><g><title>rtree_cache_direct_map (2 samples, 0.11%)</title><rect x="64.6454%" y="37" width="0.1083%" height="15" fill="rgb(240,177,14)" fg:x="1194" fg:w="2"/><text x="64.8954%" y="47.50"></text></g><g><title>iralloct (4 samples, 0.22%)</title><rect x="64.5912%" y="325" width="0.2166%" height="15" fill="rgb(243,7,39)" fg:x="1193" fg:w="4"/><text x="64.8412%" y="335.50"></text></g><g><title>_rjem_je_arena_ralloc (4 samples, 0.22%)</title><rect x="64.5912%" y="309" width="0.2166%" height="15" fill="rgb(212,99,0)" fg:x="1193" fg:w="4"/><text x="64.8412%" y="319.50"></text></g><g><title>arena_ralloc_move_helper (3 samples, 0.16%)</title><rect x="64.6454%" y="293" width="0.1624%" height="15" fill="rgb(225,162,48)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="303.50"></text></g><g><title>arena_malloc (3 samples, 0.16%)</title><rect x="64.6454%" y="277" width="0.1624%" height="15" fill="rgb(246,16,25)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="287.50"></text></g><g><title>tcache_alloc_small (3 samples, 0.16%)</title><rect x="64.6454%" y="261" width="0.1624%" height="15" fill="rgb(220,150,2)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="271.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (3 samples, 0.16%)</title><rect x="64.6454%" y="245" width="0.1624%" height="15" fill="rgb(237,113,11)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="255.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (3 samples, 0.16%)</title><rect x="64.6454%" y="229" width="0.1624%" height="15" fill="rgb(236,70,20)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="239.50"></text></g><g><title>arena_slab_alloc (3 samples, 0.16%)</title><rect x="64.6454%" y="213" width="0.1624%" height="15" fill="rgb(234,94,7)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="223.50"></text></g><g><title>_rjem_je_pa_alloc (3 samples, 0.16%)</title><rect x="64.6454%" y="197" width="0.1624%" height="15" fill="rgb(250,221,0)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="207.50"></text></g><g><title>pai_alloc (3 samples, 0.16%)</title><rect x="64.6454%" y="181" width="0.1624%" height="15" fill="rgb(245,149,46)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="191.50"></text></g><g><title>pac_alloc_impl (3 samples, 0.16%)</title><rect x="64.6454%" y="165" width="0.1624%" height="15" fill="rgb(215,37,27)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="175.50"></text></g><g><title>pac_alloc_real (3 samples, 0.16%)</title><rect x="64.6454%" y="149" width="0.1624%" height="15" fill="rgb(232,65,3)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="159.50"></text></g><g><title>_rjem_je_ecache_alloc (3 samples, 0.16%)</title><rect x="64.6454%" y="133" width="0.1624%" height="15" fill="rgb(214,2,16)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="143.50"></text></g><g><title>extent_recycle (3 samples, 0.16%)</title><rect x="64.6454%" y="117" width="0.1624%" height="15" fill="rgb(227,131,50)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="127.50"></text></g><g><title>extent_recycle_extract (3 samples, 0.16%)</title><rect x="64.6454%" y="101" width="0.1624%" height="15" fill="rgb(247,131,45)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="111.50"></text></g><g><title>extent_activate_locked (3 samples, 0.16%)</title><rect x="64.6454%" y="85" width="0.1624%" height="15" fill="rgb(215,97,47)" fg:x="1194" fg:w="3"/><text x="64.8954%" y="95.50"></text></g><g><title>_rjem_je_eset_remove (1 samples, 0.05%)</title><rect x="64.7537%" y="69" width="0.0541%" height="15" fill="rgb(233,143,12)" fg:x="1196" fg:w="1"/><text x="65.0037%" y="79.50"></text></g><g><title>eset_stats_sub (1 samples, 0.05%)</title><rect x="64.7537%" y="53" width="0.0541%" height="15" fill="rgb(222,57,17)" fg:x="1196" fg:w="1"/><text x="65.0037%" y="63.50"></text></g><g><title>atomic_load_zu (1 samples, 0.05%)</title><rect x="64.7537%" y="37" width="0.0541%" height="15" fill="rgb(214,119,38)" fg:x="1196" fg:w="1"/><text x="65.0037%" y="47.50"></text></g><g><title>alloc::string::String::reserve (5 samples, 0.27%)</title><rect x="64.5912%" y="437" width="0.2707%" height="15" fill="rgb(217,28,47)" fg:x="1193" fg:w="5"/><text x="64.8412%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.27%)</title><rect x="64.5912%" y="421" width="0.2707%" height="15" fill="rgb(231,14,52)" fg:x="1193" fg:w="5"/><text x="64.8412%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.27%)</title><rect x="64.5912%" y="405" width="0.2707%" height="15" fill="rgb(220,158,18)" fg:x="1193" fg:w="5"/><text x="64.8412%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.27%)</title><rect x="64.5912%" y="389" width="0.2707%" height="15" fill="rgb(222,143,46)" fg:x="1193" fg:w="5"/><text x="64.8412%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.27%)</title><rect x="64.5912%" y="373" width="0.2707%" height="15" fill="rgb(227,165,5)" fg:x="1193" fg:w="5"/><text x="64.8412%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.27%)</title><rect x="64.5912%" y="357" width="0.2707%" height="15" fill="rgb(216,222,49)" fg:x="1193" fg:w="5"/><text x="64.8412%" y="367.50"></text></g><g><title>do_rallocx (5 samples, 0.27%)</title><rect x="64.5912%" y="341" width="0.2707%" height="15" fill="rgb(238,73,39)" fg:x="1193" fg:w="5"/><text x="64.8412%" y="351.50"></text></g><g><title>thread_alloc_event (1 samples, 0.05%)</title><rect x="64.8078%" y="325" width="0.0541%" height="15" fill="rgb(252,115,9)" fg:x="1197" fg:w="1"/><text x="65.0578%" y="335.50"></text></g><g><title>te_event_advance (1 samples, 0.05%)</title><rect x="64.8078%" y="309" width="0.0541%" height="15" fill="rgb(238,202,4)" fg:x="1197" fg:w="1"/><text x="65.0578%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 2.82%)</title><rect x="62.1007%" y="517" width="2.8154%" height="15" fill="rgb(252,153,44)" fg:x="1147" fg:w="52"/><text x="62.3507%" y="527.50">&lt;c..</text></g><g><title>sysinfo::linux::disk::find_type_for_device_name (17 samples, 0.92%)</title><rect x="63.9957%" y="501" width="0.9204%" height="15" fill="rgb(235,128,27)" fg:x="1182" fg:w="17"/><text x="64.2457%" y="511.50"></text></g><g><title>sysinfo::linux::utils::get_all_data (9 samples, 0.49%)</title><rect x="64.4288%" y="485" width="0.4873%" height="15" fill="rgb(221,121,47)" fg:x="1190" fg:w="9"/><text x="64.6788%" y="495.50"></text></g><g><title>sysinfo::linux::utils::get_all_data_from_file (6 samples, 0.32%)</title><rect x="64.5912%" y="469" width="0.3249%" height="15" fill="rgb(247,211,47)" fg:x="1193" fg:w="6"/><text x="64.8412%" y="479.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (6 samples, 0.32%)</title><rect x="64.5912%" y="453" width="0.3249%" height="15" fill="rgb(252,47,49)" fg:x="1193" fg:w="6"/><text x="64.8412%" y="463.50"></text></g><g><title>std::fs::buffer_capacity_required (1 samples, 0.05%)</title><rect x="64.8619%" y="437" width="0.0541%" height="15" fill="rgb(219,119,53)" fg:x="1198" fg:w="1"/><text x="65.1119%" y="447.50"></text></g><g><title>_rjem_je_arena_handle_deferred_work (1 samples, 0.05%)</title><rect x="64.9702%" y="357" width="0.0541%" height="15" fill="rgb(243,165,53)" fg:x="1200" fg:w="1"/><text x="65.2202%" y="367.50"></text></g><g><title>decay_immediately (1 samples, 0.05%)</title><rect x="64.9702%" y="341" width="0.0541%" height="15" fill="rgb(230,12,35)" fg:x="1200" fg:w="1"/><text x="65.2202%" y="351.50"></text></g><g><title>decay_ms_read (1 samples, 0.05%)</title><rect x="64.9702%" y="325" width="0.0541%" height="15" fill="rgb(239,57,49)" fg:x="1200" fg:w="1"/><text x="65.2202%" y="335.50"></text></g><g><title>atomic_load_zd (1 samples, 0.05%)</title><rect x="64.9702%" y="309" width="0.0541%" height="15" fill="rgb(231,154,7)" fg:x="1200" fg:w="1"/><text x="65.2202%" y="319.50"></text></g><g><title>_rjem_je_edata_cache_put (1 samples, 0.05%)</title><rect x="65.0244%" y="261" width="0.0541%" height="15" fill="rgb(248,81,34)" fg:x="1201" fg:w="1"/><text x="65.2744%" y="271.50"></text></g><g><title>_rjem_je_edata_avail_insert (1 samples, 0.05%)</title><rect x="65.0244%" y="245" width="0.0541%" height="15" fill="rgb(247,9,5)" fg:x="1201" fg:w="1"/><text x="65.2744%" y="255.50"></text></g><g><title>ph_insert (1 samples, 0.05%)</title><rect x="65.0244%" y="229" width="0.0541%" height="15" fill="rgb(228,172,27)" fg:x="1201" fg:w="1"/><text x="65.2744%" y="239.50"></text></g><g><title>ph_try_aux_merge_pair (1 samples, 0.05%)</title><rect x="65.0244%" y="213" width="0.0541%" height="15" fill="rgb(230,57,44)" fg:x="1201" fg:w="1"/><text x="65.2744%" y="223.50"></text></g><g><title>phn_merge (1 samples, 0.05%)</title><rect x="65.0244%" y="197" width="0.0541%" height="15" fill="rgb(249,35,22)" fg:x="1201" fg:w="1"/><text x="65.2744%" y="207.50"></text></g><g><title>large_dalloc_finish_impl (3 samples, 0.16%)</title><rect x="64.9702%" y="373" width="0.1624%" height="15" fill="rgb(250,137,27)" fg:x="1200" fg:w="3"/><text x="65.2202%" y="383.50"></text></g><g><title>pac_dalloc_impl (2 samples, 0.11%)</title><rect x="65.0244%" y="357" width="0.1083%" height="15" fill="rgb(251,57,31)" fg:x="1201" fg:w="2"/><text x="65.2744%" y="367.50"></text></g><g><title>_rjem_je_extent_record (2 samples, 0.11%)</title><rect x="65.0244%" y="341" width="0.1083%" height="15" fill="rgb(238,60,0)" fg:x="1201" fg:w="2"/><text x="65.2744%" y="351.50"></text></g><g><title>extent_try_coalesce_large (2 samples, 0.11%)</title><rect x="65.0244%" y="325" width="0.1083%" height="15" fill="rgb(242,185,39)" fg:x="1201" fg:w="2"/><text x="65.2744%" y="335.50"></text></g><g><title>extent_try_coalesce_impl (2 samples, 0.11%)</title><rect x="65.0244%" y="309" width="0.1083%" height="15" fill="rgb(240,63,43)" fg:x="1201" fg:w="2"/><text x="65.2744%" y="319.50"></text></g><g><title>extent_coalesce (2 samples, 0.11%)</title><rect x="65.0244%" y="293" width="0.1083%" height="15" fill="rgb(236,155,6)" fg:x="1201" fg:w="2"/><text x="65.2744%" y="303.50"></text></g><g><title>extent_merge_impl (2 samples, 0.11%)</title><rect x="65.0244%" y="277" width="0.1083%" height="15" fill="rgb(215,11,29)" fg:x="1201" fg:w="2"/><text x="65.2744%" y="287.50"></text></g><g><title>ehooks_merge (1 samples, 0.05%)</title><rect x="65.0785%" y="261" width="0.0541%" height="15" fill="rgb(228,180,48)" fg:x="1202" fg:w="1"/><text x="65.3285%" y="271.50"></text></g><g><title>_rjem_je_ehooks_default_merge_impl (1 samples, 0.05%)</title><rect x="65.0785%" y="245" width="0.0541%" height="15" fill="rgb(241,102,12)" fg:x="1202" fg:w="1"/><text x="65.3285%" y="255.50"></text></g><g><title>_rjem_je_extent_dss_mergeable (1 samples, 0.05%)</title><rect x="65.0785%" y="229" width="0.0541%" height="15" fill="rgb(246,213,4)" fg:x="1202" fg:w="1"/><text x="65.3285%" y="239.50"></text></g><g><title>atomic_load_p (1 samples, 0.05%)</title><rect x="65.0785%" y="213" width="0.0541%" height="15" fill="rgb(218,134,35)" fg:x="1202" fg:w="1"/><text x="65.3285%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (5 samples, 0.27%)</title><rect x="64.9161%" y="517" width="0.2707%" height="15" fill="rgb(251,117,35)" fg:x="1199" fg:w="5"/><text x="65.1661%" y="527.50"></text></g><g><title>&lt;std::sys::unix::fs::Dir as core::ops::drop::Drop&gt;::drop (5 samples, 0.27%)</title><rect x="64.9161%" y="501" width="0.2707%" height="15" fill="rgb(206,156,45)" fg:x="1199" fg:w="5"/><text x="65.1661%" y="511.50"></text></g><g><title>closedir (5 samples, 0.27%)</title><rect x="64.9161%" y="485" width="0.2707%" height="15" fill="rgb(218,52,27)" fg:x="1199" fg:w="5"/><text x="65.1661%" y="495.50"></text></g><g><title>_rjem_je_free_default (5 samples, 0.27%)</title><rect x="64.9161%" y="469" width="0.2707%" height="15" fill="rgb(238,83,36)" fg:x="1199" fg:w="5"/><text x="65.1661%" y="479.50"></text></g><g><title>ifree (4 samples, 0.22%)</title><rect x="64.9702%" y="453" width="0.2166%" height="15" fill="rgb(218,53,43)" fg:x="1200" fg:w="4"/><text x="65.2202%" y="463.50"></text></g><g><title>idalloctm (4 samples, 0.22%)</title><rect x="64.9702%" y="437" width="0.2166%" height="15" fill="rgb(239,54,39)" fg:x="1200" fg:w="4"/><text x="65.2202%" y="447.50"></text></g><g><title>arena_dalloc (4 samples, 0.22%)</title><rect x="64.9702%" y="421" width="0.2166%" height="15" fill="rgb(212,198,13)" fg:x="1200" fg:w="4"/><text x="65.2202%" y="431.50"></text></g><g><title>arena_dalloc_large (4 samples, 0.22%)</title><rect x="64.9702%" y="405" width="0.2166%" height="15" fill="rgb(234,54,46)" fg:x="1200" fg:w="4"/><text x="65.2202%" y="415.50"></text></g><g><title>_rjem_je_large_dalloc (4 samples, 0.22%)</title><rect x="64.9702%" y="389" width="0.2166%" height="15" fill="rgb(217,120,7)" fg:x="1200" fg:w="4"/><text x="65.2202%" y="399.50"></text></g><g><title>large_dalloc_prep_impl (1 samples, 0.05%)</title><rect x="65.1326%" y="373" width="0.0541%" height="15" fill="rgb(246,39,15)" fg:x="1203" fg:w="1"/><text x="65.3826%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.05%)</title><rect x="65.1868%" y="517" width="0.0541%" height="15" fill="rgb(242,143,31)" fg:x="1204" fg:w="1"/><text x="65.4368%" y="527.50"></text></g><g><title>std::path::Path::to_path_buf (1 samples, 0.05%)</title><rect x="65.2409%" y="501" width="0.0541%" height="15" fill="rgb(252,60,24)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="511.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (1 samples, 0.05%)</title><rect x="65.2409%" y="485" width="0.0541%" height="15" fill="rgb(249,220,7)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="495.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.05%)</title><rect x="65.2409%" y="469" width="0.0541%" height="15" fill="rgb(236,67,13)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.05%)</title><rect x="65.2409%" y="453" width="0.0541%" height="15" fill="rgb(210,62,39)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.05%)</title><rect x="65.2409%" y="437" width="0.0541%" height="15" fill="rgb(219,122,53)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.05%)</title><rect x="65.2409%" y="421" width="0.0541%" height="15" fill="rgb(218,87,25)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.05%)</title><rect x="65.2409%" y="405" width="0.0541%" height="15" fill="rgb(234,179,48)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="65.2409%" y="389" width="0.0541%" height="15" fill="rgb(248,90,0)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.05%)</title><rect x="65.2409%" y="373" width="0.0541%" height="15" fill="rgb(207,228,37)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.05%)</title><rect x="65.2409%" y="357" width="0.0541%" height="15" fill="rgb(235,214,15)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.05%)</title><rect x="65.2409%" y="341" width="0.0541%" height="15" fill="rgb(210,144,39)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.05%)</title><rect x="65.2409%" y="325" width="0.0541%" height="15" fill="rgb(222,67,41)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.05%)</title><rect x="65.2409%" y="309" width="0.0541%" height="15" fill="rgb(205,35,37)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="319.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="65.2409%" y="293" width="0.0541%" height="15" fill="rgb(216,125,40)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="303.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="65.2409%" y="277" width="0.0541%" height="15" fill="rgb(228,227,20)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="287.50"></text></g><g><title>sz_size2index_usize_fastpath (1 samples, 0.05%)</title><rect x="65.2409%" y="261" width="0.0541%" height="15" fill="rgb(242,173,45)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="271.50"></text></g><g><title>sz_index2size_lookup_impl (1 samples, 0.05%)</title><rect x="65.2409%" y="245" width="0.0541%" height="15" fill="rgb(215,79,24)" fg:x="1205" fg:w="1"/><text x="65.4909%" y="255.50"></text></g><g><title>_rjem_je_arena_malloc_hard (1 samples, 0.05%)</title><rect x="65.3492%" y="341" width="0.0541%" height="15" fill="rgb(238,164,38)" fg:x="1207" fg:w="1"/><text x="65.5992%" y="351.50"></text></g><g><title>extent_recycle_extract (2 samples, 0.11%)</title><rect x="65.4575%" y="213" width="0.1083%" height="15" fill="rgb(245,196,38)" fg:x="1209" fg:w="2"/><text x="65.7075%" y="223.50"></text></g><g><title>_rjem_je_eset_fit (2 samples, 0.11%)</title><rect x="65.4575%" y="197" width="0.1083%" height="15" fill="rgb(231,217,29)" fg:x="1209" fg:w="2"/><text x="65.7075%" y="207.50"></text></g><g><title>eset_first_fit (1 samples, 0.05%)</title><rect x="65.5116%" y="181" width="0.0541%" height="15" fill="rgb(245,6,4)" fg:x="1210" fg:w="1"/><text x="65.7616%" y="191.50"></text></g><g><title>_rjem_je_sz_psz_quantize_ceil (1 samples, 0.05%)</title><rect x="65.5116%" y="165" width="0.0541%" height="15" fill="rgb(214,76,49)" fg:x="1210" fg:w="1"/><text x="65.7616%" y="175.50"></text></g><g><title>extent_deactivate_locked (1 samples, 0.05%)</title><rect x="65.5658%" y="197" width="0.0541%" height="15" fill="rgb(205,96,12)" fg:x="1211" fg:w="1"/><text x="65.8158%" y="207.50"></text></g><g><title>extent_deactivate_locked_impl (1 samples, 0.05%)</title><rect x="65.5658%" y="181" width="0.0541%" height="15" fill="rgb(243,131,4)" fg:x="1211" fg:w="1"/><text x="65.8158%" y="191.50"></text></g><g><title>_rjem_je_eset_insert (1 samples, 0.05%)</title><rect x="65.5658%" y="165" width="0.0541%" height="15" fill="rgb(214,114,4)" fg:x="1211" fg:w="1"/><text x="65.8158%" y="175.50"></text></g><g><title>eset_stats_add (1 samples, 0.05%)</title><rect x="65.5658%" y="149" width="0.0541%" height="15" fill="rgb(234,215,15)" fg:x="1211" fg:w="1"/><text x="65.8158%" y="159.50"></text></g><g><title>atomic_load_zu (1 samples, 0.05%)</title><rect x="65.5658%" y="133" width="0.0541%" height="15" fill="rgb(250,216,45)" fg:x="1211" fg:w="1"/><text x="65.8158%" y="143.50"></text></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.05%)</title><rect x="65.6199%" y="165" width="0.0541%" height="15" fill="rgb(236,128,4)" fg:x="1212" fg:w="1"/><text x="65.8699%" y="175.50"></text></g><g><title>_rjem_je_ecache_alloc (6 samples, 0.32%)</title><rect x="65.4034%" y="245" width="0.3249%" height="15" fill="rgb(234,50,33)" fg:x="1208" fg:w="6"/><text x="65.6534%" y="255.50"></text></g><g><title>extent_recycle (6 samples, 0.32%)</title><rect x="65.4034%" y="229" width="0.3249%" height="15" fill="rgb(253,131,37)" fg:x="1208" fg:w="6"/><text x="65.6534%" y="239.50"></text></g><g><title>extent_recycle_split (3 samples, 0.16%)</title><rect x="65.5658%" y="213" width="0.1624%" height="15" fill="rgb(218,55,27)" fg:x="1211" fg:w="3"/><text x="65.8158%" y="223.50"></text></g><g><title>extent_split_interior (2 samples, 0.11%)</title><rect x="65.6199%" y="197" width="0.1083%" height="15" fill="rgb(241,220,28)" fg:x="1212" fg:w="2"/><text x="65.8699%" y="207.50"></text></g><g><title>extent_split_impl (2 samples, 0.11%)</title><rect x="65.6199%" y="181" width="0.1083%" height="15" fill="rgb(241,90,48)" fg:x="1212" fg:w="2"/><text x="65.8699%" y="191.50"></text></g><g><title>ehooks_split_will_fail (1 samples, 0.05%)</title><rect x="65.6741%" y="165" width="0.0541%" height="15" fill="rgb(216,43,37)" fg:x="1213" fg:w="1"/><text x="65.9241%" y="175.50"></text></g><g><title>ehooks_get_extent_hooks_ptr (1 samples, 0.05%)</title><rect x="65.6741%" y="149" width="0.0541%" height="15" fill="rgb(207,173,9)" fg:x="1213" fg:w="1"/><text x="65.9241%" y="159.50"></text></g><g><title>atomic_load_p (1 samples, 0.05%)</title><rect x="65.6741%" y="133" width="0.0541%" height="15" fill="rgb(240,126,30)" fg:x="1213" fg:w="1"/><text x="65.9241%" y="143.50"></text></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.05%)</title><rect x="65.7282%" y="149" width="0.0541%" height="15" fill="rgb(228,178,53)" fg:x="1214" fg:w="1"/><text x="65.9782%" y="159.50"></text></g><g><title>_rjem_je_pa_alloc (8 samples, 0.43%)</title><rect x="65.4034%" y="309" width="0.4331%" height="15" fill="rgb(217,33,4)" fg:x="1208" fg:w="8"/><text x="65.6534%" y="319.50"></text></g><g><title>pai_alloc (8 samples, 0.43%)</title><rect x="65.4034%" y="293" width="0.4331%" height="15" fill="rgb(206,124,34)" fg:x="1208" fg:w="8"/><text x="65.6534%" y="303.50"></text></g><g><title>pac_alloc_impl (8 samples, 0.43%)</title><rect x="65.4034%" y="277" width="0.4331%" height="15" fill="rgb(208,122,53)" fg:x="1208" fg:w="8"/><text x="65.6534%" y="287.50"></text></g><g><title>pac_alloc_real (8 samples, 0.43%)</title><rect x="65.4034%" y="261" width="0.4331%" height="15" fill="rgb(215,202,26)" fg:x="1208" fg:w="8"/><text x="65.6534%" y="271.50"></text></g><g><title>_rjem_je_ecache_alloc_grow (2 samples, 0.11%)</title><rect x="65.7282%" y="245" width="0.1083%" height="15" fill="rgb(232,198,31)" fg:x="1214" fg:w="2"/><text x="65.9782%" y="255.50"></text></g><g><title>extent_alloc_retained (2 samples, 0.11%)</title><rect x="65.7282%" y="229" width="0.1083%" height="15" fill="rgb(222,23,35)" fg:x="1214" fg:w="2"/><text x="65.9782%" y="239.50"></text></g><g><title>extent_recycle (2 samples, 0.11%)</title><rect x="65.7282%" y="213" width="0.1083%" height="15" fill="rgb(242,27,53)" fg:x="1214" fg:w="2"/><text x="65.9782%" y="223.50"></text></g><g><title>extent_recycle_split (2 samples, 0.11%)</title><rect x="65.7282%" y="197" width="0.1083%" height="15" fill="rgb(210,216,42)" fg:x="1214" fg:w="2"/><text x="65.9782%" y="207.50"></text></g><g><title>extent_split_interior (2 samples, 0.11%)</title><rect x="65.7282%" y="181" width="0.1083%" height="15" fill="rgb(234,39,38)" fg:x="1214" fg:w="2"/><text x="65.9782%" y="191.50"></text></g><g><title>extent_split_impl (2 samples, 0.11%)</title><rect x="65.7282%" y="165" width="0.1083%" height="15" fill="rgb(235,126,54)" fg:x="1214" fg:w="2"/><text x="65.9782%" y="175.50"></text></g><g><title>ehooks_split (1 samples, 0.05%)</title><rect x="65.7823%" y="149" width="0.0541%" height="15" fill="rgb(235,150,33)" fg:x="1215" fg:w="1"/><text x="66.0323%" y="159.50"></text></g><g><title>imalloc_no_sample (10 samples, 0.54%)</title><rect x="65.3492%" y="389" width="0.5414%" height="15" fill="rgb(249,49,53)" fg:x="1207" fg:w="10"/><text x="65.5992%" y="399.50"></text></g><g><title>iallocztm (10 samples, 0.54%)</title><rect x="65.3492%" y="373" width="0.5414%" height="15" fill="rgb(238,60,50)" fg:x="1207" fg:w="10"/><text x="65.5992%" y="383.50"></text></g><g><title>arena_malloc (10 samples, 0.54%)</title><rect x="65.3492%" y="357" width="0.5414%" height="15" fill="rgb(210,5,2)" fg:x="1207" fg:w="10"/><text x="65.5992%" y="367.50"></text></g><g><title>_rjem_je_large_palloc (9 samples, 0.49%)</title><rect x="65.4034%" y="341" width="0.4873%" height="15" fill="rgb(214,207,24)" fg:x="1208" fg:w="9"/><text x="65.6534%" y="351.50"></text></g><g><title>_rjem_je_arena_extent_alloc_large (9 samples, 0.49%)</title><rect x="65.4034%" y="325" width="0.4873%" height="15" fill="rgb(228,173,2)" fg:x="1208" fg:w="9"/><text x="65.6534%" y="335.50"></text></g><g><title>san_large_extent_decide_guard (1 samples, 0.05%)</title><rect x="65.8365%" y="309" width="0.0541%" height="15" fill="rgb(244,26,8)" fg:x="1216" fg:w="1"/><text x="66.0865%" y="319.50"></text></g><g><title>imalloc_body (11 samples, 0.60%)</title><rect x="65.3492%" y="405" width="0.5956%" height="15" fill="rgb(249,153,35)" fg:x="1207" fg:w="11"/><text x="65.5992%" y="415.50"></text></g><g><title>thread_alloc_event (1 samples, 0.05%)</title><rect x="65.8906%" y="389" width="0.0541%" height="15" fill="rgb(221,215,40)" fg:x="1217" fg:w="1"/><text x="66.1406%" y="399.50"></text></g><g><title>te_event_advance (1 samples, 0.05%)</title><rect x="65.8906%" y="373" width="0.0541%" height="15" fill="rgb(238,106,35)" fg:x="1217" fg:w="1"/><text x="66.1406%" y="383.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.05%)</title><rect x="65.8906%" y="357" width="0.0541%" height="15" fill="rgb(207,195,21)" fg:x="1217" fg:w="1"/><text x="66.1406%" y="367.50"></text></g><g><title>_rjem_je_peak_alloc_new_event_wait (1 samples, 0.05%)</title><rect x="65.8906%" y="341" width="0.0541%" height="15" fill="rgb(205,43,29)" fg:x="1217" fg:w="1"/><text x="66.1406%" y="351.50"></text></g><g><title>std::sys::unix::fs::readdir (14 samples, 0.76%)</title><rect x="65.2409%" y="517" width="0.7580%" height="15" fill="rgb(236,35,21)" fg:x="1205" fg:w="14"/><text x="65.4909%" y="527.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (13 samples, 0.70%)</title><rect x="65.2951%" y="501" width="0.7038%" height="15" fill="rgb(244,74,8)" fg:x="1206" fg:w="13"/><text x="65.5451%" y="511.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (13 samples, 0.70%)</title><rect x="65.2951%" y="485" width="0.7038%" height="15" fill="rgb(241,229,7)" fg:x="1206" fg:w="13"/><text x="65.5451%" y="495.50"></text></g><g><title>std::sys::unix::fs::readdir::{{closure}} (13 samples, 0.70%)</title><rect x="65.2951%" y="469" width="0.7038%" height="15" fill="rgb(212,223,25)" fg:x="1206" fg:w="13"/><text x="65.5451%" y="479.50"></text></g><g><title>opendir (13 samples, 0.70%)</title><rect x="65.2951%" y="453" width="0.7038%" height="15" fill="rgb(234,58,53)" fg:x="1206" fg:w="13"/><text x="65.5451%" y="463.50"></text></g><g><title>_rjem_je_malloc_default (12 samples, 0.65%)</title><rect x="65.3492%" y="437" width="0.6497%" height="15" fill="rgb(244,36,1)" fg:x="1207" fg:w="12"/><text x="65.5992%" y="447.50"></text></g><g><title>imalloc (12 samples, 0.65%)</title><rect x="65.3492%" y="421" width="0.6497%" height="15" fill="rgb(222,40,54)" fg:x="1207" fg:w="12"/><text x="65.5992%" y="431.50"></text></g><g><title>tsd_fetch (1 samples, 0.05%)</title><rect x="65.9448%" y="405" width="0.0541%" height="15" fill="rgb(210,207,39)" fg:x="1218" fg:w="1"/><text x="66.1948%" y="415.50"></text></g><g><title>tsd_fetch_impl (1 samples, 0.05%)</title><rect x="65.9448%" y="389" width="0.0541%" height="15" fill="rgb(234,52,14)" fg:x="1218" fg:w="1"/><text x="66.1948%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (2 samples, 0.11%)</title><rect x="65.9989%" y="501" width="0.1083%" height="15" fill="rgb(239,108,46)" fg:x="1219" fg:w="2"/><text x="66.2489%" y="511.50"></text></g><g><title>std::io::default_read_to_string (2 samples, 0.11%)</title><rect x="65.9989%" y="485" width="0.1083%" height="15" fill="rgb(252,223,5)" fg:x="1219" fg:w="2"/><text x="66.2489%" y="495.50"></text></g><g><title>std::io::append_to_string (2 samples, 0.11%)</title><rect x="65.9989%" y="469" width="0.1083%" height="15" fill="rgb(227,181,11)" fg:x="1219" fg:w="2"/><text x="66.2489%" y="479.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.05%)</title><rect x="66.0531%" y="453" width="0.0541%" height="15" fill="rgb(248,126,40)" fg:x="1220" fg:w="1"/><text x="66.3031%" y="463.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.05%)</title><rect x="66.0531%" y="437" width="0.0541%" height="15" fill="rgb(243,1,18)" fg:x="1220" fg:w="1"/><text x="66.3031%" y="447.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.05%)</title><rect x="66.1072%" y="421" width="0.0541%" height="15" fill="rgb(214,145,23)" fg:x="1221" fg:w="1"/><text x="66.3572%" y="431.50"></text></g><g><title>tcache_event (1 samples, 0.05%)</title><rect x="66.1072%" y="405" width="0.0541%" height="15" fill="rgb(241,218,11)" fg:x="1221" fg:w="1"/><text x="66.3572%" y="415.50"></text></g><g><title>_rjem_je_malloc_default (2 samples, 0.11%)</title><rect x="66.1072%" y="501" width="0.1083%" height="15" fill="rgb(214,219,24)" fg:x="1221" fg:w="2"/><text x="66.3572%" y="511.50"></text></g><g><title>imalloc (2 samples, 0.11%)</title><rect x="66.1072%" y="485" width="0.1083%" height="15" fill="rgb(235,32,7)" fg:x="1221" fg:w="2"/><text x="66.3572%" y="495.50"></text></g><g><title>imalloc_body (2 samples, 0.11%)</title><rect x="66.1072%" y="469" width="0.1083%" height="15" fill="rgb(227,121,28)" fg:x="1221" fg:w="2"/><text x="66.3572%" y="479.50"></text></g><g><title>thread_alloc_event (2 samples, 0.11%)</title><rect x="66.1072%" y="453" width="0.1083%" height="15" fill="rgb(216,129,49)" fg:x="1221" fg:w="2"/><text x="66.3572%" y="463.50"></text></g><g><title>te_event_advance (2 samples, 0.11%)</title><rect x="66.1072%" y="437" width="0.1083%" height="15" fill="rgb(207,194,50)" fg:x="1221" fg:w="2"/><text x="66.3572%" y="447.50"></text></g><g><title>te_init (1 samples, 0.05%)</title><rect x="66.1613%" y="421" width="0.0541%" height="15" fill="rgb(207,4,18)" fg:x="1222" fg:w="1"/><text x="66.4113%" y="431.50"></text></g><g><title>&lt;sysinfo::linux::system::System as sysinfo::traits::SystemExt&gt;::refresh_disks_list (80 samples, 4.33%)</title><rect x="61.9383%" y="533" width="4.3313%" height="15" fill="rgb(213,50,30)" fg:x="1144" fg:w="80"/><text x="62.1883%" y="543.50">&lt;sysi..</text></g><g><title>sysinfo::linux::utils::get_all_data_from_file (5 samples, 0.27%)</title><rect x="65.9989%" y="517" width="0.2707%" height="15" fill="rgb(208,77,22)" fg:x="1219" fg:w="5"/><text x="66.2489%" y="527.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="66.2155%" y="501" width="0.0541%" height="15" fill="rgb(244,204,34)" fg:x="1223" fg:w="1"/><text x="66.4655%" y="511.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (2 samples, 0.11%)</title><rect x="66.3779%" y="517" width="0.1083%" height="15" fill="rgb(230,20,17)" fg:x="1226" fg:w="2"/><text x="66.6279%" y="527.50"></text></g><g><title>&lt;sysinfo::linux::system::System as sysinfo::traits::SystemExt&gt;::refresh_memory (5 samples, 0.27%)</title><rect x="66.2696%" y="533" width="0.2707%" height="15" fill="rgb(237,83,15)" fg:x="1224" fg:w="5"/><text x="66.5196%" y="543.50"></text></g><g><title>sysinfo::linux::utils::get_all_data_from_file (1 samples, 0.05%)</title><rect x="66.4862%" y="517" width="0.0541%" height="15" fill="rgb(221,109,25)" fg:x="1228" fg:w="1"/><text x="66.7362%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (4 samples, 0.22%)</title><rect x="66.5403%" y="533" width="0.2166%" height="15" fill="rgb(205,194,52)" fg:x="1229" fg:w="4"/><text x="66.7903%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="66.7028%" y="517" width="0.0541%" height="15" fill="rgb(244,173,54)" fg:x="1232" fg:w="1"/><text x="66.9528%" y="527.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="66.7028%" y="501" width="0.0541%" height="15" fill="rgb(227,181,18)" fg:x="1232" fg:w="1"/><text x="66.9528%" y="511.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="66.7028%" y="485" width="0.0541%" height="15" fill="rgb(238,36,30)" fg:x="1232" fg:w="1"/><text x="66.9528%" y="495.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.05%)</title><rect x="66.7569%" y="533" width="0.0541%" height="15" fill="rgb(254,85,0)" fg:x="1233" fg:w="1"/><text x="67.0069%" y="543.50"></text></g><g><title>bytes::bytes::promotable_even_drop (2 samples, 0.11%)</title><rect x="66.8110%" y="533" width="0.1083%" height="15" fill="rgb(247,63,33)" fg:x="1234" fg:w="2"/><text x="67.0610%" y="543.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.05%)</title><rect x="66.9193%" y="533" width="0.0541%" height="15" fill="rgb(220,7,54)" fg:x="1236" fg:w="1"/><text x="67.1693%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (1 samples, 0.05%)</title><rect x="66.9735%" y="533" width="0.0541%" height="15" fill="rgb(238,227,21)" fg:x="1237" fg:w="1"/><text x="67.2235%" y="543.50"></text></g><g><title>client::composite_session::CompositeSession::need_refresh_placement_driver_cluster (1 samples, 0.05%)</title><rect x="67.0276%" y="533" width="0.0541%" height="15" fill="rgb(237,29,31)" fg:x="1238" fg:w="1"/><text x="67.2776%" y="543.50"></text></g><g><title>&lt;client::request::Request as core::clone::Clone&gt;::clone (1 samples, 0.05%)</title><rect x="67.3525%" y="517" width="0.0541%" height="15" fill="rgb(211,21,50)" fg:x="1244" fg:w="1"/><text x="67.6025%" y="527.50"></text></g><g><title>&lt;str as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.05%)</title><rect x="67.4066%" y="517" width="0.0541%" height="15" fill="rgb(239,119,2)" fg:x="1245" fg:w="1"/><text x="67.6566%" y="527.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.05%)</title><rect x="67.4607%" y="517" width="0.0541%" height="15" fill="rgb(250,2,39)" fg:x="1246" fg:w="1"/><text x="67.7107%" y="527.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.05%)</title><rect x="67.4607%" y="501" width="0.0541%" height="15" fill="rgb(244,46,53)" fg:x="1246" fg:w="1"/><text x="67.7107%" y="511.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::add_entry (1 samples, 0.05%)</title><rect x="67.4607%" y="485" width="0.0541%" height="15" fill="rgb(209,21,19)" fg:x="1246" fg:w="1"/><text x="67.7107%" y="495.50"></text></g><g><title>&lt;itertools::adaptors::coalesce::CoalesceBy&lt;I,F,T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="67.5149%" y="501" width="0.0541%" height="15" fill="rgb(236,145,4)" fg:x="1247" fg:w="1"/><text x="67.7649%" y="511.50"></text></g><g><title>client::composite_session::CompositeSession::refresh_sessions::{{closure}} (3 samples, 0.16%)</title><rect x="67.5149%" y="517" width="0.1624%" height="15" fill="rgb(220,133,36)" fg:x="1247" fg:w="3"/><text x="67.7649%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.11%)</title><rect x="67.5690%" y="501" width="0.1083%" height="15" fill="rgb(244,18,3)" fg:x="1248" fg:w="2"/><text x="67.8190%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.11%)</title><rect x="67.5690%" y="485" width="0.1083%" height="15" fill="rgb(232,171,48)" fg:x="1248" fg:w="2"/><text x="67.8190%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="67.6232%" y="469" width="0.0541%" height="15" fill="rgb(223,223,53)" fg:x="1249" fg:w="1"/><text x="67.8732%" y="479.50"></text></g><g><title>iralloct (3 samples, 0.16%)</title><rect x="67.8397%" y="405" width="0.1624%" height="15" fill="rgb(246,92,13)" fg:x="1253" fg:w="3"/><text x="68.0897%" y="415.50"></text></g><g><title>_rjem_je_arena_ralloc (3 samples, 0.16%)</title><rect x="67.8397%" y="389" width="0.1624%" height="15" fill="rgb(229,171,10)" fg:x="1253" fg:w="3"/><text x="68.0897%" y="399.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::create_byte_string (5 samples, 0.27%)</title><rect x="67.8397%" y="485" width="0.2707%" height="15" fill="rgb(213,131,26)" fg:x="1253" fg:w="5"/><text x="68.0897%" y="495.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.1731 (5 samples, 0.27%)</title><rect x="67.8397%" y="469" width="0.2707%" height="15" fill="rgb(242,87,54)" fg:x="1253" fg:w="5"/><text x="68.0897%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.27%)</title><rect x="67.8397%" y="453" width="0.2707%" height="15" fill="rgb(237,21,35)" fg:x="1253" fg:w="5"/><text x="68.0897%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.27%)</title><rect x="67.8397%" y="437" width="0.2707%" height="15" fill="rgb(253,13,47)" fg:x="1253" fg:w="5"/><text x="68.0897%" y="447.50"></text></g><g><title>do_rallocx (5 samples, 0.27%)</title><rect x="67.8397%" y="421" width="0.2707%" height="15" fill="rgb(215,122,49)" fg:x="1253" fg:w="5"/><text x="68.0897%" y="431.50"></text></g><g><title>zero_get (2 samples, 0.11%)</title><rect x="68.0022%" y="405" width="0.1083%" height="15" fill="rgb(209,179,30)" fg:x="1256" fg:w="2"/><text x="68.2522%" y="415.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (1 samples, 0.05%)</title><rect x="68.1104%" y="485" width="0.0541%" height="15" fill="rgb(235,100,24)" fg:x="1258" fg:w="1"/><text x="68.3604%" y="495.50"></text></g><g><title>model::range_server::&lt;impl core::convert::From&lt;&amp;model::range_server::RangeServer&gt; for protocol::rpc::header::RangeServerT&gt;::from (2 samples, 0.11%)</title><rect x="68.1646%" y="485" width="0.1083%" height="15" fill="rgb(209,67,24)" fg:x="1259" fg:w="2"/><text x="68.4146%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="68.3270%" y="453" width="0.0541%" height="15" fill="rgb(206,74,32)" fg:x="1262" fg:w="1"/><text x="68.5770%" y="463.50"></text></g><g><title>protocol::rpc::header::RangeServer::create (4 samples, 0.22%)</title><rect x="68.2729%" y="485" width="0.2166%" height="15" fill="rgb(212,45,25)" fg:x="1261" fg:w="4"/><text x="68.5229%" y="495.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (4 samples, 0.22%)</title><rect x="68.2729%" y="469" width="0.2166%" height="15" fill="rgb(239,26,3)" fg:x="1261" fg:w="4"/><text x="68.5229%" y="479.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.676 (2 samples, 0.11%)</title><rect x="68.3812%" y="453" width="0.1083%" height="15" fill="rgb(218,36,15)" fg:x="1263" fg:w="2"/><text x="68.6312%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="68.4353%" y="437" width="0.0541%" height="15" fill="rgb(206,108,24)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="68.4353%" y="421" width="0.0541%" height="15" fill="rgb(234,204,42)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="431.50"></text></g><g><title>do_rallocx (1 samples, 0.05%)</title><rect x="68.4353%" y="405" width="0.0541%" height="15" fill="rgb(229,2,11)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="415.50"></text></g><g><title>iralloct (1 samples, 0.05%)</title><rect x="68.4353%" y="389" width="0.0541%" height="15" fill="rgb(221,20,48)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="399.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.05%)</title><rect x="68.4353%" y="373" width="0.0541%" height="15" fill="rgb(244,164,10)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="383.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.05%)</title><rect x="68.4353%" y="357" width="0.0541%" height="15" fill="rgb(243,229,2)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="367.50"></text></g><g><title>sz_s2u (1 samples, 0.05%)</title><rect x="68.4353%" y="341" width="0.0541%" height="15" fill="rgb(232,131,37)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="351.50"></text></g><g><title>sz_s2u_lookup (1 samples, 0.05%)</title><rect x="68.4353%" y="325" width="0.0541%" height="15" fill="rgb(217,156,11)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="335.50"></text></g><g><title>sz_size2index_lookup (1 samples, 0.05%)</title><rect x="68.4353%" y="309" width="0.0541%" height="15" fill="rgb(239,99,48)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="319.50"></text></g><g><title>sz_size2index_lookup_impl (1 samples, 0.05%)</title><rect x="68.4353%" y="293" width="0.0541%" height="15" fill="rgb(231,209,9)" fg:x="1264" fg:w="1"/><text x="68.6853%" y="303.50"></text></g><g><title>client::request::&lt;impl core::convert::From&lt;&amp;client::request::Request&gt; for bytes::bytes::Bytes&gt;::from (16 samples, 0.87%)</title><rect x="67.7315%" y="501" width="0.8663%" height="15" fill="rgb(254,97,27)" fg:x="1251" fg:w="16"/><text x="67.9815%" y="511.50"></text></g><g><title>sdallocx (2 samples, 0.11%)</title><rect x="68.4894%" y="485" width="0.1083%" height="15" fill="rgb(223,151,38)" fg:x="1265" fg:w="2"/><text x="68.7394%" y="495.50"></text></g><g><title>free_fastpath (1 samples, 0.05%)</title><rect x="68.5436%" y="469" width="0.0541%" height="15" fill="rgb(219,206,35)" fg:x="1266" fg:w="1"/><text x="68.7936%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="68.5977%" y="501" width="0.0541%" height="15" fill="rgb(216,130,31)" fg:x="1267" fg:w="1"/><text x="68.8477%" y="511.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="68.6519%" y="485" width="0.0541%" height="15" fill="rgb(251,97,34)" fg:x="1268" fg:w="1"/><text x="68.9019%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="68.6519%" y="469" width="0.0541%" height="15" fill="rgb(246,159,47)" fg:x="1268" fg:w="1"/><text x="68.9019%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="68.6519%" y="453" width="0.0541%" height="15" fill="rgb(232,87,10)" fg:x="1268" fg:w="1"/><text x="68.9019%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="68.6519%" y="437" width="0.0541%" height="15" fill="rgb(249,1,37)" fg:x="1268" fg:w="1"/><text x="68.9019%" y="447.50"></text></g><g><title>client::session::Session::write::{{closure}} (20 samples, 1.08%)</title><rect x="67.6773%" y="517" width="1.0828%" height="15" fill="rgb(239,135,14)" fg:x="1250" fg:w="20"/><text x="67.9273%" y="527.50"></text></g><g><title>transport::connection::Connection::write_frame::{{closure}} (2 samples, 0.11%)</title><rect x="68.6519%" y="501" width="0.1083%" height="15" fill="rgb(253,116,46)" fg:x="1268" fg:w="2"/><text x="68.9019%" y="511.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.05%)</title><rect x="68.7060%" y="485" width="0.0541%" height="15" fill="rgb(222,217,37)" fg:x="1269" fg:w="1"/><text x="68.9560%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="68.7602%" y="517" width="0.0541%" height="15" fill="rgb(252,96,8)" fg:x="1270" fg:w="1"/><text x="69.0102%" y="527.50"></text></g><g><title>client::composite_session::CompositeSession::refresh_placement_driver_cluster::{{closure}} (35 samples, 1.89%)</title><rect x="67.0818%" y="533" width="1.8950%" height="15" fill="rgb(254,103,41)" fg:x="1239" fg:w="35"/><text x="67.3318%" y="543.50">c..</text></g><g><title>malloc (3 samples, 0.16%)</title><rect x="68.8143%" y="517" width="0.1624%" height="15" fill="rgb(218,213,19)" fg:x="1271" fg:w="3"/><text x="69.0643%" y="527.50"></text></g><g><title>imalloc_fastpath (3 samples, 0.16%)</title><rect x="68.8143%" y="501" width="0.1624%" height="15" fill="rgb(253,95,21)" fg:x="1271" fg:w="3"/><text x="69.0643%" y="511.50"></text></g><g><title>client::composite_session::CompositeSession::try_reconnect::{{closure}} (1 samples, 0.05%)</title><rect x="68.9767%" y="533" width="0.0541%" height="15" fill="rgb(229,26,28)" fg:x="1274" fg:w="1"/><text x="69.2267%" y="543.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push_slot (3 samples, 0.16%)</title><rect x="69.0309%" y="501" width="0.1624%" height="15" fill="rgb(230,129,16)" fg:x="1275" fg:w="3"/><text x="69.2809%" y="511.50"></text></g><g><title>client::request::&lt;impl core::convert::From&lt;&amp;client::request::Request&gt; for bytes::bytes::Bytes&gt;::from (4 samples, 0.22%)</title><rect x="69.0309%" y="517" width="0.2166%" height="15" fill="rgb(236,126,17)" fg:x="1275" fg:w="4"/><text x="69.2809%" y="527.50"></text></g><g><title>protocol::rpc::header::RangeServer::create (1 samples, 0.05%)</title><rect x="69.1933%" y="501" width="0.0541%" height="15" fill="rgb(209,33,33)" fg:x="1278" fg:w="1"/><text x="69.4433%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (1 samples, 0.05%)</title><rect x="69.1933%" y="485" width="0.0541%" height="15" fill="rgb(227,85,29)" fg:x="1278" fg:w="1"/><text x="69.4433%" y="495.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.676 (1 samples, 0.05%)</title><rect x="69.1933%" y="469" width="0.0541%" height="15" fill="rgb(241,53,46)" fg:x="1278" fg:w="1"/><text x="69.4433%" y="479.50"></text></g><g><title>client::session::Session::write::{{closure}} (5 samples, 0.27%)</title><rect x="69.0309%" y="533" width="0.2707%" height="15" fill="rgb(228,167,53)" fg:x="1275" fg:w="5"/><text x="69.2809%" y="543.50"></text></g><g><title>transport::connection::Connection::write_frame::{{closure}} (1 samples, 0.05%)</title><rect x="69.2474%" y="517" width="0.0541%" height="15" fill="rgb(238,195,45)" fg:x="1279" fg:w="1"/><text x="69.4974%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.05%)</title><rect x="69.2474%" y="501" width="0.0541%" height="15" fill="rgb(252,124,45)" fg:x="1279" fg:w="1"/><text x="69.4974%" y="511.50"></text></g><g><title>client::session_manager::SessionManager::get_composite_session::{{closure}} (1 samples, 0.05%)</title><rect x="69.3016%" y="533" width="0.0541%" height="15" fill="rgb(251,38,35)" fg:x="1280" fg:w="1"/><text x="69.5516%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="69.3016%" y="517" width="0.0541%" height="15" fill="rgb(227,33,2)" fg:x="1280" fg:w="1"/><text x="69.5516%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.05%)</title><rect x="69.3557%" y="533" width="0.0541%" height="15" fill="rgb(223,157,46)" fg:x="1281" fg:w="1"/><text x="69.6057%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;range_server::handler::ServerCall&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="69.4099%" y="533" width="0.0541%" height="15" fill="rgb(222,78,41)" fg:x="1282" fg:w="1"/><text x="69.6599%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;range_server::handler::cmd::Command::apply&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;::{{closure}}&gt; (1 samples, 0.05%)</title><rect x="69.4640%" y="533" width="0.0541%" height="15" fill="rgb(248,176,11)" fg:x="1283" fg:w="1"/><text x="69.7140%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::op::Op&lt;tokio_uring::io::writev::Writev&lt;bytes::bytes::Bytes&gt;&gt;&gt; (2 samples, 0.11%)</title><rect x="69.5181%" y="533" width="0.1083%" height="15" fill="rgb(241,221,18)" fg:x="1284" fg:w="2"/><text x="69.7681%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;transport::connection::Connection::write_frame::{{closure}}&gt; (2 samples, 0.11%)</title><rect x="69.6264%" y="533" width="0.1083%" height="15" fill="rgb(218,85,22)" fg:x="1286" fg:w="2"/><text x="69.8764%" y="543.50"></text></g><g><title>local_sync::mpsc::block::Queue&lt;T&gt;::pop_unchecked (3 samples, 0.16%)</title><rect x="69.7347%" y="533" width="0.1624%" height="15" fill="rgb(222,223,7)" fg:x="1288" fg:w="3"/><text x="69.9847%" y="543.50"></text></g><g><title>local_sync::mpsc::chan::Tx&lt;T,S&gt;::send (9 samples, 0.49%)</title><rect x="69.8971%" y="533" width="0.4873%" height="15" fill="rgb(254,59,39)" fg:x="1291" fg:w="9"/><text x="70.1471%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (4 samples, 0.22%)</title><rect x="70.1678%" y="517" width="0.2166%" height="15" fill="rgb(247,100,27)" fg:x="1296" fg:w="4"/><text x="70.4178%" y="527.50"></text></g><g><title>local_sync::mpsc::unbounded::Rx&lt;T&gt;::recv::{{closure}} (2 samples, 0.11%)</title><rect x="70.3844%" y="533" width="0.1083%" height="15" fill="rgb(237,207,10)" fg:x="1300" fg:w="2"/><text x="70.6344%" y="543.50"></text></g><g><title>local_sync::mpsc::block::Queue&lt;T&gt;::pop_unchecked (1 samples, 0.05%)</title><rect x="70.4385%" y="517" width="0.0541%" height="15" fill="rgb(220,121,28)" fg:x="1301" fg:w="1"/><text x="70.6885%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.05%)</title><rect x="70.4927%" y="517" width="0.0541%" height="15" fill="rgb(213,223,20)" fg:x="1302" fg:w="1"/><text x="70.7427%" y="527.50"></text></g><g><title>local_sync::oneshot::Sender&lt;T&gt;::send (2 samples, 0.11%)</title><rect x="70.4927%" y="533" width="0.1083%" height="15" fill="rgb(205,121,27)" fg:x="1302" fg:w="2"/><text x="70.7427%" y="543.50"></text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.05%)</title><rect x="70.5468%" y="517" width="0.0541%" height="15" fill="rgb(253,24,53)" fg:x="1303" fg:w="1"/><text x="70.7968%" y="527.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="70.6010%" y="533" width="0.0541%" height="15" fill="rgb(224,224,47)" fg:x="1304" fg:w="1"/><text x="70.8510%" y="543.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="70.6010%" y="517" width="0.0541%" height="15" fill="rgb(250,125,36)" fg:x="1304" fg:w="1"/><text x="70.8510%" y="527.50"></text></g><g><title>arena_slab_alloc (1 samples, 0.05%)</title><rect x="70.8717%" y="357" width="0.0541%" height="15" fill="rgb(240,144,38)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="367.50"></text></g><g><title>_rjem_je_pa_alloc (1 samples, 0.05%)</title><rect x="70.8717%" y="341" width="0.0541%" height="15" fill="rgb(250,15,50)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="351.50"></text></g><g><title>pai_alloc (1 samples, 0.05%)</title><rect x="70.8717%" y="325" width="0.0541%" height="15" fill="rgb(210,24,26)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="335.50"></text></g><g><title>pac_alloc_impl (1 samples, 0.05%)</title><rect x="70.8717%" y="309" width="0.0541%" height="15" fill="rgb(234,53,53)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="319.50"></text></g><g><title>pac_alloc_real (1 samples, 0.05%)</title><rect x="70.8717%" y="293" width="0.0541%" height="15" fill="rgb(208,108,28)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="303.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.05%)</title><rect x="70.8717%" y="277" width="0.0541%" height="15" fill="rgb(227,143,7)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="287.50"></text></g><g><title>extent_recycle (1 samples, 0.05%)</title><rect x="70.8717%" y="261" width="0.0541%" height="15" fill="rgb(238,189,38)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="271.50"></text></g><g><title>extent_recycle_extract (1 samples, 0.05%)</title><rect x="70.8717%" y="245" width="0.0541%" height="15" fill="rgb(222,69,15)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="255.50"></text></g><g><title>_rjem_je_eset_fit (1 samples, 0.05%)</title><rect x="70.8717%" y="229" width="0.0541%" height="15" fill="rgb(213,169,7)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="239.50"></text></g><g><title>eset_first_fit (1 samples, 0.05%)</title><rect x="70.8717%" y="213" width="0.0541%" height="15" fill="rgb(251,219,4)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="223.50"></text></g><g><title>_rjem_je_edata_heap_first (1 samples, 0.05%)</title><rect x="70.8717%" y="197" width="0.0541%" height="15" fill="rgb(241,55,40)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="207.50"></text></g><g><title>ph_first (1 samples, 0.05%)</title><rect x="70.8717%" y="181" width="0.0541%" height="15" fill="rgb(243,57,30)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="191.50"></text></g><g><title>ph_merge_aux (1 samples, 0.05%)</title><rect x="70.8717%" y="165" width="0.0541%" height="15" fill="rgb(234,50,30)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="175.50"></text></g><g><title>phn_next_get (1 samples, 0.05%)</title><rect x="70.8717%" y="149" width="0.0541%" height="15" fill="rgb(239,23,42)" fg:x="1309" fg:w="1"/><text x="71.1217%" y="159.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (3 samples, 0.16%)</title><rect x="70.8717%" y="389" width="0.1624%" height="15" fill="rgb(217,38,19)" fg:x="1309" fg:w="3"/><text x="71.1217%" y="399.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (3 samples, 0.16%)</title><rect x="70.8717%" y="373" width="0.1624%" height="15" fill="rgb(215,179,16)" fg:x="1309" fg:w="3"/><text x="71.1217%" y="383.50"></text></g><g><title>edata_nfree_get (2 samples, 0.11%)</title><rect x="70.9258%" y="357" width="0.1083%" height="15" fill="rgb(254,21,37)" fg:x="1310" fg:w="2"/><text x="71.1758%" y="367.50"></text></g><g><title>imalloc_no_sample (7 samples, 0.38%)</title><rect x="70.8717%" y="485" width="0.3790%" height="15" fill="rgb(219,207,48)" fg:x="1309" fg:w="7"/><text x="71.1217%" y="495.50"></text></g><g><title>ipalloct (7 samples, 0.38%)</title><rect x="70.8717%" y="469" width="0.3790%" height="15" fill="rgb(227,225,41)" fg:x="1309" fg:w="7"/><text x="71.1217%" y="479.50"></text></g><g><title>ipallocztm (7 samples, 0.38%)</title><rect x="70.8717%" y="453" width="0.3790%" height="15" fill="rgb(223,130,1)" fg:x="1309" fg:w="7"/><text x="71.1217%" y="463.50"></text></g><g><title>_rjem_je_arena_palloc (7 samples, 0.38%)</title><rect x="70.8717%" y="437" width="0.3790%" height="15" fill="rgb(249,54,42)" fg:x="1309" fg:w="7"/><text x="71.1217%" y="447.50"></text></g><g><title>arena_malloc (7 samples, 0.38%)</title><rect x="70.8717%" y="421" width="0.3790%" height="15" fill="rgb(248,69,25)" fg:x="1309" fg:w="7"/><text x="71.1217%" y="431.50"></text></g><g><title>tcache_alloc_small (7 samples, 0.38%)</title><rect x="70.8717%" y="405" width="0.3790%" height="15" fill="rgb(234,21,32)" fg:x="1309" fg:w="7"/><text x="71.1217%" y="415.50"></text></g><g><title>cache_bin_alloc (4 samples, 0.22%)</title><rect x="71.0341%" y="389" width="0.2166%" height="15" fill="rgb(252,136,6)" fg:x="1312" fg:w="4"/><text x="71.2841%" y="399.50"></text></g><g><title>cache_bin_alloc_impl (4 samples, 0.22%)</title><rect x="71.0341%" y="373" width="0.2166%" height="15" fill="rgb(245,87,12)" fg:x="1312" fg:w="4"/><text x="71.2841%" y="383.50"></text></g><g><title>mallocx (12 samples, 0.65%)</title><rect x="70.6551%" y="533" width="0.6497%" height="15" fill="rgb(208,12,15)" fg:x="1305" fg:w="12"/><text x="70.9051%" y="543.50"></text></g><g><title>imalloc (8 samples, 0.43%)</title><rect x="70.8717%" y="517" width="0.4331%" height="15" fill="rgb(250,98,2)" fg:x="1309" fg:w="8"/><text x="71.1217%" y="527.50"></text></g><g><title>imalloc_body (8 samples, 0.43%)</title><rect x="70.8717%" y="501" width="0.4331%" height="15" fill="rgb(205,213,15)" fg:x="1309" fg:w="8"/><text x="71.1217%" y="511.50"></text></g><g><title>thread_alloc_event (1 samples, 0.05%)</title><rect x="71.2507%" y="485" width="0.0541%" height="15" fill="rgb(248,192,44)" fg:x="1316" fg:w="1"/><text x="71.5007%" y="495.50"></text></g><g><title>te_event_advance (1 samples, 0.05%)</title><rect x="71.2507%" y="469" width="0.0541%" height="15" fill="rgb(221,89,17)" fg:x="1316" fg:w="1"/><text x="71.5007%" y="479.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.05%)</title><rect x="71.2507%" y="453" width="0.0541%" height="15" fill="rgb(209,55,3)" fg:x="1316" fg:w="1"/><text x="71.5007%" y="463.50"></text></g><g><title>te_adjust_thresholds_helper (1 samples, 0.05%)</title><rect x="71.2507%" y="437" width="0.0541%" height="15" fill="rgb(247,23,45)" fg:x="1316" fg:w="1"/><text x="71.5007%" y="447.50"></text></g><g><title>te_ctx_next_event_set (1 samples, 0.05%)</title><rect x="71.2507%" y="421" width="0.0541%" height="15" fill="rgb(235,152,23)" fg:x="1316" fg:w="1"/><text x="71.5007%" y="431.50"></text></g><g><title>_rjem_je_te_recompute_fast_threshold (1 samples, 0.05%)</title><rect x="71.2507%" y="405" width="0.0541%" height="15" fill="rgb(244,63,13)" fg:x="1316" fg:w="1"/><text x="71.5007%" y="415.50"></text></g><g><title>_rjem_je_te_recompute_fast_threshold (1 samples, 0.05%)</title><rect x="71.2507%" y="389" width="0.0541%" height="15" fill="rgb(227,30,37)" fg:x="1316" fg:w="1"/><text x="71.5007%" y="399.50"></text></g><g><title>atomic_fence (1 samples, 0.05%)</title><rect x="71.2507%" y="373" width="0.0541%" height="15" fill="rgb(224,49,42)" fg:x="1316" fg:w="1"/><text x="71.5007%" y="383.50"></text></g><g><title>ordered_multimap::list_ordered_multimap::hash_key (1 samples, 0.05%)</title><rect x="71.3048%" y="533" width="0.0541%" height="15" fill="rgb(218,129,5)" fg:x="1317" fg:w="1"/><text x="71.5548%" y="543.50"></text></g><g><title>chrono::format::format_inner::{{closure}} (1 samples, 0.05%)</title><rect x="71.3590%" y="373" width="0.0541%" height="15" fill="rgb(240,199,54)" fg:x="1318" fg:w="1"/><text x="71.6090%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.05%)</title><rect x="71.3590%" y="357" width="0.0541%" height="15" fill="rgb(234,31,13)" fg:x="1318" fg:w="1"/><text x="71.6090%" y="367.50"></text></g><g><title>core::fmt::run (1 samples, 0.05%)</title><rect x="71.3590%" y="341" width="0.0541%" height="15" fill="rgb(219,73,54)" fg:x="1318" fg:w="1"/><text x="71.6090%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.05%)</title><rect x="71.3590%" y="325" width="0.0541%" height="15" fill="rgb(251,162,10)" fg:x="1318" fg:w="1"/><text x="71.6090%" y="335.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.05%)</title><rect x="71.3590%" y="309" width="0.0541%" height="15" fill="rgb(240,138,47)" fg:x="1318" fg:w="1"/><text x="71.6090%" y="319.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.05%)</title><rect x="71.3590%" y="293" width="0.0541%" height="15" fill="rgb(216,138,26)" fg:x="1318" fg:w="1"/><text x="71.6090%" y="303.50"></text></g><g><title>&lt;log4rs::append::rolling_file::RollingFileAppender as log4rs::append::Append&gt;::append (2 samples, 0.11%)</title><rect x="71.3590%" y="501" width="0.1083%" height="15" fill="rgb(243,17,35)" fg:x="1318" fg:w="2"/><text x="71.6090%" y="511.50"></text></g><g><title>&lt;log4rs::encode::pattern::PatternEncoder as log4rs::encode::Encode&gt;::encode (2 samples, 0.11%)</title><rect x="71.3590%" y="485" width="0.1083%" height="15" fill="rgb(241,60,18)" fg:x="1318" fg:w="2"/><text x="71.6090%" y="495.50"></text></g><g><title>log4rs::encode::pattern::FormattedChunk::encode (2 samples, 0.11%)</title><rect x="71.3590%" y="469" width="0.1083%" height="15" fill="rgb(234,2,44)" fg:x="1318" fg:w="2"/><text x="71.6090%" y="479.50"></text></g><g><title>std::io::Write::write_fmt (2 samples, 0.11%)</title><rect x="71.3590%" y="453" width="0.1083%" height="15" fill="rgb(225,225,33)" fg:x="1318" fg:w="2"/><text x="71.6090%" y="463.50"></text></g><g><title>core::fmt::write (2 samples, 0.11%)</title><rect x="71.3590%" y="437" width="0.1083%" height="15" fill="rgb(234,50,31)" fg:x="1318" fg:w="2"/><text x="71.6090%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.11%)</title><rect x="71.3590%" y="421" width="0.1083%" height="15" fill="rgb(249,6,25)" fg:x="1318" fg:w="2"/><text x="71.6090%" y="431.50"></text></g><g><title>&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (2 samples, 0.11%)</title><rect x="71.3590%" y="405" width="0.1083%" height="15" fill="rgb(241,5,17)" fg:x="1318" fg:w="2"/><text x="71.6090%" y="415.50"></text></g><g><title>chrono::format::format_inner (2 samples, 0.11%)</title><rect x="71.3590%" y="389" width="0.1083%" height="15" fill="rgb(207,116,10)" fg:x="1318" fg:w="2"/><text x="71.6090%" y="399.50"></text></g><g><title>core::fmt::write (1 samples, 0.05%)</title><rect x="71.4131%" y="373" width="0.0541%" height="15" fill="rgb(222,128,18)" fg:x="1319" fg:w="1"/><text x="71.6631%" y="383.50"></text></g><g><title>core::fmt::run (1 samples, 0.05%)</title><rect x="71.4131%" y="357" width="0.0541%" height="15" fill="rgb(229,109,25)" fg:x="1319" fg:w="1"/><text x="71.6631%" y="367.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.05%)</title><rect x="71.4131%" y="341" width="0.0541%" height="15" fill="rgb(222,102,25)" fg:x="1319" fg:w="1"/><text x="71.6631%" y="351.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (1 samples, 0.05%)</title><rect x="71.4131%" y="325" width="0.0541%" height="15" fill="rgb(239,211,5)" fg:x="1319" fg:w="1"/><text x="71.6631%" y="335.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.05%)</title><rect x="71.4131%" y="309" width="0.0541%" height="15" fill="rgb(223,136,26)" fg:x="1319" fg:w="1"/><text x="71.6631%" y="319.50"></text></g><g><title>range_server::connection_tracker::ConnectionTracker::remove (3 samples, 0.16%)</title><rect x="71.3590%" y="533" width="0.1624%" height="15" fill="rgb(227,30,15)" fg:x="1318" fg:w="3"/><text x="71.6090%" y="543.50"></text></g><g><title>&lt;log4rs::Logger as log::Log&gt;::log (3 samples, 0.16%)</title><rect x="71.3590%" y="517" width="0.1624%" height="15" fill="rgb(247,76,4)" fg:x="1318" fg:w="3"/><text x="71.6090%" y="527.50"></text></g><g><title>log4rs::ConfiguredLogger::find (1 samples, 0.05%)</title><rect x="71.4672%" y="501" width="0.0541%" height="15" fill="rgb(245,38,48)" fg:x="1320" fg:w="1"/><text x="71.7172%" y="511.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.05%)</title><rect x="71.4672%" y="485" width="0.0541%" height="15" fill="rgb(210,220,14)" fg:x="1320" fg:w="1"/><text x="71.7172%" y="495.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.05%)</title><rect x="71.4672%" y="469" width="0.0541%" height="15" fill="rgb(224,60,51)" fg:x="1320" fg:w="1"/><text x="71.7172%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.05%)</title><rect x="71.4672%" y="453" width="0.0541%" height="15" fill="rgb(212,133,49)" fg:x="1320" fg:w="1"/><text x="71.7172%" y="463.50"></text></g><g><title>&lt;observation::metrics::store_metrics::START_TIME as core::ops::deref::Deref&gt;::deref (1 samples, 0.05%)</title><rect x="75.1489%" y="469" width="0.0541%" height="15" fill="rgb(231,39,22)" fg:x="1388" fg:w="1"/><text x="75.3989%" y="479.50"></text></g><g><title>&lt;observation::metrics::store_metrics::STORE_APPEND_COUNT as core::ops::deref::Deref&gt;::deref (1 samples, 0.05%)</title><rect x="75.2030%" y="469" width="0.0541%" height="15" fill="rgb(236,173,22)" fg:x="1389" fg:w="1"/><text x="75.4530%" y="479.50"></text></g><g><title>__floattidf (1 samples, 0.05%)</title><rect x="75.2572%" y="469" width="0.0541%" height="15" fill="rgb(210,70,0)" fg:x="1390" fg:w="1"/><text x="75.5072%" y="479.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (1 samples, 0.05%)</title><rect x="75.2572%" y="453" width="0.0541%" height="15" fill="rgb(215,170,11)" fg:x="1390" fg:w="1"/><text x="75.5072%" y="463.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (1 samples, 0.05%)</title><rect x="75.2572%" y="437" width="0.0541%" height="15" fill="rgb(220,154,28)" fg:x="1390" fg:w="1"/><text x="75.5072%" y="447.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_shl (1 samples, 0.05%)</title><rect x="75.2572%" y="421" width="0.0541%" height="15" fill="rgb(240,160,41)" fg:x="1390" fg:w="1"/><text x="75.5072%" y="431.50"></text></g><g><title>core::num::&lt;impl u128&gt;::unchecked_shl (1 samples, 0.05%)</title><rect x="75.2572%" y="405" width="0.0541%" height="15" fill="rgb(243,215,41)" fg:x="1390" fg:w="1"/><text x="75.5072%" y="415.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify.3940 (6 samples, 0.32%)</title><rect x="75.3113%" y="469" width="0.3249%" height="15" fill="rgb(214,208,31)" fg:x="1391" fg:w="6"/><text x="75.5613%" y="479.50"></text></g><g><title>sdallocx (2 samples, 0.11%)</title><rect x="75.6362%" y="469" width="0.1083%" height="15" fill="rgb(247,57,22)" fg:x="1397" fg:w="2"/><text x="75.8862%" y="479.50"></text></g><g><title>free_fastpath (2 samples, 0.11%)</title><rect x="75.6362%" y="453" width="0.1083%" height="15" fill="rgb(228,73,52)" fg:x="1397" fg:w="2"/><text x="75.8862%" y="463.50"></text></g><g><title>tokio::runtime::coop::poll_proceed.1391 (2 samples, 0.11%)</title><rect x="75.7445%" y="469" width="0.1083%" height="15" fill="rgb(252,60,9)" fg:x="1399" fg:w="2"/><text x="75.9945%" y="479.50"></text></g><g><title>&lt;store::store::elastic_store::ElasticStore as store::Store&gt;::append::{{closure}} (32 samples, 1.73%)</title><rect x="74.1743%" y="485" width="1.7325%" height="15" fill="rgb(233,9,51)" fg:x="1370" fg:w="32"/><text x="74.4243%" y="495.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.05%)</title><rect x="75.8527%" y="469" width="0.0541%" height="15" fill="rgb(223,67,14)" fg:x="1401" fg:w="1"/><text x="76.1027%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="75.9069%" y="485" width="0.0541%" height="15" fill="rgb(222,86,2)" fg:x="1402" fg:w="1"/><text x="76.1569%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.05%)</title><rect x="75.9069%" y="469" width="0.0541%" height="15" fill="rgb(243,58,54)" fg:x="1402" fg:w="1"/><text x="76.1569%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::join_all::JoinAll&lt;&lt;store::store::elastic_store::ElasticStore as store::Store&gt;::append::{{closure}}&gt;&gt; (2 samples, 0.11%)</title><rect x="75.9610%" y="485" width="0.1083%" height="15" fill="rgb(210,200,39)" fg:x="1403" fg:w="2"/><text x="76.2110%" y="495.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="76.0693%" y="485" width="0.0541%" height="15" fill="rgb(238,135,9)" fg:x="1405" fg:w="1"/><text x="76.3193%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="76.0693%" y="469" width="0.0541%" height="15" fill="rgb(232,179,7)" fg:x="1405" fg:w="1"/><text x="76.3193%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="76.0693%" y="453" width="0.0541%" height="15" fill="rgb(245,65,41)" fg:x="1405" fg:w="1"/><text x="76.3193%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="76.0693%" y="437" width="0.0541%" height="15" fill="rgb(227,43,8)" fg:x="1405" fg:w="1"/><text x="76.3193%" y="447.50"></text></g><g><title>sdallocx (1 samples, 0.05%)</title><rect x="76.1234%" y="485" width="0.0541%" height="15" fill="rgb(235,91,14)" fg:x="1406" fg:w="1"/><text x="76.3734%" y="495.50"></text></g><g><title>free_fastpath (1 samples, 0.05%)</title><rect x="76.1234%" y="469" width="0.0541%" height="15" fill="rgb(235,219,31)" fg:x="1406" fg:w="1"/><text x="76.3734%" y="479.50"></text></g><g><title>&lt;store::store::buffer::store::BufferedStore&lt;S&gt; as store::Store&gt;::append::{{closure}} (61 samples, 3.30%)</title><rect x="73.4164%" y="501" width="3.3027%" height="15" fill="rgb(227,121,25)" fg:x="1356" fg:w="61"/><text x="73.6664%" y="511.50">&lt;st..</text></g><g><title>store::store::buffer::store::StoreBuffer::stream_buffer (10 samples, 0.54%)</title><rect x="76.1776%" y="485" width="0.5414%" height="15" fill="rgb(254,129,24)" fg:x="1407" fg:w="10"/><text x="76.4276%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.38%)</title><rect x="76.3400%" y="469" width="0.3790%" height="15" fill="rgb(226,144,49)" fg:x="1410" fg:w="7"/><text x="76.5900%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.22%)</title><rect x="76.5024%" y="453" width="0.2166%" height="15" fill="rgb(214,187,32)" fg:x="1413" fg:w="4"/><text x="76.7524%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.22%)</title><rect x="76.7190%" y="501" width="0.2166%" height="15" fill="rgb(243,129,46)" fg:x="1417" fg:w="4"/><text x="76.9690%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.11%)</title><rect x="76.8273%" y="485" width="0.1083%" height="15" fill="rgb(221,185,35)" fg:x="1419" fg:w="2"/><text x="77.0773%" y="495.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (83 samples, 4.49%)</title><rect x="72.7125%" y="517" width="4.4938%" height="15" fill="rgb(205,0,32)" fg:x="1343" fg:w="83"/><text x="72.9625%" y="527.50">&lt;core..</text></g><g><title>range_server::range_manager::window::Window::check_barrier (5 samples, 0.27%)</title><rect x="76.9356%" y="501" width="0.2707%" height="15" fill="rgb(229,179,12)" fg:x="1421" fg:w="5"/><text x="77.1856%" y="511.50"></text></g><g><title>&lt;object_storage::object_storage::AsyncObjectStorage as object_storage::ObjectStorage&gt;::new_commit (6 samples, 0.32%)</title><rect x="77.2063%" y="517" width="0.3249%" height="15" fill="rgb(252,107,19)" fg:x="1426" fg:w="6"/><text x="77.4563%" y="527.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.11%)</title><rect x="77.4228%" y="501" width="0.1083%" height="15" fill="rgb(220,95,27)" fg:x="1430" fg:w="2"/><text x="77.6728%" y="511.50"></text></g><g><title>&lt;store::store::buffer::store::BufferedStore&lt;S&gt; as store::Store&gt;::seal::{{closure}} (1 samples, 0.05%)</title><rect x="77.5311%" y="517" width="0.0541%" height="15" fill="rgb(240,113,40)" fg:x="1432" fg:w="1"/><text x="77.7811%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.38%)</title><rect x="77.5853%" y="517" width="0.3790%" height="15" fill="rgb(208,4,43)" fg:x="1433" fg:w="7"/><text x="77.8353%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="77.9101%" y="501" width="0.0541%" height="15" fill="rgb(247,189,30)" fg:x="1439" fg:w="1"/><text x="78.1601%" y="511.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="77.9101%" y="485" width="0.0541%" height="15" fill="rgb(231,157,17)" fg:x="1439" fg:w="1"/><text x="78.1601%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="77.9101%" y="469" width="0.0541%" height="15" fill="rgb(224,139,6)" fg:x="1439" fg:w="1"/><text x="78.1601%" y="479.50"></text></g><g><title>calloc (2 samples, 0.11%)</title><rect x="77.9643%" y="517" width="0.1083%" height="15" fill="rgb(223,83,16)" fg:x="1440" fg:w="2"/><text x="78.2143%" y="527.50"></text></g><g><title>chrono::offset::utc::Utc::now (5 samples, 0.27%)</title><rect x="78.0726%" y="517" width="0.2707%" height="15" fill="rgb(232,211,20)" fg:x="1442" fg:w="5"/><text x="78.3226%" y="527.50"></text></g><g><title>chrono::naive::internals::cycle_to_yo (1 samples, 0.05%)</title><rect x="78.2891%" y="501" width="0.0541%" height="15" fill="rgb(225,203,35)" fg:x="1446" fg:w="1"/><text x="78.5391%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.05%)</title><rect x="78.3433%" y="517" width="0.0541%" height="15" fill="rgb(215,211,44)" fg:x="1447" fg:w="1"/><text x="78.5933%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;&gt;&gt; (2 samples, 0.11%)</title><rect x="78.3974%" y="517" width="0.1083%" height="15" fill="rgb(248,213,26)" fg:x="1448" fg:w="2"/><text x="78.6474%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;flatbuffers::builder::FlatBufferBuilder&gt; (1 samples, 0.05%)</title><rect x="78.5057%" y="517" width="0.0541%" height="15" fill="rgb(214,23,52)" fg:x="1450" fg:w="1"/><text x="78.7557%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::join_all::JoinAll&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;range_server::handler::append::Append::apply&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="78.5598%" y="517" width="0.0541%" height="15" fill="rgb(225,173,50)" fg:x="1451" fg:w="1"/><text x="78.8098%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::create_vector (4 samples, 0.22%)</title><rect x="78.6140%" y="517" width="0.2166%" height="15" fill="rgb(206,150,22)" fg:x="1452" fg:w="4"/><text x="78.8640%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.2049 (2 samples, 0.11%)</title><rect x="78.7223%" y="501" width="0.1083%" height="15" fill="rgb(239,64,23)" fg:x="1454" fg:w="2"/><text x="78.9723%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.2049 (1 samples, 0.05%)</title><rect x="78.8305%" y="517" width="0.0541%" height="15" fill="rgb(242,50,38)" fg:x="1456" fg:w="1"/><text x="79.0805%" y="527.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="78.8847%" y="517" width="0.0541%" height="15" fill="rgb(217,91,15)" fg:x="1457" fg:w="1"/><text x="79.1347%" y="527.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="78.8847%" y="501" width="0.0541%" height="15" fill="rgb(230,172,6)" fg:x="1457" fg:w="1"/><text x="79.1347%" y="511.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="78.8847%" y="485" width="0.0541%" height="15" fill="rgb(221,98,26)" fg:x="1457" fg:w="1"/><text x="79.1347%" y="495.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="78.8847%" y="469" width="0.0541%" height="15" fill="rgb(227,210,45)" fg:x="1457" fg:w="1"/><text x="79.1347%" y="479.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push_slot (1 samples, 0.05%)</title><rect x="78.9388%" y="501" width="0.0541%" height="15" fill="rgb(206,8,30)" fg:x="1458" fg:w="1"/><text x="79.1888%" y="511.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (2 samples, 0.11%)</title><rect x="79.5885%" y="389" width="0.1083%" height="15" fill="rgb(241,219,17)" fg:x="1470" fg:w="2"/><text x="79.8385%" y="399.50"></text></g><g><title>protocol::rpc::header::AppendResponse::create (16 samples, 0.87%)</title><rect x="78.9388%" y="517" width="0.8663%" height="15" fill="rgb(247,121,29)" fg:x="1458" fg:w="16"/><text x="79.1888%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (15 samples, 0.81%)</title><rect x="78.9930%" y="501" width="0.8121%" height="15" fill="rgb(219,169,49)" fg:x="1459" fg:w="15"/><text x="79.2430%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.676 (15 samples, 0.81%)</title><rect x="78.9930%" y="485" width="0.8121%" height="15" fill="rgb(253,49,49)" fg:x="1459" fg:w="15"/><text x="79.2430%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.70%)</title><rect x="79.1012%" y="469" width="0.7038%" height="15" fill="rgb(217,178,3)" fg:x="1461" fg:w="13"/><text x="79.3512%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.60%)</title><rect x="79.2095%" y="453" width="0.5956%" height="15" fill="rgb(234,73,37)" fg:x="1463" fg:w="11"/><text x="79.4595%" y="463.50"></text></g><g><title>do_rallocx (10 samples, 0.54%)</title><rect x="79.2637%" y="437" width="0.5414%" height="15" fill="rgb(250,98,22)" fg:x="1464" fg:w="10"/><text x="79.5137%" y="447.50"></text></g><g><title>iralloct (5 samples, 0.27%)</title><rect x="79.5344%" y="421" width="0.2707%" height="15" fill="rgb(220,108,37)" fg:x="1469" fg:w="5"/><text x="79.7844%" y="431.50"></text></g><g><title>_rjem_je_arena_ralloc (5 samples, 0.27%)</title><rect x="79.5344%" y="405" width="0.2707%" height="15" fill="rgb(225,168,10)" fg:x="1469" fg:w="5"/><text x="79.7844%" y="415.50"></text></g><g><title>_rjem_je_hook_invoke_alloc (2 samples, 0.11%)</title><rect x="79.6968%" y="389" width="0.1083%" height="15" fill="rgb(247,215,21)" fg:x="1472" fg:w="2"/><text x="79.9468%" y="399.50"></text></g><g><title>atomic_load_u (2 samples, 0.11%)</title><rect x="79.6968%" y="373" width="0.1083%" height="15" fill="rgb(253,189,31)" fg:x="1472" fg:w="2"/><text x="79.9468%" y="383.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push (2 samples, 0.11%)</title><rect x="79.9134%" y="501" width="0.1083%" height="15" fill="rgb(241,54,22)" fg:x="1476" fg:w="2"/><text x="80.1634%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push_slot (1 samples, 0.05%)</title><rect x="80.0217%" y="501" width="0.0541%" height="15" fill="rgb(211,87,4)" fg:x="1478" fg:w="1"/><text x="80.2717%" y="511.50"></text></g><g><title>protocol::rpc::header::AppendResultEntry::create (7 samples, 0.38%)</title><rect x="79.8051%" y="517" width="0.3790%" height="15" fill="rgb(245,112,24)" fg:x="1474" fg:w="7"/><text x="80.0551%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::required (2 samples, 0.11%)</title><rect x="80.0758%" y="501" width="0.1083%" height="15" fill="rgb(235,190,41)" fg:x="1479" fg:w="2"/><text x="80.3258%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.05%)</title><rect x="80.1841%" y="501" width="0.0541%" height="15" fill="rgb(214,89,8)" fg:x="1481" fg:w="1"/><text x="80.4341%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="80.1841%" y="485" width="0.0541%" height="15" fill="rgb(249,155,35)" fg:x="1481" fg:w="1"/><text x="80.4341%" y="495.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="80.1841%" y="469" width="0.0541%" height="15" fill="rgb(249,88,26)" fg:x="1481" fg:w="1"/><text x="80.4341%" y="479.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="80.1841%" y="453" width="0.0541%" height="15" fill="rgb(232,56,8)" fg:x="1481" fg:w="1"/><text x="80.4341%" y="463.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="80.1841%" y="437" width="0.0541%" height="15" fill="rgb(240,95,3)" fg:x="1481" fg:w="1"/><text x="80.4341%" y="447.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="80.1841%" y="421" width="0.0541%" height="15" fill="rgb(222,44,28)" fg:x="1481" fg:w="1"/><text x="80.4341%" y="431.50"></text></g><g><title>protocol::rpc::header::Status::create (7 samples, 0.38%)</title><rect x="80.1841%" y="517" width="0.3790%" height="15" fill="rgb(234,16,30)" fg:x="1481" fg:w="7"/><text x="80.4341%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (6 samples, 0.32%)</title><rect x="80.2382%" y="501" width="0.3249%" height="15" fill="rgb(223,26,17)" fg:x="1482" fg:w="6"/><text x="80.4882%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.38%)</title><rect x="80.8879%" y="501" width="0.3790%" height="15" fill="rgb(239,187,47)" fg:x="1494" fg:w="7"/><text x="81.1379%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.22%)</title><rect x="81.0504%" y="485" width="0.2166%" height="15" fill="rgb(247,102,50)" fg:x="1497" fg:w="4"/><text x="81.3004%" y="495.50"></text></g><g><title>malloc (2 samples, 0.11%)</title><rect x="81.1586%" y="469" width="0.1083%" height="15" fill="rgb(231,216,22)" fg:x="1499" fg:w="2"/><text x="81.4086%" y="479.50"></text></g><g><title>imalloc_fastpath (2 samples, 0.11%)</title><rect x="81.1586%" y="453" width="0.1083%" height="15" fill="rgb(216,201,26)" fg:x="1499" fg:w="2"/><text x="81.4086%" y="463.50"></text></g><g><title>range_server::handler::append::Append::build_store_requests (14 samples, 0.76%)</title><rect x="80.5631%" y="517" width="0.7580%" height="15" fill="rgb(214,186,23)" fg:x="1488" fg:w="14"/><text x="80.8131%" y="527.50"></text></g><g><title>model::payload::Payload::parse_append_entry (1 samples, 0.05%)</title><rect x="81.2669%" y="501" width="0.0541%" height="15" fill="rgb(235,184,4)" fg:x="1501" fg:w="1"/><text x="81.5169%" y="511.50"></text></g><g><title>flatbuffers::verifier::Verifier::visit_table.1164 (1 samples, 0.05%)</title><rect x="81.2669%" y="485" width="0.0541%" height="15" fill="rgb(244,46,17)" fg:x="1501" fg:w="1"/><text x="81.5169%" y="495.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_i32 (4 samples, 0.22%)</title><rect x="81.5376%" y="485" width="0.2166%" height="15" fill="rgb(248,74,46)" fg:x="1506" fg:w="4"/><text x="81.7876%" y="495.50"></text></g><g><title>flatbuffers::table::Table::get (2 samples, 0.11%)</title><rect x="81.7542%" y="485" width="0.1083%" height="15" fill="rgb(243,79,5)" fg:x="1510" fg:w="2"/><text x="82.0042%" y="495.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (2 samples, 0.11%)</title><rect x="81.8625%" y="485" width="0.1083%" height="15" fill="rgb(213,148,1)" fg:x="1512" fg:w="2"/><text x="82.1125%" y="495.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::deref (1 samples, 0.05%)</title><rect x="81.9166%" y="469" width="0.0541%" height="15" fill="rgb(221,30,0)" fg:x="1513" fg:w="1"/><text x="82.1666%" y="479.50"></text></g><g><title>range_server::handler::append::Append::replicated (15 samples, 0.81%)</title><rect x="81.3211%" y="517" width="0.8121%" height="15" fill="rgb(207,85,29)" fg:x="1502" fg:w="15"/><text x="81.5711%" y="527.50"></text></g><g><title>model::payload::Payload::parse_append_entry (14 samples, 0.76%)</title><rect x="81.3752%" y="501" width="0.7580%" height="15" fill="rgb(239,31,46)" fg:x="1503" fg:w="14"/><text x="81.6252%" y="511.50"></text></g><g><title>flatbuffers::verifier::Verifier::visit_table.1164 (3 samples, 0.16%)</title><rect x="81.9708%" y="485" width="0.1624%" height="15" fill="rgb(219,6,1)" fg:x="1514" fg:w="3"/><text x="82.2208%" y="495.50"></text></g><g><title>range_server::range_manager::range::Range::commit::{{closure}} (4 samples, 0.22%)</title><rect x="82.1332%" y="517" width="0.2166%" height="15" fill="rgb(229,90,29)" fg:x="1517" fg:w="4"/><text x="82.3832%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::pop_first (1 samples, 0.05%)</title><rect x="82.2956%" y="501" width="0.0541%" height="15" fill="rgb(242,201,42)" fg:x="1520" fg:w="1"/><text x="82.5456%" y="511.50"></text></g><g><title>range_server::range_manager::stream::Stream::create_range (1 samples, 0.05%)</title><rect x="82.3498%" y="517" width="0.0541%" height="15" fill="rgb(243,80,54)" fg:x="1521" fg:w="1"/><text x="82.5998%" y="527.50"></text></g><g><title>range_server::handler::cmd::Command::apply::{{closure}} (202 samples, 10.94%)</title><rect x="71.5214%" y="533" width="10.9367%" height="15" fill="rgb(223,166,15)" fg:x="1321" fg:w="202"/><text x="71.7714%" y="543.50">range_server::ha..</text></g><g><title>range_server::range_manager::stream::Stream::seal (1 samples, 0.05%)</title><rect x="82.4039%" y="517" width="0.0541%" height="15" fill="rgb(238,78,27)" fg:x="1522" fg:w="1"/><text x="82.6539%" y="527.50"></text></g><g><title>&lt;log4rs::Logger as log::Log&gt;::log (1 samples, 0.05%)</title><rect x="82.4039%" y="501" width="0.0541%" height="15" fill="rgb(235,28,43)" fg:x="1522" fg:w="1"/><text x="82.6539%" y="511.50"></text></g><g><title>&lt;log4rs::append::rolling_file::RollingFileAppender as log4rs::append::Append&gt;::append (1 samples, 0.05%)</title><rect x="82.4039%" y="485" width="0.0541%" height="15" fill="rgb(240,210,28)" fg:x="1522" fg:w="1"/><text x="82.6539%" y="495.50"></text></g><g><title>&lt;log4rs::encode::pattern::PatternEncoder as log4rs::encode::Encode&gt;::encode (1 samples, 0.05%)</title><rect x="82.4039%" y="469" width="0.0541%" height="15" fill="rgb(253,6,46)" fg:x="1522" fg:w="1"/><text x="82.6539%" y="479.50"></text></g><g><title>log4rs::encode::pattern::Chunk::encode (1 samples, 0.05%)</title><rect x="82.4039%" y="453" width="0.0541%" height="15" fill="rgb(250,159,47)" fg:x="1522" fg:w="1"/><text x="82.6539%" y="463.50"></text></g><g><title>range_server::handler::cmd::Command::from_frame (9 samples, 0.49%)</title><rect x="82.4580%" y="533" width="0.4873%" height="15" fill="rgb(216,139,2)" fg:x="1523" fg:w="9"/><text x="82.7080%" y="543.50"></text></g><g><title>bytes::bytes::promotable_even_clone (5 samples, 0.27%)</title><rect x="82.6746%" y="517" width="0.2707%" height="15" fill="rgb(221,124,44)" fg:x="1527" fg:w="5"/><text x="82.9246%" y="527.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (3 samples, 0.16%)</title><rect x="82.7829%" y="501" width="0.1624%" height="15" fill="rgb(205,37,22)" fg:x="1529" fg:w="3"/><text x="83.0329%" y="511.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="82.8912%" y="485" width="0.0541%" height="15" fill="rgb(250,55,8)" fg:x="1531" fg:w="1"/><text x="83.1412%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="82.8912%" y="469" width="0.0541%" height="15" fill="rgb(215,83,48)" fg:x="1531" fg:w="1"/><text x="83.1412%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="82.8912%" y="453" width="0.0541%" height="15" fill="rgb(253,2,32)" fg:x="1531" fg:w="1"/><text x="83.1412%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="82.8912%" y="437" width="0.0541%" height="15" fill="rgb(236,67,28)" fg:x="1531" fg:w="1"/><text x="83.1412%" y="447.50"></text></g><g><title>alloc::ffi::c_str::CString::_from_vec_unchecked (1 samples, 0.05%)</title><rect x="83.1077%" y="517" width="0.0541%" height="15" fill="rgb(252,55,15)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.05%)</title><rect x="83.1077%" y="501" width="0.0541%" height="15" fill="rgb(243,173,17)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.05%)</title><rect x="83.1077%" y="485" width="0.0541%" height="15" fill="rgb(215,212,13)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.05%)</title><rect x="83.1077%" y="469" width="0.0541%" height="15" fill="rgb(253,176,6)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (1 samples, 0.05%)</title><rect x="83.1077%" y="453" width="0.0541%" height="15" fill="rgb(236,105,26)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::shrink (1 samples, 0.05%)</title><rect x="83.1077%" y="437" width="0.0541%" height="15" fill="rgb(239,226,32)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="447.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.05%)</title><rect x="83.1077%" y="421" width="0.0541%" height="15" fill="rgb(236,104,51)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="431.50"></text></g><g><title>do_rallocx (1 samples, 0.05%)</title><rect x="83.1077%" y="405" width="0.0541%" height="15" fill="rgb(220,172,33)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="415.50"></text></g><g><title>iralloct (1 samples, 0.05%)</title><rect x="83.1077%" y="389" width="0.0541%" height="15" fill="rgb(224,182,25)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="399.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.05%)</title><rect x="83.1077%" y="373" width="0.0541%" height="15" fill="rgb(236,184,24)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="383.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.05%)</title><rect x="83.1077%" y="357" width="0.0541%" height="15" fill="rgb(241,221,14)" fg:x="1535" fg:w="1"/><text x="83.3577%" y="367.50"></text></g><g><title>rustix::fs::at::_readlinkat (5 samples, 0.27%)</title><rect x="82.9453%" y="533" width="0.2707%" height="15" fill="rgb(227,146,5)" fg:x="1532" fg:w="5"/><text x="83.1953%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="83.1619%" y="517" width="0.0541%" height="15" fill="rgb(214,15,23)" fg:x="1536" fg:w="1"/><text x="83.4119%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="83.1619%" y="501" width="0.0541%" height="15" fill="rgb(233,157,31)" fg:x="1536" fg:w="1"/><text x="83.4119%" y="511.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="83.1619%" y="485" width="0.0541%" height="15" fill="rgb(211,27,52)" fg:x="1536" fg:w="1"/><text x="83.4119%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="83.1619%" y="469" width="0.0541%" height="15" fill="rgb(212,223,15)" fg:x="1536" fg:w="1"/><text x="83.4119%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="83.1619%" y="453" width="0.0541%" height="15" fill="rgb(254,211,0)" fg:x="1536" fg:w="1"/><text x="83.4119%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="83.1619%" y="437" width="0.0541%" height="15" fill="rgb(205,43,38)" fg:x="1536" fg:w="1"/><text x="83.4119%" y="447.50"></text></g><g><title>sdallocx (2 samples, 0.11%)</title><rect x="83.2160%" y="533" width="0.1083%" height="15" fill="rgb(242,206,46)" fg:x="1537" fg:w="2"/><text x="83.4660%" y="543.50"></text></g><g><title>free_fastpath (2 samples, 0.11%)</title><rect x="83.2160%" y="517" width="0.1083%" height="15" fill="rgb(220,221,12)" fg:x="1537" fg:w="2"/><text x="83.4660%" y="527.50"></text></g><g><title>sz_index2size (2 samples, 0.11%)</title><rect x="83.2160%" y="501" width="0.1083%" height="15" fill="rgb(217,156,35)" fg:x="1537" fg:w="2"/><text x="83.4660%" y="511.50"></text></g><g><title>sz_index2size_lookup (2 samples, 0.11%)</title><rect x="83.2160%" y="485" width="0.1083%" height="15" fill="rgb(207,181,49)" fg:x="1537" fg:w="2"/><text x="83.4660%" y="495.50"></text></g><g><title>sz_index2size_lookup_impl (2 samples, 0.11%)</title><rect x="83.2160%" y="469" width="0.1083%" height="15" fill="rgb(235,103,47)" fg:x="1537" fg:w="2"/><text x="83.4660%" y="479.50"></text></g><g><title>std::path::Path::_join (1 samples, 0.05%)</title><rect x="83.3243%" y="533" width="0.0541%" height="15" fill="rgb(222,63,28)" fg:x="1539" fg:w="1"/><text x="83.5743%" y="543.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 0.05%)</title><rect x="83.3243%" y="517" width="0.0541%" height="15" fill="rgb(244,137,21)" fg:x="1539" fg:w="1"/><text x="83.5743%" y="527.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.05%)</title><rect x="83.3243%" y="501" width="0.0541%" height="15" fill="rgb(228,35,27)" fg:x="1539" fg:w="1"/><text x="83.5743%" y="511.50"></text></g><g><title>std::path::Path::is_absolute (1 samples, 0.05%)</title><rect x="83.3243%" y="485" width="0.0541%" height="15" fill="rgb(226,191,41)" fg:x="1539" fg:w="1"/><text x="83.5743%" y="495.50"></text></g><g><title>std::path::Path::has_root (1 samples, 0.05%)</title><rect x="83.3243%" y="469" width="0.0541%" height="15" fill="rgb(210,154,3)" fg:x="1539" fg:w="1"/><text x="83.5743%" y="479.50"></text></g><g><title>std::path::Path::components (1 samples, 0.05%)</title><rect x="83.3243%" y="453" width="0.0541%" height="15" fill="rgb(216,60,49)" fg:x="1539" fg:w="1"/><text x="83.5743%" y="463.50"></text></g><g><title>std::path::has_physical_root (1 samples, 0.05%)</title><rect x="83.3243%" y="437" width="0.0541%" height="15" fill="rgb(226,17,20)" fg:x="1539" fg:w="1"/><text x="83.5743%" y="447.50"></text></g><g><title>std::sys::unix::path::is_sep_byte (1 samples, 0.05%)</title><rect x="83.3243%" y="421" width="0.0541%" height="15" fill="rgb(206,115,35)" fg:x="1539" fg:w="1"/><text x="83.5743%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.05%)</title><rect x="83.3785%" y="533" width="0.0541%" height="15" fill="rgb(227,88,1)" fg:x="1540" fg:w="1"/><text x="83.6285%" y="543.50"></text></g><g><title>&lt;flatbuffers::primitives::ForwardsUOffset&lt;T&gt; as flatbuffers::verifier::Verifiable&gt;::run_verifier (1 samples, 0.05%)</title><rect x="83.6492%" y="501" width="0.0541%" height="15" fill="rgb(230,222,24)" fg:x="1545" fg:w="1"/><text x="83.8992%" y="511.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (1 samples, 0.05%)</title><rect x="83.6492%" y="485" width="0.0541%" height="15" fill="rgb(214,124,32)" fg:x="1545" fg:w="1"/><text x="83.8992%" y="495.50"></text></g><g><title>flatbuffers::verifier::Verifier::get_uoffset (1 samples, 0.05%)</title><rect x="83.6492%" y="469" width="0.0541%" height="15" fill="rgb(240,41,36)" fg:x="1545" fg:w="1"/><text x="83.8992%" y="479.50"></text></g><g><title>client::response::Response::on_describe_placement_driver (2 samples, 0.11%)</title><rect x="83.6492%" y="517" width="0.1083%" height="15" fill="rgb(221,17,52)" fg:x="1545" fg:w="2"/><text x="83.8992%" y="527.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (1 samples, 0.05%)</title><rect x="83.7033%" y="501" width="0.0541%" height="15" fill="rgb(252,70,16)" fg:x="1546" fg:w="1"/><text x="83.9533%" y="511.50"></text></g><g><title>flatbuffers::verifier::Verifier::get_uoffset (1 samples, 0.05%)</title><rect x="83.7033%" y="485" width="0.0541%" height="15" fill="rgb(250,177,4)" fg:x="1546" fg:w="1"/><text x="83.9533%" y="495.50"></text></g><g><title>client::response::Response::on_report_metrics (1 samples, 0.05%)</title><rect x="83.7574%" y="517" width="0.0541%" height="15" fill="rgb(240,188,47)" fg:x="1547" fg:w="1"/><text x="84.0074%" y="527.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (1 samples, 0.05%)</title><rect x="83.7574%" y="501" width="0.0541%" height="15" fill="rgb(215,92,12)" fg:x="1547" fg:w="1"/><text x="84.0074%" y="511.50"></text></g><g><title>&lt;flatbuffers::primitives::ForwardsUOffset&lt;T&gt; as flatbuffers::verifier::Verifiable&gt;::run_verifier (1 samples, 0.05%)</title><rect x="83.7574%" y="485" width="0.0541%" height="15" fill="rgb(242,110,29)" fg:x="1547" fg:w="1"/><text x="84.0074%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::op::Op&lt;tokio_uring::io::read::Read&lt;bytes::bytes_mut::BytesMut&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="83.8116%" y="517" width="0.0541%" height="15" fill="rgb(208,211,26)" fg:x="1548" fg:w="1"/><text x="84.0616%" y="527.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (9 samples, 0.49%)</title><rect x="83.4326%" y="533" width="0.4873%" height="15" fill="rgb(244,147,6)" fg:x="1541" fg:w="9"/><text x="83.6826%" y="543.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (1 samples, 0.05%)</title><rect x="83.8657%" y="517" width="0.0541%" height="15" fill="rgb(211,130,42)" fg:x="1549" fg:w="1"/><text x="84.1157%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.11%)</title><rect x="83.9199%" y="533" width="0.1083%" height="15" fill="rgb(220,63,1)" fg:x="1550" fg:w="2"/><text x="84.1699%" y="543.50"></text></g><g><title>tokio::task::local::Shared::schedule (2 samples, 0.11%)</title><rect x="84.0282%" y="533" width="0.1083%" height="15" fill="rgb(241,212,30)" fg:x="1552" fg:w="2"/><text x="84.2782%" y="543.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (3 samples, 0.16%)</title><rect x="84.1364%" y="517" width="0.1624%" height="15" fill="rgb(233,153,17)" fg:x="1554" fg:w="3"/><text x="84.3864%" y="527.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (2 samples, 0.11%)</title><rect x="84.1906%" y="501" width="0.1083%" height="15" fill="rgb(236,3,10)" fg:x="1555" fg:w="2"/><text x="84.4406%" y="511.50"></text></g><g><title>tokio::time::interval::Interval::poll_tick (4 samples, 0.22%)</title><rect x="84.1364%" y="533" width="0.2166%" height="15" fill="rgb(232,41,21)" fg:x="1554" fg:w="4"/><text x="84.3864%" y="543.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.05%)</title><rect x="84.2989%" y="517" width="0.0541%" height="15" fill="rgb(206,63,51)" fg:x="1557" fg:w="1"/><text x="84.5489%" y="527.50"></text></g><g><title>tokio_uring::runtime::driver::Driver::dispatch_completions (4 samples, 0.22%)</title><rect x="84.3530%" y="533" width="0.2166%" height="15" fill="rgb(250,214,3)" fg:x="1558" fg:w="4"/><text x="84.6030%" y="543.50"></text></g><g><title>tokio_uring::runtime::driver::Ops::remove (1 samples, 0.05%)</title><rect x="84.5696%" y="533" width="0.0541%" height="15" fill="rgb(254,89,27)" fg:x="1562" fg:w="1"/><text x="84.8196%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_off (1 samples, 0.05%)</title><rect x="84.9486%" y="517" width="0.0541%" height="15" fill="rgb(249,41,14)" fg:x="1569" fg:w="1"/><text x="85.1986%" y="527.50"></text></g><g><title>bytes::bytes_mut::BytesMut::unsplit (3 samples, 0.16%)</title><rect x="85.0027%" y="517" width="0.1624%" height="15" fill="rgb(221,196,51)" fg:x="1570" fg:w="3"/><text x="85.2527%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio_uring::io::read::Read&lt;bytes::bytes_mut::BytesMut&gt;&gt;&gt; (2 samples, 0.11%)</title><rect x="85.1651%" y="517" width="0.1083%" height="15" fill="rgb(214,116,26)" fg:x="1573" fg:w="2"/><text x="85.4151%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::op::Op&lt;tokio_uring::io::read::Read&lt;bytes::bytes_mut::BytesMut&gt;&gt;&gt; (1 samples, 0.05%)</title><rect x="85.2734%" y="517" width="0.0541%" height="15" fill="rgb(236,67,7)" fg:x="1575" fg:w="1"/><text x="85.5234%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.05%)</title><rect x="85.3276%" y="517" width="0.0541%" height="15" fill="rgb(253,179,32)" fg:x="1576" fg:w="1"/><text x="85.5776%" y="527.50"></text></g><g><title>tokio_uring::runtime::driver::Ops::insert (2 samples, 0.11%)</title><rect x="85.3817%" y="517" width="0.1083%" height="15" fill="rgb(218,33,15)" fg:x="1577" fg:w="2"/><text x="85.6317%" y="527.50"></text></g><g><title>tokio_uring::runtime::driver::Ops::remove (2 samples, 0.11%)</title><rect x="85.4900%" y="517" width="0.1083%" height="15" fill="rgb(217,202,41)" fg:x="1579" fg:w="2"/><text x="85.7400%" y="527.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.05%)</title><rect x="86.1938%" y="501" width="0.0541%" height="15" fill="rgb(234,133,5)" fg:x="1592" fg:w="1"/><text x="86.4438%" y="511.50"></text></g><g><title>isfree (1 samples, 0.05%)</title><rect x="86.1938%" y="485" width="0.0541%" height="15" fill="rgb(240,47,40)" fg:x="1592" fg:w="1"/><text x="86.4438%" y="495.50"></text></g><g><title>thread_dalloc_event (1 samples, 0.05%)</title><rect x="86.1938%" y="469" width="0.0541%" height="15" fill="rgb(234,166,26)" fg:x="1592" fg:w="1"/><text x="86.4438%" y="479.50"></text></g><g><title>te_event_advance (1 samples, 0.05%)</title><rect x="86.1938%" y="453" width="0.0541%" height="15" fill="rgb(244,125,51)" fg:x="1592" fg:w="1"/><text x="86.4438%" y="463.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.05%)</title><rect x="86.1938%" y="437" width="0.0541%" height="15" fill="rgb(229,171,11)" fg:x="1592" fg:w="1"/><text x="86.4438%" y="447.50"></text></g><g><title>te_adjust_thresholds_helper (1 samples, 0.05%)</title><rect x="86.1938%" y="421" width="0.0541%" height="15" fill="rgb(224,38,45)" fg:x="1592" fg:w="1"/><text x="86.4438%" y="431.50"></text></g><g><title>te_ctx_next_event_set (1 samples, 0.05%)</title><rect x="86.1938%" y="405" width="0.0541%" height="15" fill="rgb(237,27,7)" fg:x="1592" fg:w="1"/><text x="86.4438%" y="415.50"></text></g><g><title>_rjem_je_tcache_postfork_child (1 samples, 0.05%)</title><rect x="86.1938%" y="389" width="0.0541%" height="15" fill="rgb(216,52,7)" fg:x="1592" fg:w="1"/><text x="86.4438%" y="399.50"></text></g><g><title>_rjem_je_malloc_default (1 samples, 0.05%)</title><rect x="86.4645%" y="485" width="0.0541%" height="15" fill="rgb(243,11,11)" fg:x="1597" fg:w="1"/><text x="86.7145%" y="495.50"></text></g><g><title>imalloc (1 samples, 0.05%)</title><rect x="86.4645%" y="469" width="0.0541%" height="15" fill="rgb(253,167,20)" fg:x="1597" fg:w="1"/><text x="86.7145%" y="479.50"></text></g><g><title>imalloc_body (1 samples, 0.05%)</title><rect x="86.4645%" y="453" width="0.0541%" height="15" fill="rgb(215,207,5)" fg:x="1597" fg:w="1"/><text x="86.7145%" y="463.50"></text></g><g><title>thread_alloc_event (1 samples, 0.05%)</title><rect x="86.4645%" y="437" width="0.0541%" height="15" fill="rgb(252,127,31)" fg:x="1597" fg:w="1"/><text x="86.7145%" y="447.50"></text></g><g><title>te_event_advance (1 samples, 0.05%)</title><rect x="86.4645%" y="421" width="0.0541%" height="15" fill="rgb(209,106,27)" fg:x="1597" fg:w="1"/><text x="86.7145%" y="431.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.05%)</title><rect x="86.4645%" y="405" width="0.0541%" height="15" fill="rgb(214,220,18)" fg:x="1597" fg:w="1"/><text x="86.7145%" y="415.50"></text></g><g><title>_rjem_je_tcache_gc_event_handler (1 samples, 0.05%)</title><rect x="86.4645%" y="389" width="0.0541%" height="15" fill="rgb(237,89,12)" fg:x="1597" fg:w="1"/><text x="86.7145%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (1 samples, 0.05%)</title><rect x="86.5187%" y="485" width="0.0541%" height="15" fill="rgb(209,167,36)" fg:x="1598" fg:w="1"/><text x="86.7687%" y="495.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_bytes (13 samples, 0.70%)</title><rect x="86.2480%" y="501" width="0.7038%" height="15" fill="rgb(243,45,22)" fg:x="1593" fg:w="13"/><text x="86.4980%" y="511.50"></text></g><g><title>malloc (7 samples, 0.38%)</title><rect x="86.5728%" y="485" width="0.3790%" height="15" fill="rgb(239,2,46)" fg:x="1599" fg:w="7"/><text x="86.8228%" y="495.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u32 (2 samples, 0.11%)</title><rect x="86.9518%" y="501" width="0.1083%" height="15" fill="rgb(241,101,0)" fg:x="1606" fg:w="2"/><text x="87.2018%" y="511.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (20 samples, 1.08%)</title><rect x="87.0601%" y="501" width="1.0828%" height="15" fill="rgb(244,34,31)" fg:x="1608" fg:w="20"/><text x="87.3101%" y="511.50"></text></g><g><title>crc32fast::hash (3 samples, 0.16%)</title><rect x="88.1429%" y="501" width="0.1624%" height="15" fill="rgb(248,23,22)" fg:x="1628" fg:w="3"/><text x="88.3929%" y="511.50"></text></g><g><title>transport::connection::Connection::read_frame::{{closure}} (69 samples, 3.74%)</title><rect x="84.6237%" y="533" width="3.7358%" height="15" fill="rgb(218,27,48)" fg:x="1563" fg:w="69"/><text x="84.8737%" y="543.50">tran..</text></g><g><title>transport::connection::Connection::parse_frame (51 samples, 2.76%)</title><rect x="85.5983%" y="517" width="2.7612%" height="15" fill="rgb(232,78,1)" fg:x="1581" fg:w="51"/><text x="85.8483%" y="527.50">tr..</text></g><g><title>sdallocx (1 samples, 0.05%)</title><rect x="88.3054%" y="501" width="0.0541%" height="15" fill="rgb(233,169,12)" fg:x="1631" fg:w="1"/><text x="88.5554%" y="511.50"></text></g><g><title>free_fastpath (1 samples, 0.05%)</title><rect x="88.3054%" y="485" width="0.0541%" height="15" fill="rgb(225,222,54)" fg:x="1631" fg:w="1"/><text x="88.5554%" y="495.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.05%)</title><rect x="88.3054%" y="469" width="0.0541%" height="15" fill="rgb(245,126,29)" fg:x="1631" fg:w="1"/><text x="88.5554%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;local_sync::oneshot::Inner&lt;core::result::Result&lt;(),transport::error::ConnectionError&gt;&gt;&gt;&gt;&gt; (5 samples, 0.27%)</title><rect x="88.6844%" y="517" width="0.2707%" height="15" fill="rgb(241,63,48)" fg:x="1638" fg:w="5"/><text x="88.9344%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (3 samples, 0.16%)</title><rect x="88.7926%" y="501" width="0.1624%" height="15" fill="rgb(235,126,38)" fg:x="1640" fg:w="3"/><text x="89.0426%" y="511.50"></text></g><g><title>RangeServer[Pri (805 samples, 43.58%)</title><rect x="45.4792%" y="677" width="43.5842%" height="15" fill="rgb(232,96,49)" fg:x="840" fg:w="805"/><text x="45.7292%" y="687.50">RangeServer[Pri</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (805 samples, 43.58%)</title><rect x="45.4792%" y="661" width="43.5842%" height="15" fill="rgb(211,146,40)" fg:x="840" fg:w="805"/><text x="45.7292%" y="671.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (805 samples, 43.58%)</title><rect x="45.4792%" y="645" width="43.5842%" height="15" fill="rgb(247,93,44)" fg:x="840" fg:w="805"/><text x="45.7292%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (805 samples, 43.58%)</title><rect x="45.4792%" y="629" width="43.5842%" height="15" fill="rgb(251,41,49)" fg:x="840" fg:w="805"/><text x="45.7292%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (805 samples, 43.58%)</title><rect x="45.4792%" y="613" width="43.5842%" height="15" fill="rgb(218,155,12)" fg:x="840" fg:w="805"/><text x="45.7292%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (805 samples, 43.58%)</title><rect x="45.4792%" y="597" width="43.5842%" height="15" fill="rgb(221,161,30)" fg:x="840" fg:w="805"/><text x="45.7292%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (650 samples, 35.19%)</title><rect x="53.8711%" y="581" width="35.1922%" height="15" fill="rgb(221,179,11)" fg:x="995" fg:w="650"/><text x="54.1211%" y="591.50">tokio::task::local::LocalSet::run_until::{{closure}}</text></g><g><title>tokio::task::local::LocalSet::tick (602 samples, 32.59%)</title><rect x="56.4700%" y="565" width="32.5934%" height="15" fill="rgb(224,170,48)" fg:x="1043" fg:w="602"/><text x="56.7200%" y="575.50">tokio::task::local::LocalSet::tick</text></g><g><title>tokio::runtime::task::raw::poll (591 samples, 32.00%)</title><rect x="57.0655%" y="549" width="31.9978%" height="15" fill="rgb(223,117,5)" fg:x="1054" fg:w="591"/><text x="57.3155%" y="559.50">tokio::runtime::task::raw::poll</text></g><g><title>transport::connection::Connection::write_frame::{{closure}} (13 samples, 0.70%)</title><rect x="88.3595%" y="533" width="0.7038%" height="15" fill="rgb(209,52,20)" fg:x="1632" fg:w="13"/><text x="88.6095%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.11%)</title><rect x="88.9551%" y="517" width="0.1083%" height="15" fill="rgb(209,19,41)" fg:x="1643" fg:w="2"/><text x="89.2051%" y="527.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.05%)</title><rect x="89.1175%" y="517" width="0.0541%" height="15" fill="rgb(210,177,12)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.05%)</title><rect x="89.1175%" y="501" width="0.0541%" height="15" fill="rgb(211,159,37)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="89.1175%" y="485" width="0.0541%" height="15" fill="rgb(209,20,2)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="495.50"></text></g><g><title>do_rallocx (1 samples, 0.05%)</title><rect x="89.1175%" y="469" width="0.0541%" height="15" fill="rgb(244,3,46)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="479.50"></text></g><g><title>iralloct (1 samples, 0.05%)</title><rect x="89.1175%" y="453" width="0.0541%" height="15" fill="rgb(220,94,38)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="463.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.05%)</title><rect x="89.1175%" y="437" width="0.0541%" height="15" fill="rgb(253,14,31)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="447.50"></text></g><g><title>arena_ralloc_move_helper (1 samples, 0.05%)</title><rect x="89.1175%" y="421" width="0.0541%" height="15" fill="rgb(234,176,13)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="431.50"></text></g><g><title>arena_malloc (1 samples, 0.05%)</title><rect x="89.1175%" y="405" width="0.0541%" height="15" fill="rgb(218,62,25)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="415.50"></text></g><g><title>tcache_alloc_small (1 samples, 0.05%)</title><rect x="89.1175%" y="389" width="0.0541%" height="15" fill="rgb(216,124,40)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="399.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.05%)</title><rect x="89.1175%" y="373" width="0.0541%" height="15" fill="rgb(228,170,12)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="383.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.05%)</title><rect x="89.1175%" y="357" width="0.0541%" height="15" fill="rgb(231,226,5)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="367.50"></text></g><g><title>arena_slab_alloc (1 samples, 0.05%)</title><rect x="89.1175%" y="341" width="0.0541%" height="15" fill="rgb(237,122,22)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="351.50"></text></g><g><title>_rjem_je_pa_alloc (1 samples, 0.05%)</title><rect x="89.1175%" y="325" width="0.0541%" height="15" fill="rgb(209,185,25)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="335.50"></text></g><g><title>pai_alloc (1 samples, 0.05%)</title><rect x="89.1175%" y="309" width="0.0541%" height="15" fill="rgb(228,200,32)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="319.50"></text></g><g><title>pac_alloc_impl (1 samples, 0.05%)</title><rect x="89.1175%" y="293" width="0.0541%" height="15" fill="rgb(217,140,10)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="303.50"></text></g><g><title>pac_alloc_real (1 samples, 0.05%)</title><rect x="89.1175%" y="277" width="0.0541%" height="15" fill="rgb(253,17,24)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="287.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.05%)</title><rect x="89.1175%" y="261" width="0.0541%" height="15" fill="rgb(212,61,6)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="271.50"></text></g><g><title>extent_recycle (1 samples, 0.05%)</title><rect x="89.1175%" y="245" width="0.0541%" height="15" fill="rgb(205,14,25)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="255.50"></text></g><g><title>extent_recycle_split (1 samples, 0.05%)</title><rect x="89.1175%" y="229" width="0.0541%" height="15" fill="rgb(232,69,41)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="239.50"></text></g><g><title>extent_split_interior (1 samples, 0.05%)</title><rect x="89.1175%" y="213" width="0.0541%" height="15" fill="rgb(241,106,47)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="223.50"></text></g><g><title>extent_split_impl (1 samples, 0.05%)</title><rect x="89.1175%" y="197" width="0.0541%" height="15" fill="rgb(210,213,53)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="207.50"></text></g><g><title>_rjem_je_base_alloc_edata (1 samples, 0.05%)</title><rect x="89.1175%" y="181" width="0.0541%" height="15" fill="rgb(253,175,27)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="191.50"></text></g><g><title>edata_esn_set (1 samples, 0.05%)</title><rect x="89.1175%" y="165" width="0.0541%" height="15" fill="rgb(211,171,24)" fg:x="1646" fg:w="1"/><text x="89.3675%" y="175.50"></text></g><g><title>iralloct (1 samples, 0.05%)</title><rect x="89.2799%" y="101" width="0.0541%" height="15" fill="rgb(229,80,7)" fg:x="1649" fg:w="1"/><text x="89.5299%" y="111.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.05%)</title><rect x="89.2799%" y="85" width="0.0541%" height="15" fill="rgb(212,46,39)" fg:x="1649" fg:w="1"/><text x="89.5299%" y="95.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.22%)</title><rect x="89.2258%" y="501" width="0.2166%" height="15" fill="rgb(240,80,45)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.22%)</title><rect x="89.2258%" y="485" width="0.2166%" height="15" fill="rgb(253,177,40)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="495.50"></text></g><g><title>core::fmt::write (4 samples, 0.22%)</title><rect x="89.2258%" y="469" width="0.2166%" height="15" fill="rgb(249,200,15)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="479.50"></text></g><g><title>core::fmt::run (4 samples, 0.22%)</title><rect x="89.2258%" y="453" width="0.2166%" height="15" fill="rgb(217,78,26)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.22%)</title><rect x="89.2258%" y="437" width="0.2166%" height="15" fill="rgb(254,151,32)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="447.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (4 samples, 0.22%)</title><rect x="89.2258%" y="421" width="0.2166%" height="15" fill="rgb(226,165,27)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="431.50"></text></g><g><title>core::fmt::write (4 samples, 0.22%)</title><rect x="89.2258%" y="405" width="0.2166%" height="15" fill="rgb(250,206,4)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="415.50"></text></g><g><title>core::fmt::run (4 samples, 0.22%)</title><rect x="89.2258%" y="389" width="0.2166%" height="15" fill="rgb(231,229,27)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.22%)</title><rect x="89.2258%" y="373" width="0.2166%" height="15" fill="rgb(239,217,8)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (4 samples, 0.22%)</title><rect x="89.2258%" y="357" width="0.2166%" height="15" fill="rgb(225,204,27)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.22%)</title><rect x="89.2258%" y="341" width="0.2166%" height="15" fill="rgb(230,56,32)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.22%)</title><rect x="89.2258%" y="325" width="0.2166%" height="15" fill="rgb(222,56,27)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="335.50"></text></g><g><title>alloc::string::String::push_str (4 samples, 0.22%)</title><rect x="89.2258%" y="309" width="0.2166%" height="15" fill="rgb(253,108,27)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.22%)</title><rect x="89.2258%" y="293" width="0.2166%" height="15" fill="rgb(212,87,36)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.22%)</title><rect x="89.2258%" y="277" width="0.2166%" height="15" fill="rgb(247,82,36)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.22%)</title><rect x="89.2258%" y="261" width="0.2166%" height="15" fill="rgb(222,143,9)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.22%)</title><rect x="89.2258%" y="245" width="0.2166%" height="15" fill="rgb(238,162,48)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.22%)</title><rect x="89.2258%" y="229" width="0.2166%" height="15" fill="rgb(221,59,43)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.22%)</title><rect x="89.2258%" y="213" width="0.2166%" height="15" fill="rgb(205,166,41)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.22%)</title><rect x="89.2258%" y="197" width="0.2166%" height="15" fill="rgb(241,186,40)" fg:x="1648" fg:w="4"/><text x="89.4758%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.16%)</title><rect x="89.2799%" y="181" width="0.1624%" height="15" fill="rgb(216,119,35)" fg:x="1649" fg:w="3"/><text x="89.5299%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.16%)</title><rect x="89.2799%" y="165" width="0.1624%" height="15" fill="rgb(208,68,38)" fg:x="1649" fg:w="3"/><text x="89.5299%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.16%)</title><rect x="89.2799%" y="149" width="0.1624%" height="15" fill="rgb(217,113,1)" fg:x="1649" fg:w="3"/><text x="89.5299%" y="159.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.16%)</title><rect x="89.2799%" y="133" width="0.1624%" height="15" fill="rgb(242,153,3)" fg:x="1649" fg:w="3"/><text x="89.5299%" y="143.50"></text></g><g><title>do_rallocx (3 samples, 0.16%)</title><rect x="89.2799%" y="117" width="0.1624%" height="15" fill="rgb(229,76,35)" fg:x="1649" fg:w="3"/><text x="89.5299%" y="127.50"></text></g><g><title>thread_alloc_event (2 samples, 0.11%)</title><rect x="89.3341%" y="101" width="0.1083%" height="15" fill="rgb(229,125,34)" fg:x="1650" fg:w="2"/><text x="89.5841%" y="111.50"></text></g><g><title>te_event_advance (2 samples, 0.11%)</title><rect x="89.3341%" y="85" width="0.1083%" height="15" fill="rgb(238,179,36)" fg:x="1650" fg:w="2"/><text x="89.5841%" y="95.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.05%)</title><rect x="89.4423%" y="501" width="0.0541%" height="15" fill="rgb(244,183,19)" fg:x="1652" fg:w="1"/><text x="89.6923%" y="511.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.05%)</title><rect x="89.4423%" y="485" width="0.0541%" height="15" fill="rgb(216,85,49)" fg:x="1652" fg:w="1"/><text x="89.6923%" y="495.50"></text></g><g><title>rustc_demangle::try_demangle (3 samples, 0.16%)</title><rect x="89.4965%" y="501" width="0.1624%" height="15" fill="rgb(208,161,47)" fg:x="1653" fg:w="3"/><text x="89.7465%" y="511.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.6589%" y="405" width="0.0541%" height="15" fill="rgb(233,210,18)" fg:x="1656" fg:w="1"/><text x="89.9089%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.6589%" y="389" width="0.0541%" height="15" fill="rgb(205,104,42)" fg:x="1656" fg:w="1"/><text x="89.9089%" y="399.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.6589%" y="373" width="0.0541%" height="15" fill="rgb(248,90,43)" fg:x="1656" fg:w="1"/><text x="89.9089%" y="383.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.6589%" y="357" width="0.0541%" height="15" fill="rgb(206,198,11)" fg:x="1656" fg:w="1"/><text x="89.9089%" y="367.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::DemangleAsInner&lt;W&gt;&gt;::demangle_as_inner (1 samples, 0.05%)</title><rect x="89.6589%" y="341" width="0.0541%" height="15" fill="rgb(239,165,27)" fg:x="1656" fg:w="1"/><text x="89.9089%" y="351.50"></text></g><g><title>&lt;cpp_demangle::ast::FunctionArgSlice as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (2 samples, 0.11%)</title><rect x="89.6589%" y="421" width="0.1083%" height="15" fill="rgb(246,44,32)" fg:x="1656" fg:w="2"/><text x="89.9089%" y="431.50"></text></g><g><title>&lt;cpp_demangle::subs::Substitutable as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.7130%" y="405" width="0.0541%" height="15" fill="rgb(252,65,42)" fg:x="1657" fg:w="1"/><text x="89.9630%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::Encoding as cpp_demangle::ast::DemangleAsInner&lt;W&gt;&gt;::demangle_as_inner (3 samples, 0.16%)</title><rect x="89.6589%" y="437" width="0.1624%" height="15" fill="rgb(246,197,18)" fg:x="1656" fg:w="3"/><text x="89.9089%" y="447.50"></text></g><g><title>cpp_demangle::ast::DemangleAsInner::demangle_as_inner (1 samples, 0.05%)</title><rect x="89.7672%" y="421" width="0.0541%" height="15" fill="rgb(216,192,4)" fg:x="1658" fg:w="1"/><text x="90.0172%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::UnqualifiedName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.8213%" y="437" width="0.0541%" height="15" fill="rgb(208,117,10)" fg:x="1659" fg:w="1"/><text x="90.0713%" y="447.50"></text></g><g><title>&lt;cpp_demangle::ast::SourceName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.8213%" y="421" width="0.0541%" height="15" fill="rgb(240,61,47)" fg:x="1659" fg:w="1"/><text x="90.0713%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::UnqualifiedName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.8755%" y="421" width="0.0541%" height="15" fill="rgb(228,178,21)" fg:x="1660" fg:w="1"/><text x="90.1255%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::SourceName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.8755%" y="405" width="0.0541%" height="15" fill="rgb(219,96,54)" fg:x="1660" fg:w="1"/><text x="90.1255%" y="415.50"></text></g><g><title>core::fmt::write (1 samples, 0.05%)</title><rect x="89.8755%" y="389" width="0.0541%" height="15" fill="rgb(250,177,24)" fg:x="1660" fg:w="1"/><text x="90.1255%" y="399.50"></text></g><g><title>&lt;cpp_demangle::ast::MangledName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (6 samples, 0.32%)</title><rect x="89.6589%" y="485" width="0.3249%" height="15" fill="rgb(242,154,46)" fg:x="1656" fg:w="6"/><text x="89.9089%" y="495.50"></text></g><g><title>&lt;cpp_demangle::ast::Encoding as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (6 samples, 0.32%)</title><rect x="89.6589%" y="469" width="0.3249%" height="15" fill="rgb(226,176,29)" fg:x="1656" fg:w="6"/><text x="89.9089%" y="479.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (6 samples, 0.32%)</title><rect x="89.6589%" y="453" width="0.3249%" height="15" fill="rgb(226,29,2)" fg:x="1656" fg:w="6"/><text x="89.9089%" y="463.50"></text></g><g><title>&lt;cpp_demangle::subs::Substitutable as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (2 samples, 0.11%)</title><rect x="89.8755%" y="437" width="0.1083%" height="15" fill="rgb(237,104,14)" fg:x="1660" fg:w="2"/><text x="90.1255%" y="447.50"></text></g><g><title>&lt;cpp_demangle::subs::Substitutable as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.9296%" y="421" width="0.0541%" height="15" fill="rgb(245,207,31)" fg:x="1661" fg:w="1"/><text x="90.1796%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::UnqualifiedName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.9296%" y="405" width="0.0541%" height="15" fill="rgb(229,211,45)" fg:x="1661" fg:w="1"/><text x="90.1796%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::SourceName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.05%)</title><rect x="89.9296%" y="389" width="0.0541%" height="15" fill="rgb(229,113,15)" fg:x="1661" fg:w="1"/><text x="90.1796%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.05%)</title><rect x="89.9296%" y="373" width="0.0541%" height="15" fill="rgb(237,147,15)" fg:x="1661" fg:w="1"/><text x="90.1796%" y="383.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.05%)</title><rect x="90.0379%" y="389" width="0.0541%" height="15" fill="rgb(244,120,12)" fg:x="1663" fg:w="1"/><text x="90.2879%" y="399.50"></text></g><g><title>&lt;cpp_demangle::ast::PrefixHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.05%)</title><rect x="90.0379%" y="373" width="0.0541%" height="15" fill="rgb(205,120,12)" fg:x="1663" fg:w="1"/><text x="90.2879%" y="383.50"></text></g><g><title>&lt;cpp_demangle::ast::SourceName as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.05%)</title><rect x="90.0379%" y="357" width="0.0541%" height="15" fill="rgb(231,26,45)" fg:x="1663" fg:w="1"/><text x="90.2879%" y="367.50"></text></g><g><title>&lt;cpp_demangle::ast::TypeHandle as cpp_demangle::ast::Parse&gt;::parse (3 samples, 0.16%)</title><rect x="89.9838%" y="421" width="0.1624%" height="15" fill="rgb(246,98,1)" fg:x="1662" fg:w="3"/><text x="90.2338%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::TypeHandle as cpp_demangle::ast::Parse&gt;::parse (2 samples, 0.11%)</title><rect x="90.0379%" y="405" width="0.1083%" height="15" fill="rgb(207,68,45)" fg:x="1663" fg:w="2"/><text x="90.2879%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::TypeHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.05%)</title><rect x="90.0920%" y="389" width="0.0541%" height="15" fill="rgb(231,27,38)" fg:x="1664" fg:w="1"/><text x="90.3420%" y="399.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.05%)</title><rect x="90.0920%" y="373" width="0.0541%" height="15" fill="rgb(214,223,3)" fg:x="1664" fg:w="1"/><text x="90.3420%" y="383.50"></text></g><g><title>&lt;cpp_demangle::ast::PrefixHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.05%)</title><rect x="90.0920%" y="357" width="0.0541%" height="15" fill="rgb(228,195,46)" fg:x="1664" fg:w="1"/><text x="90.3420%" y="367.50"></text></g><g><title>&lt;cpp_demangle::ast::BareFunctionType as cpp_demangle::ast::Parse&gt;::parse (4 samples, 0.22%)</title><rect x="89.9838%" y="453" width="0.2166%" height="15" fill="rgb(231,100,42)" fg:x="1662" fg:w="4"/><text x="90.2338%" y="463.50"></text></g><g><title>cpp_demangle::ast::one_or_more (4 samples, 0.22%)</title><rect x="89.9838%" y="437" width="0.2166%" height="15" fill="rgb(236,53,4)" fg:x="1662" fg:w="4"/><text x="90.2338%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.05%)</title><rect x="90.1462%" y="421" width="0.0541%" height="15" fill="rgb(230,152,12)" fg:x="1665" fg:w="1"/><text x="90.3962%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.05%)</title><rect x="90.1462%" y="405" width="0.0541%" height="15" fill="rgb(226,101,19)" fg:x="1665" fg:w="1"/><text x="90.3962%" y="415.50"></text></g><g><title>do_rallocx (1 samples, 0.05%)</title><rect x="90.1462%" y="389" width="0.0541%" height="15" fill="rgb(250,149,32)" fg:x="1665" fg:w="1"/><text x="90.3962%" y="399.50"></text></g><g><title>thread_alloc_event (1 samples, 0.05%)</title><rect x="90.1462%" y="373" width="0.0541%" height="15" fill="rgb(232,178,12)" fg:x="1665" fg:w="1"/><text x="90.3962%" y="383.50"></text></g><g><title>te_event_advance (1 samples, 0.05%)</title><rect x="90.1462%" y="357" width="0.0541%" height="15" fill="rgb(246,151,17)" fg:x="1665" fg:w="1"/><text x="90.3962%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (22 samples, 1.19%)</title><rect x="89.0633%" y="581" width="1.1911%" height="15" fill="rgb(252,17,51)" fg:x="1645" fg:w="22"/><text x="89.3133%" y="591.50"></text></g><g><title>core::fmt::write (21 samples, 1.14%)</title><rect x="89.1175%" y="565" width="1.1370%" height="15" fill="rgb(250,207,23)" fg:x="1646" fg:w="21"/><text x="89.3675%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (21 samples, 1.14%)</title><rect x="89.1175%" y="549" width="1.1370%" height="15" fill="rgb(205,27,5)" fg:x="1646" fg:w="21"/><text x="89.3675%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (21 samples, 1.14%)</title><rect x="89.1175%" y="533" width="1.1370%" height="15" fill="rgb(224,32,19)" fg:x="1646" fg:w="21"/><text x="89.3675%" y="543.50"></text></g><g><title>pprof::frames::Symbol::name (20 samples, 1.08%)</title><rect x="89.1716%" y="517" width="1.0828%" height="15" fill="rgb(247,214,40)" fg:x="1647" fg:w="20"/><text x="89.4216%" y="527.50"></text></g><g><title>symbolic_demangle::try_demangle_cpp (11 samples, 0.60%)</title><rect x="89.6589%" y="501" width="0.5956%" height="15" fill="rgb(239,199,17)" fg:x="1656" fg:w="11"/><text x="89.9089%" y="511.50"></text></g><g><title>&lt;cpp_demangle::ast::MangledName as cpp_demangle::ast::Parse&gt;::parse (5 samples, 0.27%)</title><rect x="89.9838%" y="485" width="0.2707%" height="15" fill="rgb(251,159,9)" fg:x="1662" fg:w="5"/><text x="90.2338%" y="495.50"></text></g><g><title>&lt;cpp_demangle::ast::Encoding as cpp_demangle::ast::Parse&gt;::parse (5 samples, 0.27%)</title><rect x="89.9838%" y="469" width="0.2707%" height="15" fill="rgb(225,78,32)" fg:x="1662" fg:w="5"/><text x="90.2338%" y="479.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.05%)</title><rect x="90.2003%" y="453" width="0.0541%" height="15" fill="rgb(206,97,47)" fg:x="1666" fg:w="1"/><text x="90.4503%" y="463.50"></text></g><g><title>&lt;str_stack::Writer as core::ops::drop::Drop&gt;::drop (1 samples, 0.05%)</title><rect x="90.3086%" y="565" width="0.0541%" height="15" fill="rgb(227,107,4)" fg:x="1668" fg:w="1"/><text x="90.5586%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.05%)</title><rect x="90.3628%" y="565" width="0.0541%" height="15" fill="rgb(241,146,50)" fg:x="1669" fg:w="1"/><text x="90.6128%" y="575.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.05%)</title><rect x="90.3628%" y="549" width="0.0541%" height="15" fill="rgb(232,92,30)" fg:x="1669" fg:w="1"/><text x="90.6128%" y="559.50"></text></g><g><title>inferno::flamegraph::color::color (1 samples, 0.05%)</title><rect x="90.4169%" y="565" width="0.0541%" height="15" fill="rgb(222,0,40)" fg:x="1670" fg:w="1"/><text x="90.6669%" y="575.50"></text></g><g><title>inferno::flamegraph::merge::frames (3 samples, 0.16%)</title><rect x="90.4710%" y="565" width="0.1624%" height="15" fill="rgb(219,54,33)" fg:x="1671" fg:w="3"/><text x="90.7210%" y="575.50"></text></g><g><title>inferno::flamegraph::merge::flow (3 samples, 0.16%)</title><rect x="90.4710%" y="549" width="0.1624%" height="15" fill="rgb(226,209,28)" fg:x="1671" fg:w="3"/><text x="90.7210%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.11%)</title><rect x="90.5252%" y="533" width="0.1083%" height="15" fill="rgb(254,205,35)" fg:x="1672" fg:w="2"/><text x="90.7752%" y="543.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.05%)</title><rect x="90.6335%" y="533" width="0.0541%" height="15" fill="rgb(230,159,3)" fg:x="1674" fg:w="1"/><text x="90.8835%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.11%)</title><rect x="90.6335%" y="549" width="0.1083%" height="15" fill="rgb(232,190,24)" fg:x="1674" fg:w="2"/><text x="90.8835%" y="559.50"></text></g><g><title>core::fmt::run (1 samples, 0.05%)</title><rect x="90.6876%" y="533" width="0.0541%" height="15" fill="rgb(217,227,44)" fg:x="1675" fg:w="1"/><text x="90.9376%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.05%)</title><rect x="90.6876%" y="517" width="0.0541%" height="15" fill="rgb(236,211,1)" fg:x="1675" fg:w="1"/><text x="90.9376%" y="527.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.05%)</title><rect x="90.6876%" y="501" width="0.0541%" height="15" fill="rgb(250,127,46)" fg:x="1675" fg:w="1"/><text x="90.9376%" y="511.50"></text></g><g><title>core::num::flt2dec::to_exact_fixed_str (1 samples, 0.05%)</title><rect x="90.6876%" y="485" width="0.0541%" height="15" fill="rgb(229,213,6)" fg:x="1675" fg:w="1"/><text x="90.9376%" y="495.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.05%)</title><rect x="90.6876%" y="469" width="0.0541%" height="15" fill="rgb(237,15,36)" fg:x="1675" fg:w="1"/><text x="90.9376%" y="479.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact (1 samples, 0.05%)</title><rect x="90.6876%" y="453" width="0.0541%" height="15" fill="rgb(213,131,41)" fg:x="1675" fg:w="1"/><text x="90.9376%" y="463.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (1 samples, 0.05%)</title><rect x="90.6876%" y="437" width="0.0541%" height="15" fill="rgb(225,82,44)" fg:x="1675" fg:w="1"/><text x="90.9376%" y="447.50"></text></g><g><title>inferno::flamegraph::svg::write_str (5 samples, 0.27%)</title><rect x="90.6335%" y="565" width="0.2707%" height="15" fill="rgb(249,42,11)" fg:x="1674" fg:w="5"/><text x="90.8835%" y="575.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (3 samples, 0.16%)</title><rect x="90.7417%" y="549" width="0.1624%" height="15" fill="rgb(253,11,29)" fg:x="1676" fg:w="3"/><text x="90.9917%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.11%)</title><rect x="90.7959%" y="533" width="0.1083%" height="15" fill="rgb(206,8,54)" fg:x="1677" fg:w="2"/><text x="91.0459%" y="543.50"></text></g><g><title>quick_xml::events::BytesStart::push_attribute (1 samples, 0.05%)</title><rect x="90.9042%" y="565" width="0.0541%" height="15" fill="rgb(222,186,2)" fg:x="1679" fg:w="1"/><text x="91.1542%" y="575.50"></text></g><g><title>quick_xml::escapei::escape (1 samples, 0.05%)</title><rect x="90.9042%" y="549" width="0.0541%" height="15" fill="rgb(221,206,53)" fg:x="1679" fg:w="1"/><text x="91.1542%" y="559.50"></text></g><g><title>inferno::flamegraph::from_lines (20 samples, 1.08%)</title><rect x="90.2545%" y="581" width="1.0828%" height="15" fill="rgb(230,150,21)" fg:x="1667" fg:w="20"/><text x="90.5045%" y="591.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (7 samples, 0.38%)</title><rect x="90.9583%" y="565" width="0.3790%" height="15" fill="rgb(253,202,10)" fg:x="1680" fg:w="7"/><text x="91.2083%" y="575.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.27%)</title><rect x="91.0666%" y="549" width="0.2707%" height="15" fill="rgb(238,109,40)" fg:x="1682" fg:w="5"/><text x="91.3166%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.05%)</title><rect x="91.3373%" y="581" width="0.0541%" height="15" fill="rgb(247,120,22)" fg:x="1687" fg:w="1"/><text x="91.5873%" y="591.50"></text></g><g><title>flamegraph (44 samples, 2.38%)</title><rect x="89.0633%" y="677" width="2.3822%" height="15" fill="rgb(207,43,30)" fg:x="1645" fg:w="44"/><text x="89.3133%" y="687.50">fl..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (44 samples, 2.38%)</title><rect x="89.0633%" y="661" width="2.3822%" height="15" fill="rgb(213,211,24)" fg:x="1645" fg:w="44"/><text x="89.3133%" y="671.50">st..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (44 samples, 2.38%)</title><rect x="89.0633%" y="645" width="2.3822%" height="15" fill="rgb(239,73,39)" fg:x="1645" fg:w="44"/><text x="89.3133%" y="655.50">&lt;a..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (44 samples, 2.38%)</title><rect x="89.0633%" y="629" width="2.3822%" height="15" fill="rgb(245,182,19)" fg:x="1645" fg:w="44"/><text x="89.3133%" y="639.50">&lt;a..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (44 samples, 2.38%)</title><rect x="89.0633%" y="613" width="2.3822%" height="15" fill="rgb(247,143,26)" fg:x="1645" fg:w="44"/><text x="89.3133%" y="623.50">co..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (44 samples, 2.38%)</title><rect x="89.0633%" y="597" width="2.3822%" height="15" fill="rgb(228,191,23)" fg:x="1645" fg:w="44"/><text x="89.3133%" y="607.50">st..</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (1 samples, 0.05%)</title><rect x="91.3914%" y="581" width="0.0541%" height="15" fill="rgb(253,165,31)" fg:x="1688" fg:w="1"/><text x="91.6414%" y="591.50"></text></g><g><title>rocksdb::HistogramStat::Data(rocksdb::HistogramData*) const (1 samples, 0.05%)</title><rect x="91.4997%" y="597" width="0.0541%" height="15" fill="rgb(234,138,20)" fg:x="1690" fg:w="1"/><text x="91.7497%" y="607.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.05%)</title><rect x="91.5539%" y="581" width="0.0541%" height="15" fill="rgb(218,191,29)" fg:x="1691" fg:w="1"/><text x="91.8039%" y="591.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="91.5539%" y="565" width="0.0541%" height="15" fill="rgb(221,157,19)" fg:x="1691" fg:w="1"/><text x="91.8039%" y="575.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="91.5539%" y="549" width="0.0541%" height="15" fill="rgb(237,26,42)" fg:x="1691" fg:w="1"/><text x="91.8039%" y="559.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="91.5539%" y="533" width="0.0541%" height="15" fill="rgb(220,163,24)" fg:x="1691" fg:w="1"/><text x="91.8039%" y="543.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="91.5539%" y="517" width="0.0541%" height="15" fill="rgb(242,115,20)" fg:x="1691" fg:w="1"/><text x="91.8039%" y="527.50"></text></g><g><title>rocksdb::StatisticsImpl::getHistogramImplLocked(unsigned int) const (130 samples, 7.04%)</title><rect x="91.5539%" y="597" width="7.0384%" height="15" fill="rgb(210,206,9)" fg:x="1691" fg:w="130"/><text x="91.8039%" y="607.50">rocksdb::..</text></g><g><title>rocksdb::HistogramImpl::Merge(rocksdb::HistogramImpl const&amp;) (129 samples, 6.98%)</title><rect x="91.6080%" y="581" width="6.9843%" height="15" fill="rgb(208,71,17)" fg:x="1692" fg:w="129"/><text x="91.8580%" y="591.50">rocksdb::..</text></g><g><title>rocksdb::HistogramStat::Merge(rocksdb::HistogramStat const&amp;) (129 samples, 6.98%)</title><rect x="91.6080%" y="565" width="6.9843%" height="15" fill="rgb(233,7,5)" fg:x="1692" fg:w="129"/><text x="91.8580%" y="575.50">rocksdb::..</text></g><g><title>rocksdb::DBImpl::PrintStatistics() (132 samples, 7.15%)</title><rect x="91.4997%" y="629" width="7.1467%" height="15" fill="rgb(207,92,33)" fg:x="1690" fg:w="132"/><text x="91.7497%" y="639.50">rocksdb::D..</text></g><g><title>rocksdb::StatisticsImpl::ToString[abi:cxx11]() const (132 samples, 7.15%)</title><rect x="91.4997%" y="613" width="7.1467%" height="15" fill="rgb(218,87,9)" fg:x="1690" fg:w="132"/><text x="91.7497%" y="623.50">rocksdb::S..</text></g><g><title>rocksdb::StatisticsImpl::getTickerCountLocked(unsigned int) const (1 samples, 0.05%)</title><rect x="98.5923%" y="597" width="0.0541%" height="15" fill="rgb(219,47,37)" fg:x="1821" fg:w="1"/><text x="98.8423%" y="607.50"></text></g><g><title>rocksdb::(anonymous namespace)::PrintLevelStatsHeader(char*, unsigned long, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) [clone .constprop.0] (1 samples, 0.05%)</title><rect x="98.6465%" y="597" width="0.0541%" height="15" fill="rgb(221,152,34)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="607.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct(unsigned long, char) (1 samples, 0.05%)</title><rect x="98.6465%" y="581" width="0.0541%" height="15" fill="rgb(235,176,21)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="591.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.05%)</title><rect x="98.6465%" y="565" width="0.0541%" height="15" fill="rgb(232,212,21)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="575.50"></text></g><g><title>_rjem_je_malloc_default (1 samples, 0.05%)</title><rect x="98.6465%" y="549" width="0.0541%" height="15" fill="rgb(245,82,39)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="559.50"></text></g><g><title>imalloc (1 samples, 0.05%)</title><rect x="98.6465%" y="533" width="0.0541%" height="15" fill="rgb(241,52,51)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="543.50"></text></g><g><title>imalloc_body (1 samples, 0.05%)</title><rect x="98.6465%" y="517" width="0.0541%" height="15" fill="rgb(219,91,24)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="527.50"></text></g><g><title>imalloc_no_sample (1 samples, 0.05%)</title><rect x="98.6465%" y="501" width="0.0541%" height="15" fill="rgb(241,142,12)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="511.50"></text></g><g><title>iallocztm (1 samples, 0.05%)</title><rect x="98.6465%" y="485" width="0.0541%" height="15" fill="rgb(230,27,9)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="495.50"></text></g><g><title>arena_malloc (1 samples, 0.05%)</title><rect x="98.6465%" y="469" width="0.0541%" height="15" fill="rgb(249,181,32)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="479.50"></text></g><g><title>tcache_alloc_small (1 samples, 0.05%)</title><rect x="98.6465%" y="453" width="0.0541%" height="15" fill="rgb(230,107,3)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="463.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.05%)</title><rect x="98.6465%" y="437" width="0.0541%" height="15" fill="rgb(246,204,14)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="447.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.05%)</title><rect x="98.6465%" y="421" width="0.0541%" height="15" fill="rgb(213,192,47)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="431.50"></text></g><g><title>arena_slab_reg_alloc_batch (1 samples, 0.05%)</title><rect x="98.6465%" y="405" width="0.0541%" height="15" fill="rgb(240,44,36)" fg:x="1822" fg:w="1"/><text x="98.8965%" y="415.50"></text></g><g><title>rocksdb::InternalStats::HandleCFStatsPeriodic(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, rocksdb::Slice) (2 samples, 0.11%)</title><rect x="98.6465%" y="629" width="0.1083%" height="15" fill="rgb(244,209,38)" fg:x="1822" fg:w="2"/><text x="98.8965%" y="639.50"></text></g><g><title>rocksdb::InternalStats::DumpCFStatsNoFileHistogram(bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.11%)</title><rect x="98.6465%" y="613" width="0.1083%" height="15" fill="rgb(219,34,37)" fg:x="1822" fg:w="2"/><text x="98.8965%" y="623.50"></text></g><g><title>rocksdb::InternalStats::DumpCFStatsWriteStall(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, unsigned long*) (1 samples, 0.05%)</title><rect x="98.7006%" y="597" width="0.0541%" height="15" fill="rgb(210,28,6)" fg:x="1823" fg:w="1"/><text x="98.9506%" y="607.50"></text></g><g><title>rocksdb::InternalStats::DumpCFMapStatsWriteStall(std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;*) (1 samples, 0.05%)</title><rect x="98.7006%" y="581" width="0.0541%" height="15" fill="rgb(244,110,52)" fg:x="1823" fg:w="1"/><text x="98.9506%" y="591.50"></text></g><g><title>rocksdb::WriteStallStatsMapKeys::CauseConditionCount[abi:cxx11](rocksdb::WriteStallCause, rocksdb::WriteStallCondition) (1 samples, 0.05%)</title><rect x="98.7006%" y="565" width="0.0541%" height="15" fill="rgb(254,124,47)" fg:x="1823" fg:w="1"/><text x="98.9506%" y="575.50"></text></g><g><title>rocksdb::WriteStallConditionToHyphenString[abi:cxx11](rocksdb::WriteStallCondition) (1 samples, 0.05%)</title><rect x="98.7006%" y="549" width="0.0541%" height="15" fill="rgb(254,110,13)" fg:x="1823" fg:w="1"/><text x="98.9506%" y="559.50"></text></g><g><title>rocksdb::InternalStats::DumpDBMapStatsWriteStall(std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;*) (1 samples, 0.05%)</title><rect x="98.7547%" y="581" width="0.0541%" height="15" fill="rgb(252,57,21)" fg:x="1824" fg:w="1"/><text x="99.0047%" y="591.50"></text></g><g><title>rocksdb::InternalStats::DumpDBStatsWriteStall(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.11%)</title><rect x="98.7547%" y="597" width="0.1083%" height="15" fill="rgb(242,60,45)" fg:x="1824" fg:w="2"/><text x="99.0047%" y="607.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.05%)</title><rect x="98.8089%" y="581" width="0.0541%" height="15" fill="rgb(234,49,30)" fg:x="1825" fg:w="1"/><text x="99.0589%" y="591.50"></text></g><g><title>std::ios_base::_M_init() (1 samples, 0.05%)</title><rect x="98.8089%" y="565" width="0.0541%" height="15" fill="rgb(218,98,6)" fg:x="1825" fg:w="1"/><text x="99.0589%" y="575.50"></text></g><g><title>rocksdb::InternalStats::HandleDBStats(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, rocksdb::Slice) (3 samples, 0.16%)</title><rect x="98.7547%" y="629" width="0.1624%" height="15" fill="rgb(220,174,29)" fg:x="1824" fg:w="3"/><text x="99.0047%" y="639.50"></text></g><g><title>rocksdb::InternalStats::DumpDBStats(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (3 samples, 0.16%)</title><rect x="98.7547%" y="613" width="0.1624%" height="15" fill="rgb(236,163,23)" fg:x="1824" fg:w="3"/><text x="99.0047%" y="623.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (1 samples, 0.05%)</title><rect x="98.8630%" y="597" width="0.0541%" height="15" fill="rgb(242,114,45)" fg:x="1826" fg:w="1"/><text x="99.1130%" y="607.50"></text></g><g><title>rocksdb::DBImpl::DumpStats() (138 samples, 7.47%)</title><rect x="91.4997%" y="645" width="7.4716%" height="15" fill="rgb(232,10,53)" fg:x="1690" fg:w="138"/><text x="91.7497%" y="655.50">rocksdb::D..</text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt;(char const*, char const*, std::forward_iterator_tag) (1 samples, 0.05%)</title><rect x="98.9172%" y="629" width="0.0541%" height="15" fill="rgb(245,108,29)" fg:x="1827" fg:w="1"/><text x="99.1672%" y="639.50"></text></g><g><title>rocksdb::DBImpl::EstimateInMemoryStatsHistorySize() const (4 samples, 0.22%)</title><rect x="99.0796%" y="629" width="0.2166%" height="15" fill="rgb(240,89,53)" fg:x="1830" fg:w="4"/><text x="99.3296%" y="639.50"></text></g><g><title>std::_Rb_tree_increment(std::_Rb_tree_node_base const*) (3 samples, 0.16%)</title><rect x="99.1337%" y="613" width="0.1624%" height="15" fill="rgb(226,60,45)" fg:x="1831" fg:w="3"/><text x="99.3837%" y="623.50"></text></g><g><title>operator new(unsigned long) (2 samples, 0.11%)</title><rect x="99.4044%" y="613" width="0.1083%" height="15" fill="rgb(230,41,44)" fg:x="1836" fg:w="2"/><text x="99.6544%" y="623.50"></text></g><g><title>malloc (2 samples, 0.11%)</title><rect x="99.4044%" y="597" width="0.1083%" height="15" fill="rgb(230,26,20)" fg:x="1836" fg:w="2"/><text x="99.6544%" y="607.50"></text></g><g><title>imalloc_fastpath (2 samples, 0.11%)</title><rect x="99.4044%" y="581" width="0.1083%" height="15" fill="rgb(237,170,32)" fg:x="1836" fg:w="2"/><text x="99.6544%" y="591.50"></text></g><g><title>cache_bin_alloc_easy (2 samples, 0.11%)</title><rect x="99.4044%" y="565" width="0.1083%" height="15" fill="rgb(212,35,42)" fg:x="1836" fg:w="2"/><text x="99.6544%" y="575.50"></text></g><g><title>cache_bin_alloc_impl (2 samples, 0.11%)</title><rect x="99.4044%" y="549" width="0.1083%" height="15" fill="rgb(227,31,34)" fg:x="1836" fg:w="2"/><text x="99.6544%" y="559.50"></text></g><g><title>rocksdb::StatisticsImpl::getTickerCountLocked(unsigned int) const (3 samples, 0.16%)</title><rect x="99.5127%" y="613" width="0.1624%" height="15" fill="rgb(216,19,18)" fg:x="1838" fg:w="3"/><text x="99.7627%" y="623.50"></text></g><g><title>rocksdb::StatisticsImpl::getTickerMap(std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;*) const (8 samples, 0.43%)</title><rect x="99.2962%" y="629" width="0.4331%" height="15" fill="rgb(211,133,42)" fg:x="1834" fg:w="8"/><text x="99.5462%" y="639.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (1 samples, 0.05%)</title><rect x="99.6751%" y="613" width="0.0541%" height="15" fill="rgb(244,66,13)" fg:x="1841" fg:w="1"/><text x="99.9251%" y="623.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.05%)</title><rect x="99.7293%" y="629" width="0.0541%" height="15" fill="rgb(218,185,50)" fg:x="1842" fg:w="1"/><text x="99.9793%" y="639.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::operator=(std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt; const&amp;) (1 samples, 0.05%)</title><rect x="99.7834%" y="629" width="0.0541%" height="15" fill="rgb(219,149,13)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="639.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&gt;(std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; const*, std::_Rb_tree_node_base*, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&amp;) (1 samples, 0.05%)</title><rect x="99.7834%" y="613" width="0.0541%" height="15" fill="rgb(221,125,0)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="623.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&gt;(std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; const*, std::_Rb_tree_node_base*, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&amp;) (1 samples, 0.05%)</title><rect x="99.7834%" y="597" width="0.0541%" height="15" fill="rgb(247,126,27)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="607.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&gt;(std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; const*, std::_Rb_tree_node_base*, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&amp;) (1 samples, 0.05%)</title><rect x="99.7834%" y="581" width="0.0541%" height="15" fill="rgb(250,138,30)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="591.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) [clone .constprop.0] (1 samples, 0.05%)</title><rect x="99.7834%" y="565" width="0.0541%" height="15" fill="rgb(230,151,9)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="575.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.05%)</title><rect x="99.7834%" y="549" width="0.0541%" height="15" fill="rgb(233,80,38)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="559.50"></text></g><g><title>_rjem_je_malloc_default (1 samples, 0.05%)</title><rect x="99.7834%" y="533" width="0.0541%" height="15" fill="rgb(232,68,43)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="543.50"></text></g><g><title>imalloc (1 samples, 0.05%)</title><rect x="99.7834%" y="517" width="0.0541%" height="15" fill="rgb(254,5,50)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="527.50"></text></g><g><title>imalloc_body (1 samples, 0.05%)</title><rect x="99.7834%" y="501" width="0.0541%" height="15" fill="rgb(225,45,5)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="511.50"></text></g><g><title>imalloc_no_sample (1 samples, 0.05%)</title><rect x="99.7834%" y="485" width="0.0541%" height="15" fill="rgb(239,22,3)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="495.50"></text></g><g><title>iallocztm (1 samples, 0.05%)</title><rect x="99.7834%" y="469" width="0.0541%" height="15" fill="rgb(243,129,0)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="479.50"></text></g><g><title>arena_malloc (1 samples, 0.05%)</title><rect x="99.7834%" y="453" width="0.0541%" height="15" fill="rgb(223,164,0)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="463.50"></text></g><g><title>tcache_alloc_small (1 samples, 0.05%)</title><rect x="99.7834%" y="437" width="0.0541%" height="15" fill="rgb(221,46,29)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="447.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.05%)</title><rect x="99.7834%" y="421" width="0.0541%" height="15" fill="rgb(205,97,47)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="431.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.05%)</title><rect x="99.7834%" y="405" width="0.0541%" height="15" fill="rgb(249,14,8)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="415.50"></text></g><g><title>arena_slab_alloc (1 samples, 0.05%)</title><rect x="99.7834%" y="389" width="0.0541%" height="15" fill="rgb(216,77,3)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="399.50"></text></g><g><title>_rjem_je_pa_alloc (1 samples, 0.05%)</title><rect x="99.7834%" y="373" width="0.0541%" height="15" fill="rgb(206,168,54)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="383.50"></text></g><g><title>pai_alloc (1 samples, 0.05%)</title><rect x="99.7834%" y="357" width="0.0541%" height="15" fill="rgb(236,3,41)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="367.50"></text></g><g><title>pac_alloc_impl (1 samples, 0.05%)</title><rect x="99.7834%" y="341" width="0.0541%" height="15" fill="rgb(231,132,24)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="351.50"></text></g><g><title>pac_alloc_real (1 samples, 0.05%)</title><rect x="99.7834%" y="325" width="0.0541%" height="15" fill="rgb(227,221,40)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="335.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.05%)</title><rect x="99.7834%" y="309" width="0.0541%" height="15" fill="rgb(233,151,11)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="319.50"></text></g><g><title>extent_recycle (1 samples, 0.05%)</title><rect x="99.7834%" y="293" width="0.0541%" height="15" fill="rgb(247,81,35)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="303.50"></text></g><g><title>extent_recycle_split (1 samples, 0.05%)</title><rect x="99.7834%" y="277" width="0.0541%" height="15" fill="rgb(243,128,48)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="287.50"></text></g><g><title>extent_split_interior (1 samples, 0.05%)</title><rect x="99.7834%" y="261" width="0.0541%" height="15" fill="rgb(253,16,10)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="271.50"></text></g><g><title>extent_split_impl (1 samples, 0.05%)</title><rect x="99.7834%" y="245" width="0.0541%" height="15" fill="rgb(228,67,27)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="255.50"></text></g><g><title>edata_init (1 samples, 0.05%)</title><rect x="99.7834%" y="229" width="0.0541%" height="15" fill="rgb(231,105,25)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="239.50"></text></g><g><title>edata_is_head_set (1 samples, 0.05%)</title><rect x="99.7834%" y="213" width="0.0541%" height="15" fill="rgb(213,166,47)" fg:x="1843" fg:w="1"/><text x="100.0334%" y="223.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.05%)</title><rect x="99.8376%" y="613" width="0.0541%" height="15" fill="rgb(209,27,10)" fg:x="1844" fg:w="1"/><text x="100.0876%" y="623.50"></text></g><g><title>malloc (1 samples, 0.05%)</title><rect x="99.8376%" y="597" width="0.0541%" height="15" fill="rgb(241,44,30)" fg:x="1844" fg:w="1"/><text x="100.0876%" y="607.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.05%)</title><rect x="99.8376%" y="581" width="0.0541%" height="15" fill="rgb(223,216,15)" fg:x="1844" fg:w="1"/><text x="100.0876%" y="591.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.05%)</title><rect x="99.8376%" y="565" width="0.0541%" height="15" fill="rgb(227,14,7)" fg:x="1844" fg:w="1"/><text x="100.0876%" y="575.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.05%)</title><rect x="99.8376%" y="549" width="0.0541%" height="15" fill="rgb(237,14,5)" fg:x="1844" fg:w="1"/><text x="100.0876%" y="559.50"></text></g><g><title>rocksdb::DBImpl::PersistStats() (18 samples, 0.97%)</title><rect x="98.9713%" y="645" width="0.9746%" height="15" fill="rgb(232,14,36)" fg:x="1828" fg:w="18"/><text x="99.2213%" y="655.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt;) (2 samples, 0.11%)</title><rect x="99.8376%" y="629" width="0.1083%" height="15" fill="rgb(234,0,38)" fg:x="1844" fg:w="2"/><text x="100.0876%" y="639.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.05%)</title><rect x="99.8917%" y="613" width="0.0541%" height="15" fill="rgb(207,170,14)" fg:x="1845" fg:w="1"/><text x="100.1417%" y="623.50"></text></g><g><title>all (1,847 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(252,45,13)" fg:x="0" fg:w="1847"/><text x="0.2500%" y="703.50"></text></g><g><title>range-server (158 samples, 8.55%)</title><rect x="91.4456%" y="677" width="8.5544%" height="15" fill="rgb(213,142,7)" fg:x="1689" fg:w="158"/><text x="91.6956%" y="687.50">range-server</text></g><g><title>rocksdb::Timer::Run() (158 samples, 8.55%)</title><rect x="91.4456%" y="661" width="8.5544%" height="15" fill="rgb(216,157,23)" fg:x="1689" fg:w="158"/><text x="91.6956%" y="671.50">rocksdb::Tim..</text></g><g><title>rocksdb::InstrumentedCondVar::TimedWait(unsigned long) (1 samples, 0.05%)</title><rect x="99.9459%" y="645" width="0.0541%" height="15" fill="rgb(212,145,33)" fg:x="1846" fg:w="1"/><text x="100.1959%" y="655.50"></text></g></svg></svg>