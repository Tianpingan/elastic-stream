<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="1630"><g><title>&lt;observation::metrics::uring_metrics::INFLIGHT_IO as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="2.6994%" y="565" width="0.0613%" height="15" fill="rgb(246,18,19)" fg:x="44" fg:w="1"/><text x="2.9494%" y="575.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until.2063 (11 samples, 0.67%)</title><rect x="2.9448%" y="549" width="0.6748%" height="15" fill="rgb(235,228,25)" fg:x="48" fg:w="11"/><text x="3.1948%" y="559.50"></text></g><g><title>std::thread::park (5 samples, 0.31%)</title><rect x="3.3129%" y="533" width="0.3067%" height="15" fill="rgb(240,156,20)" fg:x="54" fg:w="5"/><text x="3.5629%" y="543.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (16 samples, 0.98%)</title><rect x="2.7607%" y="565" width="0.9816%" height="15" fill="rgb(224,8,20)" fg:x="45" fg:w="16"/><text x="3.0107%" y="575.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::register (2 samples, 0.12%)</title><rect x="3.6196%" y="549" width="0.1227%" height="15" fill="rgb(214,12,52)" fg:x="59" fg:w="2"/><text x="3.8696%" y="559.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (9 samples, 0.55%)</title><rect x="3.7423%" y="565" width="0.5521%" height="15" fill="rgb(211,220,47)" fg:x="61" fg:w="9"/><text x="3.9923%" y="575.50"></text></g><g><title>rocksdb_get_pinned_cf (1 samples, 0.06%)</title><rect x="4.2945%" y="565" width="0.0613%" height="15" fill="rgb(250,173,5)" fg:x="70" fg:w="1"/><text x="4.5445%" y="575.50"></text></g><g><title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.06%)</title><rect x="4.2945%" y="549" width="0.0613%" height="15" fill="rgb(250,125,52)" fg:x="70" fg:w="1"/><text x="4.5445%" y="559.50"></text></g><g><title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.06%)</title><rect x="4.2945%" y="533" width="0.0613%" height="15" fill="rgb(209,133,18)" fg:x="70" fg:w="1"/><text x="4.5445%" y="543.50"></text></g><g><title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (1 samples, 0.06%)</title><rect x="4.2945%" y="517" width="0.0613%" height="15" fill="rgb(216,173,22)" fg:x="70" fg:w="1"/><text x="4.5445%" y="527.50"></text></g><g><title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::PinnableWideColumns*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, rocksdb::PinnedIteratorsManager*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.06%)</title><rect x="4.2945%" y="501" width="0.0613%" height="15" fill="rgb(205,3,22)" fg:x="70" fg:w="1"/><text x="4.5445%" y="511.50"></text></g><g><title>sdallocx (1 samples, 0.06%)</title><rect x="4.3558%" y="565" width="0.0613%" height="15" fill="rgb(248,22,20)" fg:x="71" fg:w="1"/><text x="4.6058%" y="575.50"></text></g><g><title>free_fastpath (1 samples, 0.06%)</title><rect x="4.3558%" y="549" width="0.0613%" height="15" fill="rgb(233,6,29)" fg:x="71" fg:w="1"/><text x="4.6058%" y="559.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.06%)</title><rect x="4.3558%" y="533" width="0.0613%" height="15" fill="rgb(240,22,54)" fg:x="71" fg:w="1"/><text x="4.6058%" y="543.50"></text></g><g><title>store::io::uring::IO::add_pending_task (5 samples, 0.31%)</title><rect x="4.4172%" y="565" width="0.3067%" height="15" fill="rgb(231,133,32)" fg:x="72" fg:w="5"/><text x="4.6672%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.31%)</title><rect x="6.5644%" y="549" width="0.3067%" height="15" fill="rgb(248,193,4)" fg:x="107" fg:w="5"/><text x="6.8144%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="6.7485%" y="533" width="0.1227%" height="15" fill="rgb(211,178,46)" fg:x="110" fg:w="2"/><text x="6.9985%" y="543.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="6.8098%" y="517" width="0.0613%" height="15" fill="rgb(224,5,42)" fg:x="111" fg:w="1"/><text x="7.0598%" y="527.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="6.8098%" y="501" width="0.0613%" height="15" fill="rgb(239,176,25)" fg:x="111" fg:w="1"/><text x="7.0598%" y="511.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="6.8098%" y="485" width="0.0613%" height="15" fill="rgb(245,187,50)" fg:x="111" fg:w="1"/><text x="7.0598%" y="495.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="6.8098%" y="469" width="0.0613%" height="15" fill="rgb(248,24,15)" fg:x="111" fg:w="1"/><text x="7.0598%" y="479.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (13 samples, 0.80%)</title><rect x="6.8712%" y="549" width="0.7975%" height="15" fill="rgb(205,166,13)" fg:x="112" fg:w="13"/><text x="7.1212%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.25%)</title><rect x="7.6687%" y="549" width="0.2454%" height="15" fill="rgb(208,114,23)" fg:x="125" fg:w="4"/><text x="7.9187%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.18%)</title><rect x="7.7301%" y="533" width="0.1840%" height="15" fill="rgb(239,127,18)" fg:x="126" fg:w="3"/><text x="7.9801%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.18%)</title><rect x="7.7301%" y="517" width="0.1840%" height="15" fill="rgb(219,154,28)" fg:x="126" fg:w="3"/><text x="7.9801%" y="527.50"></text></g><g><title>malloc (5 samples, 0.31%)</title><rect x="7.9141%" y="549" width="0.3067%" height="15" fill="rgb(225,157,23)" fg:x="129" fg:w="5"/><text x="8.1641%" y="559.50"></text></g><g><title>imalloc_fastpath (5 samples, 0.31%)</title><rect x="7.9141%" y="533" width="0.3067%" height="15" fill="rgb(219,8,6)" fg:x="129" fg:w="5"/><text x="8.1641%" y="543.50"></text></g><g><title>cache_bin_alloc_easy (5 samples, 0.31%)</title><rect x="7.9141%" y="517" width="0.3067%" height="15" fill="rgb(212,47,6)" fg:x="129" fg:w="5"/><text x="8.1641%" y="527.50"></text></g><g><title>cache_bin_alloc_impl (5 samples, 0.31%)</title><rect x="7.9141%" y="501" width="0.3067%" height="15" fill="rgb(224,190,4)" fg:x="129" fg:w="5"/><text x="8.1641%" y="511.50"></text></g><g><title>sdallocx (1 samples, 0.06%)</title><rect x="8.2209%" y="549" width="0.0613%" height="15" fill="rgb(239,183,29)" fg:x="134" fg:w="1"/><text x="8.4709%" y="559.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::remaining (2 samples, 0.12%)</title><rect x="8.2822%" y="549" width="0.1227%" height="15" fill="rgb(213,57,7)" fg:x="135" fg:w="2"/><text x="8.5322%" y="559.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="8.4663%" y="533" width="0.0613%" height="15" fill="rgb(216,148,1)" fg:x="138" fg:w="1"/><text x="8.7163%" y="543.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="8.4663%" y="517" width="0.0613%" height="15" fill="rgb(236,182,29)" fg:x="138" fg:w="1"/><text x="8.7163%" y="527.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="8.4663%" y="501" width="0.0613%" height="15" fill="rgb(244,120,48)" fg:x="138" fg:w="1"/><text x="8.7163%" y="511.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="8.4663%" y="485" width="0.0613%" height="15" fill="rgb(206,71,34)" fg:x="138" fg:w="1"/><text x="8.7163%" y="495.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.06%)</title><rect x="8.7730%" y="261" width="0.0613%" height="15" fill="rgb(242,32,6)" fg:x="143" fg:w="1"/><text x="9.0230%" y="271.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="8.7730%" y="245" width="0.0613%" height="15" fill="rgb(241,35,3)" fg:x="143" fg:w="1"/><text x="9.0230%" y="255.50"></text></g><g><title>extent_recycle_extract (1 samples, 0.06%)</title><rect x="8.7730%" y="229" width="0.0613%" height="15" fill="rgb(222,62,19)" fg:x="143" fg:w="1"/><text x="9.0230%" y="239.50"></text></g><g><title>_rjem_je_eset_fit (1 samples, 0.06%)</title><rect x="8.7730%" y="213" width="0.0613%" height="15" fill="rgb(223,110,41)" fg:x="143" fg:w="1"/><text x="9.0230%" y="223.50"></text></g><g><title>eset_first_fit (1 samples, 0.06%)</title><rect x="8.7730%" y="197" width="0.0613%" height="15" fill="rgb(208,224,4)" fg:x="143" fg:w="1"/><text x="9.0230%" y="207.50"></text></g><g><title>_rjem_je_sz_psz_quantize_ceil (1 samples, 0.06%)</title><rect x="8.7730%" y="181" width="0.0613%" height="15" fill="rgb(241,137,19)" fg:x="143" fg:w="1"/><text x="9.0230%" y="191.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::reserve_to (8 samples, 0.49%)</title><rect x="8.4049%" y="549" width="0.4908%" height="15" fill="rgb(244,24,17)" fg:x="137" fg:w="8"/><text x="8.6549%" y="559.50"></text></g><g><title>store::io::buf::aligned_buf::AlignedBuf::new (6 samples, 0.37%)</title><rect x="8.5276%" y="533" width="0.3681%" height="15" fill="rgb(245,178,49)" fg:x="139" fg:w="6"/><text x="8.7776%" y="543.50"></text></g><g><title>mallocx (5 samples, 0.31%)</title><rect x="8.5890%" y="517" width="0.3067%" height="15" fill="rgb(219,160,38)" fg:x="140" fg:w="5"/><text x="8.8390%" y="527.50"></text></g><g><title>imalloc (5 samples, 0.31%)</title><rect x="8.5890%" y="501" width="0.3067%" height="15" fill="rgb(228,137,14)" fg:x="140" fg:w="5"/><text x="8.8390%" y="511.50"></text></g><g><title>imalloc_body (5 samples, 0.31%)</title><rect x="8.5890%" y="485" width="0.3067%" height="15" fill="rgb(237,134,11)" fg:x="140" fg:w="5"/><text x="8.8390%" y="495.50"></text></g><g><title>imalloc_no_sample (5 samples, 0.31%)</title><rect x="8.5890%" y="469" width="0.3067%" height="15" fill="rgb(211,126,44)" fg:x="140" fg:w="5"/><text x="8.8390%" y="479.50"></text></g><g><title>ipalloct (5 samples, 0.31%)</title><rect x="8.5890%" y="453" width="0.3067%" height="15" fill="rgb(226,171,33)" fg:x="140" fg:w="5"/><text x="8.8390%" y="463.50"></text></g><g><title>ipallocztm (5 samples, 0.31%)</title><rect x="8.5890%" y="437" width="0.3067%" height="15" fill="rgb(253,99,13)" fg:x="140" fg:w="5"/><text x="8.8390%" y="447.50"></text></g><g><title>_rjem_je_arena_palloc (5 samples, 0.31%)</title><rect x="8.5890%" y="421" width="0.3067%" height="15" fill="rgb(244,48,7)" fg:x="140" fg:w="5"/><text x="8.8390%" y="431.50"></text></g><g><title>arena_malloc (5 samples, 0.31%)</title><rect x="8.5890%" y="405" width="0.3067%" height="15" fill="rgb(244,217,54)" fg:x="140" fg:w="5"/><text x="8.8390%" y="415.50"></text></g><g><title>tcache_alloc_small (5 samples, 0.31%)</title><rect x="8.5890%" y="389" width="0.3067%" height="15" fill="rgb(224,15,18)" fg:x="140" fg:w="5"/><text x="8.8390%" y="399.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.12%)</title><rect x="8.7730%" y="373" width="0.1227%" height="15" fill="rgb(244,99,12)" fg:x="143" fg:w="2"/><text x="9.0230%" y="383.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (2 samples, 0.12%)</title><rect x="8.7730%" y="357" width="0.1227%" height="15" fill="rgb(233,226,8)" fg:x="143" fg:w="2"/><text x="9.0230%" y="367.50"></text></g><g><title>arena_slab_alloc (2 samples, 0.12%)</title><rect x="8.7730%" y="341" width="0.1227%" height="15" fill="rgb(229,211,3)" fg:x="143" fg:w="2"/><text x="9.0230%" y="351.50"></text></g><g><title>_rjem_je_pa_alloc (2 samples, 0.12%)</title><rect x="8.7730%" y="325" width="0.1227%" height="15" fill="rgb(216,140,21)" fg:x="143" fg:w="2"/><text x="9.0230%" y="335.50"></text></g><g><title>pai_alloc (2 samples, 0.12%)</title><rect x="8.7730%" y="309" width="0.1227%" height="15" fill="rgb(234,122,30)" fg:x="143" fg:w="2"/><text x="9.0230%" y="319.50"></text></g><g><title>pac_alloc_impl (2 samples, 0.12%)</title><rect x="8.7730%" y="293" width="0.1227%" height="15" fill="rgb(236,25,46)" fg:x="143" fg:w="2"/><text x="9.0230%" y="303.50"></text></g><g><title>pac_alloc_real (2 samples, 0.12%)</title><rect x="8.7730%" y="277" width="0.1227%" height="15" fill="rgb(217,52,54)" fg:x="143" fg:w="2"/><text x="9.0230%" y="287.50"></text></g><g><title>_rjem_je_ecache_alloc_grow (1 samples, 0.06%)</title><rect x="8.8344%" y="261" width="0.0613%" height="15" fill="rgb(222,29,26)" fg:x="144" fg:w="1"/><text x="9.0844%" y="271.50"></text></g><g><title>extent_alloc_retained (1 samples, 0.06%)</title><rect x="8.8344%" y="245" width="0.0613%" height="15" fill="rgb(216,177,29)" fg:x="144" fg:w="1"/><text x="9.0844%" y="255.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="8.8344%" y="229" width="0.0613%" height="15" fill="rgb(247,136,51)" fg:x="144" fg:w="1"/><text x="9.0844%" y="239.50"></text></g><g><title>extent_recycle_split (1 samples, 0.06%)</title><rect x="8.8344%" y="213" width="0.0613%" height="15" fill="rgb(231,47,47)" fg:x="144" fg:w="1"/><text x="9.0844%" y="223.50"></text></g><g><title>extent_split_interior (1 samples, 0.06%)</title><rect x="8.8344%" y="197" width="0.0613%" height="15" fill="rgb(211,192,36)" fg:x="144" fg:w="1"/><text x="9.0844%" y="207.50"></text></g><g><title>extent_split_impl (1 samples, 0.06%)</title><rect x="8.8344%" y="181" width="0.0613%" height="15" fill="rgb(229,156,32)" fg:x="144" fg:w="1"/><text x="9.0844%" y="191.50"></text></g><g><title>ehooks_split (1 samples, 0.06%)</title><rect x="8.8344%" y="165" width="0.0613%" height="15" fill="rgb(248,213,20)" fg:x="144" fg:w="1"/><text x="9.0844%" y="175.50"></text></g><g><title>ehooks_post_reentrancy (1 samples, 0.06%)</title><rect x="8.8344%" y="149" width="0.0613%" height="15" fill="rgb(217,64,7)" fg:x="144" fg:w="1"/><text x="9.0844%" y="159.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::write (8 samples, 0.49%)</title><rect x="8.8957%" y="549" width="0.4908%" height="15" fill="rgb(232,142,8)" fg:x="145" fg:w="8"/><text x="9.1457%" y="559.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::swap (2 samples, 0.12%)</title><rect x="9.2638%" y="533" width="0.1227%" height="15" fill="rgb(224,92,44)" fg:x="151" fg:w="2"/><text x="9.5138%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="10.1840%" y="533" width="0.0613%" height="15" fill="rgb(214,169,17)" fg:x="166" fg:w="1"/><text x="10.4340%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="10.1840%" y="517" width="0.0613%" height="15" fill="rgb(210,59,37)" fg:x="166" fg:w="1"/><text x="10.4340%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map_while::MapWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="10.2454%" y="533" width="0.0613%" height="15" fill="rgb(214,116,48)" fg:x="167" fg:w="1"/><text x="10.4954%" y="543.50"></text></g><g><title>store::io::uring::try_reclaim_from_wal (16 samples, 0.98%)</title><rect x="9.3865%" y="549" width="0.9816%" height="15" fill="rgb(244,191,6)" fg:x="153" fg:w="16"/><text x="9.6365%" y="559.50"></text></g><g><title>store::io::block_cache::Entry::score (1 samples, 0.06%)</title><rect x="10.3067%" y="533" width="0.0613%" height="15" fill="rgb(241,50,52)" fg:x="168" fg:w="1"/><text x="10.5567%" y="543.50"></text></g><g><title>store::io::uring::IO::build_sqe (96 samples, 5.89%)</title><rect x="4.7239%" y="565" width="5.8896%" height="15" fill="rgb(236,75,39)" fg:x="77" fg:w="96"/><text x="4.9739%" y="575.50">store::..</text></g><g><title>store::io::wal::Wal::segment_file_of (4 samples, 0.25%)</title><rect x="10.3681%" y="549" width="0.2454%" height="15" fill="rgb(236,99,0)" fg:x="169" fg:w="4"/><text x="10.6181%" y="559.50"></text></g><g><title>log4rs::encode::pattern::Chunk::encode (2 samples, 0.12%)</title><rect x="12.8834%" y="501" width="0.1227%" height="15" fill="rgb(207,202,15)" fg:x="210" fg:w="2"/><text x="13.1334%" y="511.50"></text></g><g><title>log4rs::encode::pattern::LeftAlignWriter&lt;W&gt;::finish (1 samples, 0.06%)</title><rect x="12.9448%" y="485" width="0.0613%" height="15" fill="rgb(233,207,14)" fg:x="211" fg:w="1"/><text x="13.1948%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="12.9448%" y="469" width="0.0613%" height="15" fill="rgb(226,27,51)" fg:x="211" fg:w="1"/><text x="13.1948%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.06%)</title><rect x="12.9448%" y="453" width="0.0613%" height="15" fill="rgb(206,104,42)" fg:x="211" fg:w="1"/><text x="13.1948%" y="463.50"></text></g><g><title>core::fmt::Write::write_char (1 samples, 0.06%)</title><rect x="12.9448%" y="437" width="0.0613%" height="15" fill="rgb(212,225,4)" fg:x="211" fg:w="1"/><text x="13.1948%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.1051 (1 samples, 0.06%)</title><rect x="13.0061%" y="421" width="0.0613%" height="15" fill="rgb(233,96,42)" fg:x="212" fg:w="1"/><text x="13.2561%" y="431.50"></text></g><g><title>alloc::string::String::push.1052 (1 samples, 0.06%)</title><rect x="13.0061%" y="405" width="0.0613%" height="15" fill="rgb(229,21,32)" fg:x="212" fg:w="1"/><text x="13.2561%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="13.0061%" y="389" width="0.0613%" height="15" fill="rgb(226,216,24)" fg:x="212" fg:w="1"/><text x="13.2561%" y="399.50"></text></g><g><title>&lt;chrono::offset::fixed::FixedOffset as core::fmt::Debug&gt;::fmt (3 samples, 0.18%)</title><rect x="13.0061%" y="485" width="0.1840%" height="15" fill="rgb(221,163,17)" fg:x="212" fg:w="3"/><text x="13.2561%" y="495.50"></text></g><g><title>core::fmt::write (3 samples, 0.18%)</title><rect x="13.0061%" y="469" width="0.1840%" height="15" fill="rgb(216,216,42)" fg:x="212" fg:w="3"/><text x="13.2561%" y="479.50"></text></g><g><title>core::fmt::run (3 samples, 0.18%)</title><rect x="13.0061%" y="453" width="0.1840%" height="15" fill="rgb(240,118,7)" fg:x="212" fg:w="3"/><text x="13.2561%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.18%)</title><rect x="13.0061%" y="437" width="0.1840%" height="15" fill="rgb(221,67,37)" fg:x="212" fg:w="3"/><text x="13.2561%" y="447.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 0.12%)</title><rect x="13.0675%" y="421" width="0.1227%" height="15" fill="rgb(241,32,44)" fg:x="213" fg:w="2"/><text x="13.3175%" y="431.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.12%)</title><rect x="13.0675%" y="405" width="0.1227%" height="15" fill="rgb(235,204,43)" fg:x="213" fg:w="2"/><text x="13.3175%" y="415.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.12%)</title><rect x="13.0675%" y="389" width="0.1227%" height="15" fill="rgb(213,116,10)" fg:x="213" fg:w="2"/><text x="13.3175%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.06%)</title><rect x="13.1288%" y="373" width="0.0613%" height="15" fill="rgb(239,15,48)" fg:x="214" fg:w="1"/><text x="13.3788%" y="383.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.06%)</title><rect x="13.1902%" y="485" width="0.0613%" height="15" fill="rgb(207,123,36)" fg:x="215" fg:w="1"/><text x="13.4402%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.06%)</title><rect x="13.1902%" y="469" width="0.0613%" height="15" fill="rgb(209,103,30)" fg:x="215" fg:w="1"/><text x="13.4402%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.06%)</title><rect x="13.2515%" y="437" width="0.0613%" height="15" fill="rgb(238,100,19)" fg:x="216" fg:w="1"/><text x="13.5015%" y="447.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.06%)</title><rect x="13.3129%" y="181" width="0.0613%" height="15" fill="rgb(244,30,14)" fg:x="217" fg:w="1"/><text x="13.5629%" y="191.50"></text></g><g><title>chrono::format::format_inner (2 samples, 0.12%)</title><rect x="13.3129%" y="421" width="0.1227%" height="15" fill="rgb(249,174,6)" fg:x="217" fg:w="2"/><text x="13.5629%" y="431.50"></text></g><g><title>core::fmt::write (2 samples, 0.12%)</title><rect x="13.3129%" y="405" width="0.1227%" height="15" fill="rgb(235,213,41)" fg:x="217" fg:w="2"/><text x="13.5629%" y="415.50"></text></g><g><title>core::fmt::run (2 samples, 0.12%)</title><rect x="13.3129%" y="389" width="0.1227%" height="15" fill="rgb(213,118,6)" fg:x="217" fg:w="2"/><text x="13.5629%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.12%)</title><rect x="13.3129%" y="373" width="0.1227%" height="15" fill="rgb(235,44,51)" fg:x="217" fg:w="2"/><text x="13.5629%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (2 samples, 0.12%)</title><rect x="13.3129%" y="357" width="0.1227%" height="15" fill="rgb(217,9,53)" fg:x="217" fg:w="2"/><text x="13.5629%" y="367.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.12%)</title><rect x="13.3129%" y="341" width="0.1227%" height="15" fill="rgb(237,172,34)" fg:x="217" fg:w="2"/><text x="13.5629%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.12%)</title><rect x="13.3129%" y="325" width="0.1227%" height="15" fill="rgb(206,206,11)" fg:x="217" fg:w="2"/><text x="13.5629%" y="335.50"></text></g><g><title>core::fmt::Formatter::padding (2 samples, 0.12%)</title><rect x="13.3129%" y="309" width="0.1227%" height="15" fill="rgb(214,149,29)" fg:x="217" fg:w="2"/><text x="13.5629%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (2 samples, 0.12%)</title><rect x="13.3129%" y="293" width="0.1227%" height="15" fill="rgb(208,123,3)" fg:x="217" fg:w="2"/><text x="13.5629%" y="303.50"></text></g><g><title>alloc::string::String::push.1052 (2 samples, 0.12%)</title><rect x="13.3129%" y="277" width="0.1227%" height="15" fill="rgb(229,126,4)" fg:x="217" fg:w="2"/><text x="13.5629%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.12%)</title><rect x="13.3129%" y="261" width="0.1227%" height="15" fill="rgb(222,92,36)" fg:x="217" fg:w="2"/><text x="13.5629%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="13.3129%" y="245" width="0.1227%" height="15" fill="rgb(216,39,41)" fg:x="217" fg:w="2"/><text x="13.5629%" y="255.50"></text></g><g><title>do_rallocx (2 samples, 0.12%)</title><rect x="13.3129%" y="229" width="0.1227%" height="15" fill="rgb(253,127,28)" fg:x="217" fg:w="2"/><text x="13.5629%" y="239.50"></text></g><g><title>iralloct (2 samples, 0.12%)</title><rect x="13.3129%" y="213" width="0.1227%" height="15" fill="rgb(249,152,51)" fg:x="217" fg:w="2"/><text x="13.5629%" y="223.50"></text></g><g><title>_rjem_je_arena_ralloc (2 samples, 0.12%)</title><rect x="13.3129%" y="197" width="0.1227%" height="15" fill="rgb(209,123,42)" fg:x="217" fg:w="2"/><text x="13.5629%" y="207.50"></text></g><g><title>isdalloct (1 samples, 0.06%)</title><rect x="13.3742%" y="181" width="0.0613%" height="15" fill="rgb(241,118,22)" fg:x="218" fg:w="1"/><text x="13.6242%" y="191.50"></text></g><g><title>arena_sdalloc (1 samples, 0.06%)</title><rect x="13.3742%" y="165" width="0.0613%" height="15" fill="rgb(208,25,7)" fg:x="218" fg:w="1"/><text x="13.6242%" y="175.50"></text></g><g><title>arena_dalloc_large (1 samples, 0.06%)</title><rect x="13.3742%" y="149" width="0.0613%" height="15" fill="rgb(243,144,39)" fg:x="218" fg:w="1"/><text x="13.6242%" y="159.50"></text></g><g><title>tcache_dalloc_large (1 samples, 0.06%)</title><rect x="13.3742%" y="133" width="0.0613%" height="15" fill="rgb(250,50,5)" fg:x="218" fg:w="1"/><text x="13.6242%" y="143.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.06%)</title><rect x="13.3742%" y="117" width="0.0613%" height="15" fill="rgb(207,67,11)" fg:x="218" fg:w="1"/><text x="13.6242%" y="127.50"></text></g><g><title>&lt;log4rs::append::rolling_file::RollingFileAppender as log4rs::append::Append&gt;::append (10 samples, 0.61%)</title><rect x="12.8834%" y="533" width="0.6135%" height="15" fill="rgb(245,204,40)" fg:x="210" fg:w="10"/><text x="13.1334%" y="543.50"></text></g><g><title>&lt;log4rs::encode::pattern::PatternEncoder as log4rs::encode::Encode&gt;::encode (10 samples, 0.61%)</title><rect x="12.8834%" y="517" width="0.6135%" height="15" fill="rgb(238,228,24)" fg:x="210" fg:w="10"/><text x="13.1334%" y="527.50"></text></g><g><title>log4rs::encode::pattern::FormattedChunk::encode (8 samples, 0.49%)</title><rect x="13.0061%" y="501" width="0.4908%" height="15" fill="rgb(217,116,22)" fg:x="212" fg:w="8"/><text x="13.2561%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.25%)</title><rect x="13.2515%" y="485" width="0.2454%" height="15" fill="rgb(234,98,12)" fg:x="216" fg:w="4"/><text x="13.5015%" y="495.50"></text></g><g><title>core::fmt::write (4 samples, 0.25%)</title><rect x="13.2515%" y="469" width="0.2454%" height="15" fill="rgb(242,170,50)" fg:x="216" fg:w="4"/><text x="13.5015%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.25%)</title><rect x="13.2515%" y="453" width="0.2454%" height="15" fill="rgb(235,7,5)" fg:x="216" fg:w="4"/><text x="13.5015%" y="463.50"></text></g><g><title>&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (3 samples, 0.18%)</title><rect x="13.3129%" y="437" width="0.1840%" height="15" fill="rgb(241,114,28)" fg:x="217" fg:w="3"/><text x="13.5629%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.06%)</title><rect x="13.4356%" y="421" width="0.0613%" height="15" fill="rgb(246,112,42)" fg:x="219" fg:w="1"/><text x="13.6856%" y="431.50"></text></g><g><title>&lt;log4rs::Logger as log::Log&gt;::log (12 samples, 0.74%)</title><rect x="12.8834%" y="549" width="0.7362%" height="15" fill="rgb(248,228,14)" fg:x="210" fg:w="12"/><text x="13.1334%" y="559.50"></text></g><g><title>log4rs::ConfiguredLogger::find (2 samples, 0.12%)</title><rect x="13.4969%" y="533" width="0.1227%" height="15" fill="rgb(208,133,18)" fg:x="220" fg:w="2"/><text x="13.7469%" y="543.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.06%)</title><rect x="13.5583%" y="517" width="0.0613%" height="15" fill="rgb(207,35,49)" fg:x="221" fg:w="1"/><text x="13.8083%" y="527.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.06%)</title><rect x="13.5583%" y="501" width="0.0613%" height="15" fill="rgb(205,68,36)" fg:x="221" fg:w="1"/><text x="13.8083%" y="511.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (1 samples, 0.06%)</title><rect x="13.5583%" y="485" width="0.0613%" height="15" fill="rgb(245,62,40)" fg:x="221" fg:w="1"/><text x="13.8083%" y="495.50"></text></g><g><title>&lt;observation::metrics::uring_metrics::COMPLETED_WRITE_IO as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="13.6196%" y="549" width="0.0613%" height="15" fill="rgb(228,27,24)" fg:x="222" fg:w="1"/><text x="13.8696%" y="559.50"></text></g><g><title>&lt;observation::metrics::uring_metrics::INFLIGHT_IO as core::ops::deref::Deref&gt;::deref (2 samples, 0.12%)</title><rect x="13.6810%" y="549" width="0.1227%" height="15" fill="rgb(253,19,12)" fg:x="223" fg:w="2"/><text x="13.9310%" y="559.50"></text></g><g><title>__floattidf (2 samples, 0.12%)</title><rect x="13.8037%" y="549" width="0.1227%" height="15" fill="rgb(232,28,20)" fg:x="225" fg:w="2"/><text x="14.0537%" y="559.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (2 samples, 0.12%)</title><rect x="13.8037%" y="533" width="0.1227%" height="15" fill="rgb(218,35,51)" fg:x="225" fg:w="2"/><text x="14.0537%" y="543.50"></text></g><g><title>core::num::&lt;impl i128&gt;::unsigned_abs (2 samples, 0.12%)</title><rect x="13.8037%" y="517" width="0.1227%" height="15" fill="rgb(212,90,40)" fg:x="225" fg:w="2"/><text x="14.0537%" y="527.50"></text></g><g><title>core::num::&lt;impl i128&gt;::wrapping_abs (2 samples, 0.12%)</title><rect x="13.8037%" y="501" width="0.1227%" height="15" fill="rgb(220,172,12)" fg:x="225" fg:w="2"/><text x="14.0537%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.18%)</title><rect x="13.9264%" y="549" width="0.1840%" height="15" fill="rgb(226,159,20)" fg:x="227" fg:w="3"/><text x="14.1764%" y="559.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (2 samples, 0.12%)</title><rect x="14.1104%" y="453" width="0.1227%" height="15" fill="rgb(234,205,16)" fg:x="230" fg:w="2"/><text x="14.3604%" y="463.50"></text></g><g><title>tcache_bin_flush_bottom (2 samples, 0.12%)</title><rect x="14.1104%" y="437" width="0.1227%" height="15" fill="rgb(207,9,39)" fg:x="230" fg:w="2"/><text x="14.3604%" y="447.50"></text></g><g><title>tcache_bin_flush_impl (2 samples, 0.12%)</title><rect x="14.1104%" y="421" width="0.1227%" height="15" fill="rgb(249,143,15)" fg:x="230" fg:w="2"/><text x="14.3604%" y="431.50"></text></g><g><title>arena_dalloc_bin_locked_step (2 samples, 0.12%)</title><rect x="14.1104%" y="405" width="0.1227%" height="15" fill="rgb(253,133,29)" fg:x="230" fg:w="2"/><text x="14.3604%" y="415.50"></text></g><g><title>arena_bin_lower_slab (1 samples, 0.06%)</title><rect x="14.1718%" y="389" width="0.0613%" height="15" fill="rgb(221,187,0)" fg:x="231" fg:w="1"/><text x="14.4218%" y="399.50"></text></g><g><title>arena_bin_slabs_nonfull_insert (1 samples, 0.06%)</title><rect x="14.1718%" y="373" width="0.0613%" height="15" fill="rgb(205,204,26)" fg:x="231" fg:w="1"/><text x="14.4218%" y="383.50"></text></g><g><title>_rjem_je_edata_heap_insert (1 samples, 0.06%)</title><rect x="14.1718%" y="357" width="0.0613%" height="15" fill="rgb(224,68,54)" fg:x="231" fg:w="1"/><text x="14.4218%" y="367.50"></text></g><g><title>_rjem_je_sdallocx_default (3 samples, 0.18%)</title><rect x="14.1104%" y="533" width="0.1840%" height="15" fill="rgb(209,67,4)" fg:x="230" fg:w="3"/><text x="14.3604%" y="543.50"></text></g><g><title>isfree (3 samples, 0.18%)</title><rect x="14.1104%" y="517" width="0.1840%" height="15" fill="rgb(228,229,18)" fg:x="230" fg:w="3"/><text x="14.3604%" y="527.50"></text></g><g><title>isdalloct (3 samples, 0.18%)</title><rect x="14.1104%" y="501" width="0.1840%" height="15" fill="rgb(231,89,13)" fg:x="230" fg:w="3"/><text x="14.3604%" y="511.50"></text></g><g><title>arena_sdalloc (3 samples, 0.18%)</title><rect x="14.1104%" y="485" width="0.1840%" height="15" fill="rgb(210,182,18)" fg:x="230" fg:w="3"/><text x="14.3604%" y="495.50"></text></g><g><title>tcache_dalloc_small (3 samples, 0.18%)</title><rect x="14.1104%" y="469" width="0.1840%" height="15" fill="rgb(240,105,2)" fg:x="230" fg:w="3"/><text x="14.3604%" y="479.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.06%)</title><rect x="14.2331%" y="453" width="0.0613%" height="15" fill="rgb(207,170,50)" fg:x="232" fg:w="1"/><text x="14.4831%" y="463.50"></text></g><g><title>cache_bin_full (1 samples, 0.06%)</title><rect x="14.2331%" y="437" width="0.0613%" height="15" fill="rgb(232,133,24)" fg:x="232" fg:w="1"/><text x="14.4831%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (8 samples, 0.49%)</title><rect x="14.1104%" y="549" width="0.4908%" height="15" fill="rgb(235,166,27)" fg:x="230" fg:w="8"/><text x="14.3604%" y="559.50"></text></g><g><title>tokio::runtime::task::raw::dealloc (5 samples, 0.31%)</title><rect x="14.2945%" y="533" width="0.3067%" height="15" fill="rgb(209,19,13)" fg:x="233" fg:w="5"/><text x="14.5445%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;range_server::session::Session&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;::process0::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (1 samples, 0.06%)</title><rect x="14.5399%" y="517" width="0.0613%" height="15" fill="rgb(226,79,39)" fg:x="237" fg:w="1"/><text x="14.7899%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.31%)</title><rect x="14.6012%" y="549" width="0.3067%" height="15" fill="rgb(222,163,10)" fg:x="238" fg:w="5"/><text x="14.8512%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.25%)</title><rect x="14.6626%" y="533" width="0.2454%" height="15" fill="rgb(214,44,19)" fg:x="239" fg:w="4"/><text x="14.9126%" y="543.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (12 samples, 0.74%)</title><rect x="14.9080%" y="549" width="0.7362%" height="15" fill="rgb(210,217,13)" fg:x="243" fg:w="12"/><text x="15.1580%" y="559.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify.3940 (4 samples, 0.25%)</title><rect x="15.3988%" y="533" width="0.2454%" height="15" fill="rgb(237,61,54)" fg:x="251" fg:w="4"/><text x="15.6488%" y="543.50"></text></g><g><title>expf32x (12 samples, 0.74%)</title><rect x="15.6442%" y="549" width="0.7362%" height="15" fill="rgb(226,184,24)" fg:x="255" fg:w="12"/><text x="15.8942%" y="559.50"></text></g><g><title>sdallocx (2 samples, 0.12%)</title><rect x="16.3804%" y="549" width="0.1227%" height="15" fill="rgb(223,226,4)" fg:x="267" fg:w="2"/><text x="16.6304%" y="559.50"></text></g><g><title>free_fastpath (2 samples, 0.12%)</title><rect x="16.3804%" y="533" width="0.1227%" height="15" fill="rgb(210,26,41)" fg:x="267" fg:w="2"/><text x="16.6304%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.06%)</title><rect x="16.5031%" y="549" width="0.0613%" height="15" fill="rgb(220,221,6)" fg:x="269" fg:w="1"/><text x="16.7531%" y="559.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.06%)</title><rect x="16.5031%" y="533" width="0.0613%" height="15" fill="rgb(225,89,49)" fg:x="269" fg:w="1"/><text x="16.7531%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.06%)</title><rect x="16.5644%" y="549" width="0.0613%" height="15" fill="rgb(218,70,45)" fg:x="270" fg:w="1"/><text x="16.8144%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.25%)</title><rect x="17.1166%" y="533" width="0.2454%" height="15" fill="rgb(238,166,21)" fg:x="279" fg:w="4"/><text x="17.3666%" y="543.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="17.3006%" y="517" width="0.0613%" height="15" fill="rgb(224,141,44)" fg:x="282" fg:w="1"/><text x="17.5506%" y="527.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="17.3006%" y="501" width="0.0613%" height="15" fill="rgb(230,12,49)" fg:x="282" fg:w="1"/><text x="17.5506%" y="511.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="17.3006%" y="485" width="0.0613%" height="15" fill="rgb(212,174,12)" fg:x="282" fg:w="1"/><text x="17.5506%" y="495.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="17.3006%" y="469" width="0.0613%" height="15" fill="rgb(246,67,9)" fg:x="282" fg:w="1"/><text x="17.5506%" y="479.50"></text></g><g><title>store::io::block_cache::BlockCache::add_entry (15 samples, 0.92%)</title><rect x="16.6258%" y="549" width="0.9202%" height="15" fill="rgb(239,35,23)" fg:x="271" fg:w="15"/><text x="16.8758%" y="559.50"></text></g><g><title>malloc (3 samples, 0.18%)</title><rect x="17.3620%" y="533" width="0.1840%" height="15" fill="rgb(211,167,0)" fg:x="283" fg:w="3"/><text x="17.6120%" y="543.50"></text></g><g><title>imalloc_fastpath (3 samples, 0.18%)</title><rect x="17.3620%" y="517" width="0.1840%" height="15" fill="rgb(225,119,45)" fg:x="283" fg:w="3"/><text x="17.6120%" y="527.50"></text></g><g><title>cache_bin_alloc_easy (3 samples, 0.18%)</title><rect x="17.3620%" y="501" width="0.1840%" height="15" fill="rgb(210,162,6)" fg:x="283" fg:w="3"/><text x="17.6120%" y="511.50"></text></g><g><title>cache_bin_alloc_impl (3 samples, 0.18%)</title><rect x="17.3620%" y="485" width="0.1840%" height="15" fill="rgb(208,118,35)" fg:x="283" fg:w="3"/><text x="17.6120%" y="495.50"></text></g><g><title>store::io::uring::try_reclaim_from_wal (9 samples, 0.55%)</title><rect x="17.5460%" y="549" width="0.5521%" height="15" fill="rgb(239,4,53)" fg:x="286" fg:w="9"/><text x="17.7960%" y="559.50"></text></g><g><title>store::io::wal::Wal::segment_file_of (3 samples, 0.18%)</title><rect x="18.0982%" y="549" width="0.1840%" height="15" fill="rgb(213,130,21)" fg:x="295" fg:w="3"/><text x="18.3482%" y="559.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.12%)</title><rect x="18.4049%" y="533" width="0.1227%" height="15" fill="rgb(235,148,0)" fg:x="300" fg:w="2"/><text x="18.6549%" y="543.50"></text></g><g><title>IO (309 samples, 18.96%)</title><rect x="0.0000%" y="677" width="18.9571%" height="15" fill="rgb(244,224,18)" fg:x="0" fg:w="309"/><text x="0.2500%" y="687.50">IO</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (309 samples, 18.96%)</title><rect x="0.0000%" y="661" width="18.9571%" height="15" fill="rgb(211,214,4)" fg:x="0" fg:w="309"/><text x="0.2500%" y="671.50">std::sys::unix::thread::Thread..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (309 samples, 18.96%)</title><rect x="0.0000%" y="645" width="18.9571%" height="15" fill="rgb(206,119,25)" fg:x="0" fg:w="309"/><text x="0.2500%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as cor..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (309 samples, 18.96%)</title><rect x="0.0000%" y="629" width="18.9571%" height="15" fill="rgb(243,93,47)" fg:x="0" fg:w="309"/><text x="0.2500%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as cor..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (309 samples, 18.96%)</title><rect x="0.0000%" y="613" width="18.9571%" height="15" fill="rgb(224,194,6)" fg:x="0" fg:w="309"/><text x="0.2500%" y="623.50">core::ops::function::FnOnce::c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (309 samples, 18.96%)</title><rect x="0.0000%" y="597" width="18.9571%" height="15" fill="rgb(243,229,6)" fg:x="0" fg:w="309"/><text x="0.2500%" y="607.50">std::sys_common::backtrace::__..</text></g><g><title>store::io::uring::IO::run (309 samples, 18.96%)</title><rect x="0.0000%" y="581" width="18.9571%" height="15" fill="rgb(207,23,50)" fg:x="0" fg:w="309"/><text x="0.2500%" y="591.50">store::io::uring::IO::run</text></g><g><title>store::io::uring::IO::reap_data_tasks (136 samples, 8.34%)</title><rect x="10.6135%" y="565" width="8.3436%" height="15" fill="rgb(253,192,32)" fg:x="173" fg:w="136"/><text x="10.8635%" y="575.50">store::io::u..</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (11 samples, 0.67%)</title><rect x="18.2822%" y="549" width="0.6748%" height="15" fill="rgb(213,21,6)" fg:x="298" fg:w="11"/><text x="18.5322%" y="559.50"></text></g><g><title>tokio::task::local::Shared::schedule (7 samples, 0.43%)</title><rect x="18.5276%" y="533" width="0.4294%" height="15" fill="rgb(243,151,13)" fg:x="302" fg:w="7"/><text x="18.7776%" y="543.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.12%)</title><rect x="18.8344%" y="517" width="0.1227%" height="15" fill="rgb(233,165,41)" fg:x="307" fg:w="2"/><text x="19.0844%" y="527.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (2 samples, 0.12%)</title><rect x="18.8344%" y="501" width="0.1227%" height="15" fill="rgb(246,176,45)" fg:x="307" fg:w="2"/><text x="19.0844%" y="511.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="20.8589%" y="581" width="0.0613%" height="15" fill="rgb(217,170,52)" fg:x="340" fg:w="1"/><text x="21.1089%" y="591.50"></text></g><g><title>&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as crossbeam_channel::select::SelectHandle&gt;::is_ready (6 samples, 0.37%)</title><rect x="20.9202%" y="581" width="0.3681%" height="15" fill="rgb(214,203,54)" fg:x="341" fg:w="6"/><text x="21.1702%" y="591.50"></text></g><g><title>&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as crossbeam_channel::select::SelectHandle&gt;::unwatch (1 samples, 0.06%)</title><rect x="21.6564%" y="565" width="0.0613%" height="15" fill="rgb(248,215,49)" fg:x="353" fg:w="1"/><text x="21.9064%" y="575.50"></text></g><g><title>&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as crossbeam_channel::select::SelectHandle&gt;::watch (5 samples, 0.31%)</title><rect x="21.7178%" y="565" width="0.3067%" height="15" fill="rgb(208,46,10)" fg:x="354" fg:w="5"/><text x="21.9678%" y="575.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::watch (4 samples, 0.25%)</title><rect x="21.7791%" y="549" width="0.2454%" height="15" fill="rgb(254,5,31)" fg:x="355" fg:w="4"/><text x="22.0291%" y="559.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::unwatch (7 samples, 0.43%)</title><rect x="22.0245%" y="565" width="0.4294%" height="15" fill="rgb(222,104,33)" fg:x="359" fg:w="7"/><text x="22.2745%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (4 samples, 0.25%)</title><rect x="22.2086%" y="549" width="0.2454%" height="15" fill="rgb(248,49,16)" fg:x="362" fg:w="4"/><text x="22.4586%" y="559.50"></text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 0.25%)</title><rect x="22.2086%" y="533" width="0.2454%" height="15" fill="rgb(232,198,41)" fg:x="362" fg:w="4"/><text x="22.4586%" y="543.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (23 samples, 1.41%)</title><rect x="21.2883%" y="581" width="1.4110%" height="15" fill="rgb(214,125,3)" fg:x="347" fg:w="23"/><text x="21.5383%" y="591.50"></text></g><g><title>std::thread::park (4 samples, 0.25%)</title><rect x="22.4540%" y="565" width="0.2454%" height="15" fill="rgb(229,220,28)" fg:x="366" fg:w="4"/><text x="22.7040%" y="575.50"></text></g><g><title>std::thread::current (4 samples, 0.25%)</title><rect x="22.4540%" y="549" width="0.2454%" height="15" fill="rgb(222,64,37)" fg:x="366" fg:w="4"/><text x="22.7040%" y="559.50"></text></g><g><title>std::sys_common::thread_info::current_thread (1 samples, 0.06%)</title><rect x="22.6380%" y="533" width="0.0613%" height="15" fill="rgb(249,184,13)" fg:x="369" fg:w="1"/><text x="22.8880%" y="543.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with (1 samples, 0.06%)</title><rect x="22.6380%" y="517" width="0.0613%" height="15" fill="rgb(252,176,6)" fg:x="369" fg:w="1"/><text x="22.8880%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.06%)</title><rect x="22.6380%" y="501" width="0.0613%" height="15" fill="rgb(228,153,7)" fg:x="369" fg:w="1"/><text x="22.8880%" y="511.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with::{{closure}} (1 samples, 0.06%)</title><rect x="22.6380%" y="485" width="0.0613%" height="15" fill="rgb(242,193,5)" fg:x="369" fg:w="1"/><text x="22.8880%" y="495.50"></text></g><g><title>std::sys_common::thread_info::current_thread::{{closure}} (1 samples, 0.06%)</title><rect x="22.6380%" y="469" width="0.0613%" height="15" fill="rgb(232,140,9)" fg:x="369" fg:w="1"/><text x="22.8880%" y="479.50"></text></g><g><title>&lt;std::thread::Thread as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="22.6380%" y="453" width="0.0613%" height="15" fill="rgb(213,222,16)" fg:x="369" fg:w="1"/><text x="22.8880%" y="463.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="22.6380%" y="437" width="0.0613%" height="15" fill="rgb(222,75,50)" fg:x="369" fg:w="1"/><text x="22.8880%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="22.6380%" y="421" width="0.0613%" height="15" fill="rgb(205,180,2)" fg:x="369" fg:w="1"/><text x="22.8880%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.06%)</title><rect x="22.6380%" y="405" width="0.0613%" height="15" fill="rgb(216,34,7)" fg:x="369" fg:w="1"/><text x="22.8880%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.06%)</title><rect x="22.6380%" y="389" width="0.0613%" height="15" fill="rgb(253,16,32)" fg:x="369" fg:w="1"/><text x="22.8880%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (2 samples, 0.12%)</title><rect x="22.6994%" y="581" width="0.1227%" height="15" fill="rgb(208,97,28)" fg:x="370" fg:w="2"/><text x="22.9494%" y="591.50"></text></g><g><title>malloc (8 samples, 0.49%)</title><rect x="22.8221%" y="581" width="0.4908%" height="15" fill="rgb(225,92,11)" fg:x="372" fg:w="8"/><text x="23.0721%" y="591.50"></text></g><g><title>imalloc_fastpath (8 samples, 0.49%)</title><rect x="22.8221%" y="565" width="0.4908%" height="15" fill="rgb(243,38,12)" fg:x="372" fg:w="8"/><text x="23.0721%" y="575.50"></text></g><g><title>cache_bin_alloc_easy (8 samples, 0.49%)</title><rect x="22.8221%" y="549" width="0.4908%" height="15" fill="rgb(208,139,16)" fg:x="372" fg:w="8"/><text x="23.0721%" y="559.50"></text></g><g><title>cache_bin_alloc_impl (8 samples, 0.49%)</title><rect x="22.8221%" y="533" width="0.4908%" height="15" fill="rgb(227,24,9)" fg:x="372" fg:w="8"/><text x="23.0721%" y="543.50"></text></g><g><title>SaveError (4 samples, 0.25%)</title><rect x="23.5583%" y="565" width="0.2454%" height="15" fill="rgb(206,62,11)" fg:x="384" fg:w="4"/><text x="23.8083%" y="575.50"></text></g><g><title>__tls_get_addr (1 samples, 0.06%)</title><rect x="27.3620%" y="501" width="0.0613%" height="15" fill="rgb(228,134,27)" fg:x="446" fg:w="1"/><text x="27.6120%" y="511.50"></text></g><g><title>__tls_init (7 samples, 0.43%)</title><rect x="27.4233%" y="501" width="0.4294%" height="15" fill="rgb(205,55,33)" fg:x="447" fg:w="7"/><text x="27.6733%" y="511.50"></text></g><g><title>__tls_get_addr (3 samples, 0.18%)</title><rect x="27.6687%" y="485" width="0.1840%" height="15" fill="rgb(243,75,43)" fg:x="451" fg:w="3"/><text x="27.9187%" y="495.50"></text></g><g><title>rocksdb::(anonymous namespace)::PosixClock::NowMicros() (3 samples, 0.18%)</title><rect x="27.8528%" y="501" width="0.1840%" height="15" fill="rgb(223,27,42)" fg:x="454" fg:w="3"/><text x="28.1028%" y="511.50"></text></g><g><title>rocksdb::DBImpl::GetMaxTotalWalSize() const (2 samples, 0.12%)</title><rect x="28.8957%" y="485" width="0.1227%" height="15" fill="rgb(232,189,33)" fg:x="471" fg:w="2"/><text x="29.1457%" y="495.50"></text></g><g><title>rocksdb::InstrumentedMutex::Lock() (8 samples, 0.49%)</title><rect x="29.0184%" y="485" width="0.4908%" height="15" fill="rgb(210,9,39)" fg:x="473" fg:w="8"/><text x="29.2684%" y="495.50"></text></g><g><title>rocksdb::port::Mutex::Lock() (3 samples, 0.18%)</title><rect x="29.3252%" y="469" width="0.1840%" height="15" fill="rgb(242,85,26)" fg:x="478" fg:w="3"/><text x="29.5752%" y="479.50"></text></g><g><title>rocksdb::TrimHistoryScheduler::Empty() (1 samples, 0.06%)</title><rect x="29.5092%" y="485" width="0.0613%" height="15" fill="rgb(248,44,4)" fg:x="481" fg:w="1"/><text x="29.7592%" y="495.50"></text></g><g><title>rocksdb::WriteController::IsStopped() const (2 samples, 0.12%)</title><rect x="29.5706%" y="485" width="0.1227%" height="15" fill="rgb(250,96,46)" fg:x="482" fg:w="2"/><text x="29.8206%" y="495.50"></text></g><g><title>rocksdb::port::Mutex::Unlock() (1 samples, 0.06%)</title><rect x="29.6933%" y="485" width="0.0613%" height="15" fill="rgb(229,116,26)" fg:x="484" fg:w="1"/><text x="29.9433%" y="495.50"></text></g><g><title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, rocksdb::DBImpl::LogContext*, rocksdb::DBImpl::WriteContext*) (29 samples, 1.78%)</title><rect x="28.0368%" y="501" width="1.7791%" height="15" fill="rgb(246,94,34)" fg:x="457" fg:w="29"/><text x="28.2868%" y="511.50">r..</text></g><g><title>rocksdb::port::PthreadCall(char const*, int) (1 samples, 0.06%)</title><rect x="29.7546%" y="485" width="0.0613%" height="15" fill="rgb(251,73,21)" fg:x="485" fg:w="1"/><text x="30.0046%" y="495.50"></text></g><g><title>rocksdb::DBImpl::WriteContext::~WriteContext() (4 samples, 0.25%)</title><rect x="29.8160%" y="501" width="0.2454%" height="15" fill="rgb(254,121,25)" fg:x="486" fg:w="4"/><text x="30.0660%" y="511.50"></text></g><g><title>rocksdb::InternalStats::AddDBStats(rocksdb::InternalStats::InternalDBStatsType, unsigned long, bool) (2 samples, 0.12%)</title><rect x="30.0613%" y="501" width="0.1227%" height="15" fill="rgb(215,161,49)" fg:x="490" fg:w="2"/><text x="30.3113%" y="511.50"></text></g><g><title>rocksdb::PerfContext::operator=(rocksdb::PerfContext const&amp;) (2 samples, 0.12%)</title><rect x="30.1840%" y="501" width="0.1227%" height="15" fill="rgb(221,43,13)" fg:x="492" fg:w="2"/><text x="30.4340%" y="511.50"></text></g><g><title>rocksdb::StatisticsImpl::HistEnabledForType(unsigned int) const (1 samples, 0.06%)</title><rect x="30.3067%" y="501" width="0.0613%" height="15" fill="rgb(249,5,37)" fg:x="494" fg:w="1"/><text x="30.5567%" y="511.50"></text></g><g><title>rocksdb::HistogramImpl::Add(unsigned long) (1 samples, 0.06%)</title><rect x="30.5521%" y="485" width="0.0613%" height="15" fill="rgb(226,25,44)" fg:x="498" fg:w="1"/><text x="30.8021%" y="495.50"></text></g><g><title>rocksdb::StatisticsImpl::recordInHistogram(unsigned int, unsigned long) (6 samples, 0.37%)</title><rect x="30.3681%" y="501" width="0.3681%" height="15" fill="rgb(238,189,16)" fg:x="495" fg:w="6"/><text x="30.6181%" y="511.50"></text></g><g><title>rocksdb::HistogramStat::Add(unsigned long) (2 samples, 0.12%)</title><rect x="30.6135%" y="485" width="0.1227%" height="15" fill="rgb(251,186,8)" fg:x="499" fg:w="2"/><text x="30.8635%" y="495.50"></text></g><g><title>rocksdb::HistogramBucketMapper::IndexForValue(unsigned long) const (2 samples, 0.12%)</title><rect x="30.6135%" y="469" width="0.1227%" height="15" fill="rgb(254,34,31)" fg:x="499" fg:w="2"/><text x="30.8635%" y="479.50"></text></g><g><title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long) (2 samples, 0.12%)</title><rect x="30.7362%" y="501" width="0.1227%" height="15" fill="rgb(225,215,27)" fg:x="501" fg:w="2"/><text x="30.9862%" y="511.50"></text></g><g><title>rocksdb::Status::operator=(rocksdb::Status const&amp;) (2 samples, 0.12%)</title><rect x="30.8589%" y="501" width="0.1227%" height="15" fill="rgb(221,192,48)" fg:x="503" fg:w="2"/><text x="31.1089%" y="511.50"></text></g><g><title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.06%)</title><rect x="30.9816%" y="501" width="0.0613%" height="15" fill="rgb(219,137,20)" fg:x="505" fg:w="1"/><text x="31.2316%" y="511.50"></text></g><g><title>rocksdb::StopWatch::~StopWatch() (6 samples, 0.37%)</title><rect x="31.0429%" y="501" width="0.3681%" height="15" fill="rgb(219,84,11)" fg:x="506" fg:w="6"/><text x="31.2929%" y="511.50"></text></g><g><title>rocksdb::(anonymous namespace)::PosixClock::NowMicros() (1 samples, 0.06%)</title><rect x="31.3497%" y="485" width="0.0613%" height="15" fill="rgb(224,10,23)" fg:x="511" fg:w="1"/><text x="31.5997%" y="495.50"></text></g><g><title>rocksdb::SuperVersionContext::SuperVersionContext(bool) (2 samples, 0.12%)</title><rect x="31.4110%" y="501" width="0.1227%" height="15" fill="rgb(248,22,39)" fg:x="512" fg:w="2"/><text x="31.6610%" y="511.50"></text></g><g><title>rocksdb::WriteBatch::GetProtectionBytesPerKey() const (1 samples, 0.06%)</title><rect x="31.5337%" y="501" width="0.0613%" height="15" fill="rgb(212,154,20)" fg:x="514" fg:w="1"/><text x="31.7837%" y="511.50"></text></g><g><title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.06%)</title><rect x="31.5951%" y="501" width="0.0613%" height="15" fill="rgb(236,199,50)" fg:x="515" fg:w="1"/><text x="31.8451%" y="511.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::CheckMemtableFull() (4 samples, 0.25%)</title><rect x="33.5583%" y="421" width="0.2454%" height="15" fill="rgb(211,9,17)" fg:x="547" fg:w="4"/><text x="33.8083%" y="431.50"></text></g><g><title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.06%)</title><rect x="33.7423%" y="405" width="0.0613%" height="15" fill="rgb(243,216,36)" fg:x="550" fg:w="1"/><text x="33.9923%" y="415.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::SeekToColumnFamily(unsigned int, rocksdb::Status*) [clone .constprop.0] (5 samples, 0.31%)</title><rect x="33.8037%" y="421" width="0.3067%" height="15" fill="rgb(250,2,10)" fg:x="551" fg:w="5"/><text x="34.0537%" y="431.50"></text></g><g><title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (5 samples, 0.31%)</title><rect x="33.8037%" y="405" width="0.3067%" height="15" fill="rgb(226,50,48)" fg:x="551" fg:w="5"/><text x="34.0537%" y="415.50"></text></g><g><title>rocksdb::ColumnFamilySet::GetColumnFamily(unsigned int) const (4 samples, 0.25%)</title><rect x="33.8650%" y="389" width="0.2454%" height="15" fill="rgb(243,81,16)" fg:x="552" fg:w="4"/><text x="34.1150%" y="399.50"></text></g><g><title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.12%)</title><rect x="34.1104%" y="421" width="0.1227%" height="15" fill="rgb(250,14,2)" fg:x="556" fg:w="2"/><text x="34.3604%" y="431.50"></text></g><g><title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::RecomputeSpliceLevels(rocksdb::Slice const&amp;, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, int) (7 samples, 0.43%)</title><rect x="36.0736%" y="389" width="0.4294%" height="15" fill="rgb(233,135,29)" fg:x="588" fg:w="7"/><text x="36.3236%" y="399.50"></text></g><g><title>__tls_init (1 samples, 0.06%)</title><rect x="36.6258%" y="373" width="0.0613%" height="15" fill="rgb(224,64,43)" fg:x="597" fg:w="1"/><text x="36.8758%" y="383.50"></text></g><g><title>__tls_get_addr (1 samples, 0.06%)</title><rect x="36.6258%" y="357" width="0.0613%" height="15" fill="rgb(238,84,13)" fg:x="597" fg:w="1"/><text x="36.8758%" y="367.50"></text></g><g><title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.25%)</title><rect x="36.5031%" y="389" width="0.2454%" height="15" fill="rgb(253,48,26)" fg:x="595" fg:w="4"/><text x="36.7531%" y="399.50"></text></g><g><title>{virtual override thunk({offset(-32)}, rocksdb::(anonymous namespace)::BytewiseComparatorImpl::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const)} (1 samples, 0.06%)</title><rect x="36.6871%" y="373" width="0.0613%" height="15" fill="rgb(205,223,31)" fg:x="598" fg:w="1"/><text x="36.9371%" y="383.50"></text></g><g><title>rocksdb::PerfContext::operator=(rocksdb::PerfContext const&amp;) (1 samples, 0.06%)</title><rect x="36.8098%" y="373" width="0.0613%" height="15" fill="rgb(221,41,32)" fg:x="600" fg:w="1"/><text x="37.0598%" y="383.50"></text></g><g><title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (24 samples, 1.47%)</title><rect x="35.5215%" y="405" width="1.4724%" height="15" fill="rgb(213,158,31)" fg:x="579" fg:w="24"/><text x="35.7715%" y="415.50"></text></g><g><title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.25%)</title><rect x="36.7485%" y="389" width="0.2454%" height="15" fill="rgb(245,126,43)" fg:x="599" fg:w="4"/><text x="36.9985%" y="399.50"></text></g><g><title>{virtual override thunk({offset(-32)}, rocksdb::(anonymous namespace)::BytewiseComparatorImpl::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const)} (2 samples, 0.12%)</title><rect x="36.8712%" y="373" width="0.1227%" height="15" fill="rgb(227,7,22)" fg:x="601" fg:w="2"/><text x="37.1212%" y="383.50"></text></g><g><title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::AllocateNode(unsigned long, int) [clone .isra.0] (21 samples, 1.29%)</title><rect x="37.1779%" y="389" width="1.2883%" height="15" fill="rgb(252,90,44)" fg:x="606" fg:w="21"/><text x="37.4279%" y="399.50"></text></g><g><title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (13 samples, 0.80%)</title><rect x="37.6687%" y="373" width="0.7975%" height="15" fill="rgb(253,91,0)" fg:x="614" fg:w="13"/><text x="37.9187%" y="383.50"></text></g><g><title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (5 samples, 0.31%)</title><rect x="38.1595%" y="357" width="0.3067%" height="15" fill="rgb(252,175,49)" fg:x="622" fg:w="5"/><text x="38.4095%" y="367.50"></text></g><g><title>rocksdb::(anonymous namespace)::SkipListRep::Allocate(unsigned long, char**) (26 samples, 1.60%)</title><rect x="36.9939%" y="405" width="1.5951%" height="15" fill="rgb(246,150,1)" fg:x="603" fg:w="26"/><text x="37.2439%" y="415.50"></text></g><g><title>rocksdb::Random::GetTLSInstance() (2 samples, 0.12%)</title><rect x="38.4663%" y="389" width="0.1227%" height="15" fill="rgb(241,192,25)" fg:x="627" fg:w="2"/><text x="38.7163%" y="399.50"></text></g><g><title>rocksdb::Hash(char const*, unsigned long, unsigned int) (2 samples, 0.12%)</title><rect x="38.5890%" y="405" width="0.1227%" height="15" fill="rgb(239,187,11)" fg:x="629" fg:w="2"/><text x="38.8390%" y="415.50"></text></g><g><title>rocksdb::MemTable::UpdateFlushState() (4 samples, 0.25%)</title><rect x="38.7117%" y="405" width="0.2454%" height="15" fill="rgb(218,202,51)" fg:x="631" fg:w="4"/><text x="38.9617%" y="415.50"></text></g><g><title>rocksdb::MemTable::ShouldFlushNow() (2 samples, 0.12%)</title><rect x="38.8344%" y="389" width="0.1227%" height="15" fill="rgb(225,176,8)" fg:x="633" fg:w="2"/><text x="39.0844%" y="399.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (98 samples, 6.01%)</title><rect x="33.0675%" y="453" width="6.0123%" height="15" fill="rgb(219,122,41)" fg:x="539" fg:w="98"/><text x="33.3175%" y="463.50">rocksdb:..</text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType, rocksdb::ProtectionInfoKVOS&lt;unsigned long&gt; const*) (95 samples, 5.83%)</title><rect x="33.2515%" y="437" width="5.8282%" height="15" fill="rgb(248,140,20)" fg:x="542" fg:w="95"/><text x="33.5015%" y="447.50">rocksdb..</text></g><g><title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ProtectionInfoKVOS&lt;unsigned long&gt; const*, bool, rocksdb::MemTablePostProcessInfo*, void**) (79 samples, 4.85%)</title><rect x="34.2331%" y="421" width="4.8466%" height="15" fill="rgb(245,41,37)" fg:x="558" fg:w="79"/><text x="34.4831%" y="431.50">rocksd..</text></g><g><title>rocksdb::MemTable::UpdateOldestKeyTime() (2 samples, 0.12%)</title><rect x="38.9571%" y="405" width="0.1227%" height="15" fill="rgb(235,82,39)" fg:x="635" fg:w="2"/><text x="39.2071%" y="415.50"></text></g><g><title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (126 samples, 7.73%)</title><rect x="31.6564%" y="501" width="7.7301%" height="15" fill="rgb(230,108,42)" fg:x="516" fg:w="126"/><text x="31.9064%" y="511.50">rocksdb::Wr..</text></g><g><title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (117 samples, 7.18%)</title><rect x="32.2086%" y="485" width="7.1779%" height="15" fill="rgb(215,150,50)" fg:x="525" fg:w="117"/><text x="32.4586%" y="495.50">rocksdb::W..</text></g><g><title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch*::Handler, unsigned long, unsigned long) (111 samples, 6.81%)</title><rect x="32.5767%" y="469" width="6.8098%" height="15" fill="rgb(233,212,5)" fg:x="531" fg:w="111"/><text x="32.8267%" y="479.50">rocksdb::..</text></g><g><title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (5 samples, 0.31%)</title><rect x="39.0798%" y="453" width="0.3067%" height="15" fill="rgb(245,80,22)" fg:x="637" fg:w="5"/><text x="39.3298%" y="463.50"></text></g><g><title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (2 samples, 0.12%)</title><rect x="39.3865%" y="501" width="0.1227%" height="15" fill="rgb(238,129,16)" fg:x="642" fg:w="2"/><text x="39.6365%" y="511.50"></text></g><g><title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status&amp;) (6 samples, 0.37%)</title><rect x="39.5092%" y="501" width="0.3681%" height="15" fill="rgb(240,19,0)" fg:x="644" fg:w="6"/><text x="39.7592%" y="511.50"></text></g><g><title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (3 samples, 0.18%)</title><rect x="39.8773%" y="501" width="0.1840%" height="15" fill="rgb(232,42,35)" fg:x="650" fg:w="3"/><text x="40.1273%" y="511.50"></text></g><g><title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.06%)</title><rect x="40.0000%" y="485" width="0.0613%" height="15" fill="rgb(223,130,24)" fg:x="652" fg:w="1"/><text x="40.2500%" y="495.50"></text></g><g><title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (249 samples, 15.28%)</title><rect x="24.8466%" y="533" width="15.2761%" height="15" fill="rgb(237,16,22)" fg:x="405" fg:w="249"/><text x="25.0966%" y="543.50">rocksdb::DBImpl::Write(..</text></g><g><title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*, rocksdb::PostMemTableCallback*) (248 samples, 15.21%)</title><rect x="24.9080%" y="517" width="15.2147%" height="15" fill="rgb(248,192,20)" fg:x="406" fg:w="248"/><text x="25.1580%" y="527.50">rocksdb::DBImpl::WriteI..</text></g><g><title>rocksdb::WriteThread::Writer::FinalStatus() (1 samples, 0.06%)</title><rect x="40.0613%" y="501" width="0.0613%" height="15" fill="rgb(233,167,2)" fg:x="653" fg:w="1"/><text x="40.3113%" y="511.50"></text></g><g><title>rocksdb::WriteBatchInternal::GetColumnFamilyIdAndTimestampSize(rocksdb::WriteBatch*, rocksdb::ColumnFamilyHandle*) (6 samples, 0.37%)</title><rect x="40.4294%" y="517" width="0.3681%" height="15" fill="rgb(252,71,44)" fg:x="659" fg:w="6"/><text x="40.6794%" y="527.50"></text></g><g><title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.12%)</title><rect x="40.6748%" y="501" width="0.1227%" height="15" fill="rgb(238,37,47)" fg:x="663" fg:w="2"/><text x="40.9248%" y="511.50"></text></g><g><title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.06%)</title><rect x="41.5951%" y="501" width="0.0613%" height="15" fill="rgb(214,202,54)" fg:x="678" fg:w="1"/><text x="41.8451%" y="511.50"></text></g><g><title>rocksdb::LocalSavePoint::commit() (2 samples, 0.12%)</title><rect x="41.6564%" y="501" width="0.1227%" height="15" fill="rgb(254,165,40)" fg:x="679" fg:w="2"/><text x="41.9064%" y="511.50"></text></g><g><title>rocksdb::SharedCleanablePtr::Impl::UnrefWrapper(void*, void*) (1 samples, 0.06%)</title><rect x="41.7791%" y="501" width="0.0613%" height="15" fill="rgb(246,173,38)" fg:x="681" fg:w="1"/><text x="42.0291%" y="511.50"></text></g><g><title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (32 samples, 1.96%)</title><rect x="40.1227%" y="533" width="1.9632%" height="15" fill="rgb(215,3,27)" fg:x="654" fg:w="32"/><text x="40.3727%" y="543.50">r..</text></g><g><title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (21 samples, 1.29%)</title><rect x="40.7975%" y="517" width="1.2883%" height="15" fill="rgb(239,169,51)" fg:x="665" fg:w="21"/><text x="41.0475%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (4 samples, 0.25%)</title><rect x="41.8405%" y="501" width="0.2454%" height="15" fill="rgb(212,5,25)" fg:x="682" fg:w="4"/><text x="42.0905%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) (1 samples, 0.06%)</title><rect x="42.4540%" y="517" width="0.0613%" height="15" fill="rgb(243,45,17)" fg:x="692" fg:w="1"/><text x="42.7040%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::pop_back() (2 samples, 0.12%)</title><rect x="42.5153%" y="517" width="0.1227%" height="15" fill="rgb(242,97,9)" fg:x="693" fg:w="2"/><text x="42.7653%" y="527.50"></text></g><g><title>operator new(unsigned long) (4 samples, 0.25%)</title><rect x="43.3129%" y="501" width="0.2454%" height="15" fill="rgb(228,71,31)" fg:x="706" fg:w="4"/><text x="43.5629%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="43.4969%" y="485" width="0.0613%" height="15" fill="rgb(252,184,16)" fg:x="709" fg:w="1"/><text x="43.7469%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="43.4969%" y="469" width="0.0613%" height="15" fill="rgb(236,169,46)" fg:x="709" fg:w="1"/><text x="43.7469%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="43.4969%" y="453" width="0.0613%" height="15" fill="rgb(207,17,47)" fg:x="709" fg:w="1"/><text x="43.7469%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="43.4969%" y="437" width="0.0613%" height="15" fill="rgb(206,201,28)" fg:x="709" fg:w="1"/><text x="43.7469%" y="447.50"></text></g><g><title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long, unsigned long, unsigned long) (27 samples, 1.66%)</title><rect x="42.0859%" y="533" width="1.6564%" height="15" fill="rgb(224,184,23)" fg:x="686" fg:w="27"/><text x="42.3359%" y="543.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve(unsigned long) (18 samples, 1.10%)</title><rect x="42.6380%" y="517" width="1.1043%" height="15" fill="rgb(208,139,48)" fg:x="695" fg:w="18"/><text x="42.8880%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create(unsigned long&amp;, unsigned long) (3 samples, 0.18%)</title><rect x="43.5583%" y="501" width="0.1840%" height="15" fill="rgb(208,130,10)" fg:x="710" fg:w="3"/><text x="43.8083%" y="511.50"></text></g><g><title>_rjem_je_free_default (1 samples, 0.06%)</title><rect x="43.8650%" y="517" width="0.0613%" height="15" fill="rgb(211,213,45)" fg:x="715" fg:w="1"/><text x="44.1150%" y="527.50"></text></g><g><title>free (4 samples, 0.25%)</title><rect x="43.9264%" y="517" width="0.2454%" height="15" fill="rgb(235,100,30)" fg:x="716" fg:w="4"/><text x="44.1764%" y="527.50"></text></g><g><title>free_fastpath (4 samples, 0.25%)</title><rect x="43.9264%" y="501" width="0.2454%" height="15" fill="rgb(206,144,31)" fg:x="716" fg:w="4"/><text x="44.1764%" y="511.50"></text></g><g><title>emap_alloc_ctx_try_lookup_fast (4 samples, 0.25%)</title><rect x="43.9264%" y="485" width="0.2454%" height="15" fill="rgb(224,200,26)" fg:x="716" fg:w="4"/><text x="44.1764%" y="495.50"></text></g><g><title>rtree_metadata_try_read_fast (4 samples, 0.25%)</title><rect x="43.9264%" y="469" width="0.2454%" height="15" fill="rgb(247,104,53)" fg:x="716" fg:w="4"/><text x="44.1764%" y="479.50"></text></g><g><title>rtree_leaf_elm_lookup_fast (4 samples, 0.25%)</title><rect x="43.9264%" y="453" width="0.2454%" height="15" fill="rgb(220,14,17)" fg:x="716" fg:w="4"/><text x="44.1764%" y="463.50"></text></g><g><title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (323 samples, 19.82%)</title><rect x="24.4172%" y="549" width="19.8160%" height="15" fill="rgb(230,140,40)" fg:x="398" fg:w="323"/><text x="24.6672%" y="559.50">rocksdb::DB::Put(rocksdb::Write..</text></g><g><title>rocksdb::WriteBatch::~WriteBatch() (8 samples, 0.49%)</title><rect x="43.7423%" y="533" width="0.4908%" height="15" fill="rgb(229,2,41)" fg:x="713" fg:w="8"/><text x="43.9923%" y="543.50"></text></g><g><title>operator delete(void*) (1 samples, 0.06%)</title><rect x="44.1718%" y="517" width="0.0613%" height="15" fill="rgb(232,89,16)" fg:x="720" fg:w="1"/><text x="44.4218%" y="527.50"></text></g><g><title>IndexDriver (419 samples, 25.71%)</title><rect x="18.9571%" y="677" width="25.7055%" height="15" fill="rgb(247,59,52)" fg:x="309" fg:w="419"/><text x="19.2071%" y="687.50">IndexDriver</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (419 samples, 25.71%)</title><rect x="18.9571%" y="661" width="25.7055%" height="15" fill="rgb(226,110,21)" fg:x="309" fg:w="419"/><text x="19.2071%" y="671.50">std::sys::unix::thread::Thread::new::thre..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (419 samples, 25.71%)</title><rect x="18.9571%" y="645" width="25.7055%" height="15" fill="rgb(224,176,43)" fg:x="309" fg:w="419"/><text x="19.2071%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::fun..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (419 samples, 25.71%)</title><rect x="18.9571%" y="629" width="25.7055%" height="15" fill="rgb(221,73,6)" fg:x="309" fg:w="419"/><text x="19.2071%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::fun..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (419 samples, 25.71%)</title><rect x="18.9571%" y="613" width="25.7055%" height="15" fill="rgb(232,78,19)" fg:x="309" fg:w="419"/><text x="19.2071%" y="623.50">core::ops::function::FnOnce::call_once{{v..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (419 samples, 25.71%)</title><rect x="18.9571%" y="597" width="25.7055%" height="15" fill="rgb(233,112,48)" fg:x="309" fg:w="419"/><text x="19.2071%" y="607.50">std::sys_common::backtrace::__rust_begin_..</text></g><g><title>rocksdb_put_cf (348 samples, 21.35%)</title><rect x="23.3129%" y="581" width="21.3497%" height="15" fill="rgb(243,131,47)" fg:x="380" fg:w="348"/><text x="23.5629%" y="591.50">rocksdb_put_cf</text></g><g><title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (340 samples, 20.86%)</title><rect x="23.8037%" y="565" width="20.8589%" height="15" fill="rgb(226,51,1)" fg:x="388" fg:w="340"/><text x="24.0537%" y="575.50">rocksdb::DBImpl::Put(rocksdb::Wri..</text></g><g><title>rocksdb::DBImpl::FailIfCfHasTs(rocksdb::ColumnFamilyHandle const*) const (7 samples, 0.43%)</title><rect x="44.2331%" y="549" width="0.4294%" height="15" fill="rgb(247,58,7)" fg:x="721" fg:w="7"/><text x="44.4831%" y="559.50"></text></g><g><title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (5 samples, 0.31%)</title><rect x="44.3558%" y="533" width="0.3067%" height="15" fill="rgb(209,7,32)" fg:x="723" fg:w="5"/><text x="44.6058%" y="543.50"></text></g><g><title>rocksdb::ColumnFamilyHandleImpl::cfd() const (2 samples, 0.12%)</title><rect x="44.5399%" y="517" width="0.1227%" height="15" fill="rgb(209,39,41)" fg:x="726" fg:w="2"/><text x="44.7899%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::handle::Handle&gt; (1 samples, 0.06%)</title><rect x="45.6442%" y="565" width="0.0613%" height="15" fill="rgb(226,182,46)" fg:x="744" fg:w="1"/><text x="45.8942%" y="575.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (6 samples, 0.37%)</title><rect x="45.7055%" y="565" width="0.3681%" height="15" fill="rgb(230,219,10)" fg:x="745" fg:w="6"/><text x="45.9555%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.18%)</title><rect x="45.8896%" y="549" width="0.1840%" height="15" fill="rgb(227,175,30)" fg:x="748" fg:w="3"/><text x="46.1396%" y="559.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.06%)</title><rect x="46.1350%" y="549" width="0.0613%" height="15" fill="rgb(217,2,50)" fg:x="752" fg:w="1"/><text x="46.3850%" y="559.50"></text></g><g><title>tokio::runtime::io::Driver::turn (2 samples, 0.12%)</title><rect x="46.1963%" y="549" width="0.1227%" height="15" fill="rgb(229,160,0)" fg:x="753" fg:w="2"/><text x="46.4463%" y="559.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (5 samples, 0.31%)</title><rect x="46.0736%" y="565" width="0.3067%" height="15" fill="rgb(207,78,37)" fg:x="751" fg:w="5"/><text x="46.3236%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.06%)</title><rect x="46.3190%" y="549" width="0.0613%" height="15" fill="rgb(225,57,0)" fg:x="755" fg:w="1"/><text x="46.5690%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (26 samples, 1.60%)</title><rect x="45.1534%" y="581" width="1.5951%" height="15" fill="rgb(232,154,2)" fg:x="736" fg:w="26"/><text x="45.4034%" y="591.50"></text></g><g><title>tokio_uring::runtime::Runtime::new::{{closure}} (6 samples, 0.37%)</title><rect x="46.3804%" y="565" width="0.3681%" height="15" fill="rgb(241,212,25)" fg:x="756" fg:w="6"/><text x="46.6304%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (1 samples, 0.06%)</title><rect x="46.7485%" y="581" width="0.0613%" height="15" fill="rgb(226,69,20)" fg:x="762" fg:w="1"/><text x="46.9985%" y="591.50"></text></g><g><title>tokio::runtime::coop::poll_proceed.1391 (2 samples, 0.12%)</title><rect x="47.7914%" y="549" width="0.1227%" height="15" fill="rgb(247,184,54)" fg:x="779" fg:w="2"/><text x="48.0414%" y="559.50"></text></g><g><title>object_storage::object_storage::AsyncObjectStorage::new::{{closure}}::{{closure}} (17 samples, 1.04%)</title><rect x="47.0552%" y="565" width="1.0429%" height="15" fill="rgb(210,145,0)" fg:x="767" fg:w="17"/><text x="47.3052%" y="575.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.18%)</title><rect x="47.9141%" y="549" width="0.1840%" height="15" fill="rgb(253,82,12)" fg:x="781" fg:w="3"/><text x="48.1641%" y="559.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="48.2209%" y="533" width="0.0613%" height="15" fill="rgb(245,42,11)" fg:x="786" fg:w="1"/><text x="48.4709%" y="543.50"></text></g><g><title>ObjectStorage (60 samples, 3.68%)</title><rect x="44.6626%" y="677" width="3.6810%" height="15" fill="rgb(219,147,32)" fg:x="728" fg:w="60"/><text x="44.9126%" y="687.50">Obje..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (60 samples, 3.68%)</title><rect x="44.6626%" y="661" width="3.6810%" height="15" fill="rgb(246,12,7)" fg:x="728" fg:w="60"/><text x="44.9126%" y="671.50">std:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (60 samples, 3.68%)</title><rect x="44.6626%" y="645" width="3.6810%" height="15" fill="rgb(243,50,9)" fg:x="728" fg:w="60"/><text x="44.9126%" y="655.50">&lt;all..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (60 samples, 3.68%)</title><rect x="44.6626%" y="629" width="3.6810%" height="15" fill="rgb(219,149,6)" fg:x="728" fg:w="60"/><text x="44.9126%" y="639.50">&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (60 samples, 3.68%)</title><rect x="44.6626%" y="613" width="3.6810%" height="15" fill="rgb(241,51,42)" fg:x="728" fg:w="60"/><text x="44.9126%" y="623.50">core..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (60 samples, 3.68%)</title><rect x="44.6626%" y="597" width="3.6810%" height="15" fill="rgb(226,128,27)" fg:x="728" fg:w="60"/><text x="44.9126%" y="607.50">std:..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (25 samples, 1.53%)</title><rect x="46.8098%" y="581" width="1.5337%" height="15" fill="rgb(244,144,4)" fg:x="763" fg:w="25"/><text x="47.0598%" y="591.50"></text></g><g><title>tokio::task::local::LocalSet::tick (4 samples, 0.25%)</title><rect x="48.0982%" y="565" width="0.2454%" height="15" fill="rgb(221,4,13)" fg:x="784" fg:w="4"/><text x="48.3482%" y="575.50"></text></g><g><title>tokio::runtime::task::raw::poll (2 samples, 0.12%)</title><rect x="48.2209%" y="549" width="0.1227%" height="15" fill="rgb(208,170,28)" fg:x="786" fg:w="2"/><text x="48.4709%" y="559.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv::{{closure}} (1 samples, 0.06%)</title><rect x="48.2822%" y="533" width="0.0613%" height="15" fill="rgb(226,131,13)" fg:x="787" fg:w="1"/><text x="48.5322%" y="543.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (1 samples, 0.06%)</title><rect x="48.2822%" y="517" width="0.0613%" height="15" fill="rgb(215,72,41)" fg:x="787" fg:w="1"/><text x="48.5322%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.06%)</title><rect x="50.2454%" y="549" width="0.0613%" height="15" fill="rgb(243,108,20)" fg:x="819" fg:w="1"/><text x="50.4954%" y="559.50"></text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.06%)</title><rect x="50.2454%" y="533" width="0.0613%" height="15" fill="rgb(230,189,17)" fg:x="819" fg:w="1"/><text x="50.4954%" y="543.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (12 samples, 0.74%)</title><rect x="49.7546%" y="565" width="0.7362%" height="15" fill="rgb(220,50,17)" fg:x="811" fg:w="12"/><text x="50.0046%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.18%)</title><rect x="50.3067%" y="549" width="0.1840%" height="15" fill="rgb(248,152,48)" fg:x="820" fg:w="3"/><text x="50.5567%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (2 samples, 0.12%)</title><rect x="51.4110%" y="549" width="0.1227%" height="15" fill="rgb(244,91,11)" fg:x="838" fg:w="2"/><text x="51.6610%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (5 samples, 0.31%)</title><rect x="51.5337%" y="549" width="0.3067%" height="15" fill="rgb(220,157,5)" fg:x="840" fg:w="5"/><text x="51.7837%" y="559.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (5 samples, 0.31%)</title><rect x="51.8405%" y="549" width="0.3067%" height="15" fill="rgb(253,137,8)" fg:x="845" fg:w="5"/><text x="52.0905%" y="559.50"></text></g><g><title>std::sys::unix::decode_error_kind (4 samples, 0.25%)</title><rect x="53.1902%" y="533" width="0.2454%" height="15" fill="rgb(217,137,51)" fg:x="867" fg:w="4"/><text x="53.4402%" y="543.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.06%)</title><rect x="53.9877%" y="501" width="0.0613%" height="15" fill="rgb(218,209,53)" fg:x="880" fg:w="1"/><text x="54.2377%" y="511.50"></text></g><g><title>tokio::runtime::io::Driver::turn (46 samples, 2.82%)</title><rect x="52.1472%" y="549" width="2.8221%" height="15" fill="rgb(249,137,25)" fg:x="850" fg:w="46"/><text x="52.3972%" y="559.50">to..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (25 samples, 1.53%)</title><rect x="53.4356%" y="533" width="1.5337%" height="15" fill="rgb(239,155,26)" fg:x="871" fg:w="25"/><text x="53.6856%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (19 samples, 1.17%)</title><rect x="53.8037%" y="517" width="1.1656%" height="15" fill="rgb(227,85,46)" fg:x="877" fg:w="19"/><text x="54.0537%" y="527.50"></text></g><g><title>tokio::task::local::Shared::schedule (15 samples, 0.92%)</title><rect x="54.0491%" y="501" width="0.9202%" height="15" fill="rgb(251,107,43)" fg:x="881" fg:w="15"/><text x="54.2991%" y="511.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (4 samples, 0.25%)</title><rect x="54.7239%" y="485" width="0.2454%" height="15" fill="rgb(234,170,33)" fg:x="892" fg:w="4"/><text x="54.9739%" y="495.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (1 samples, 0.06%)</title><rect x="54.9080%" y="469" width="0.0613%" height="15" fill="rgb(206,29,35)" fg:x="895" fg:w="1"/><text x="55.1580%" y="479.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.06%)</title><rect x="54.9693%" y="549" width="0.0613%" height="15" fill="rgb(227,138,25)" fg:x="896" fg:w="1"/><text x="55.2193%" y="559.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (75 samples, 4.60%)</title><rect x="50.4908%" y="565" width="4.6012%" height="15" fill="rgb(249,131,35)" fg:x="823" fg:w="75"/><text x="50.7408%" y="575.50">tokio..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.06%)</title><rect x="55.0307%" y="549" width="0.0613%" height="15" fill="rgb(239,6,40)" fg:x="897" fg:w="1"/><text x="55.2807%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (119 samples, 7.30%)</title><rect x="48.9571%" y="581" width="7.3006%" height="15" fill="rgb(246,136,47)" fg:x="798" fg:w="119"/><text x="49.2071%" y="591.50">tokio::run..</text></g><g><title>tokio_uring::runtime::Runtime::new::{{closure}} (19 samples, 1.17%)</title><rect x="55.0920%" y="565" width="1.1656%" height="15" fill="rgb(253,58,26)" fg:x="898" fg:w="19"/><text x="55.3420%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (2 samples, 0.12%)</title><rect x="56.2577%" y="581" width="0.1227%" height="15" fill="rgb(237,141,10)" fg:x="917" fg:w="2"/><text x="56.5077%" y="591.50"></text></g><g><title>client::session_manager::SessionManager::get_composite_session::{{closure}} (1 samples, 0.06%)</title><rect x="57.6687%" y="549" width="0.0613%" height="15" fill="rgb(234,156,12)" fg:x="940" fg:w="1"/><text x="57.9187%" y="559.50"></text></g><g><title>client::composite_session::CompositeSession::refresh_placement_driver_cluster::{{closure}} (1 samples, 0.06%)</title><rect x="57.6687%" y="533" width="0.0613%" height="15" fill="rgb(243,224,36)" fg:x="940" fg:w="1"/><text x="57.9187%" y="543.50"></text></g><g><title>client::session::Session::write::{{closure}} (1 samples, 0.06%)</title><rect x="57.6687%" y="517" width="0.0613%" height="15" fill="rgb(205,229,51)" fg:x="940" fg:w="1"/><text x="57.9187%" y="527.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv::{{closure}} (9 samples, 0.55%)</title><rect x="57.7301%" y="549" width="0.5521%" height="15" fill="rgb(223,189,4)" fg:x="941" fg:w="9"/><text x="57.9801%" y="559.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (7 samples, 0.43%)</title><rect x="57.8528%" y="533" width="0.4294%" height="15" fill="rgb(249,167,54)" fg:x="943" fg:w="7"/><text x="58.1028%" y="543.50"></text></g><g><title>range_server::worker::Worker&lt;S,M&gt;::serve::{{closure}} (35 samples, 2.15%)</title><rect x="56.9325%" y="565" width="2.1472%" height="15" fill="rgb(218,34,28)" fg:x="928" fg:w="35"/><text x="57.1825%" y="575.50">r..</text></g><g><title>tokio_uring::net::tcp::listener::TcpListener::accept::{{closure}} (13 samples, 0.80%)</title><rect x="58.2822%" y="549" width="0.7975%" height="15" fill="rgb(232,109,42)" fg:x="950" fg:w="13"/><text x="58.5322%" y="559.50"></text></g><g><title>&lt;observation::metrics::store_metrics::STORE_FAILED_APPEND_COUNT as core::ops::deref::Deref&gt;::deref (3 samples, 0.18%)</title><rect x="64.4785%" y="533" width="0.1840%" height="15" fill="rgb(248,214,46)" fg:x="1051" fg:w="3"/><text x="64.7285%" y="543.50"></text></g><g><title>&lt;range_server::metrics::APPEND_LATENCY as core::ops::deref::Deref&gt;::deref (2 samples, 0.12%)</title><rect x="64.6626%" y="533" width="0.1227%" height="15" fill="rgb(244,216,40)" fg:x="1054" fg:w="2"/><text x="64.9126%" y="543.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="64.7853%" y="533" width="0.0613%" height="15" fill="rgb(231,226,31)" fg:x="1056" fg:w="1"/><text x="65.0353%" y="543.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.06%)</title><rect x="65.2761%" y="501" width="0.0613%" height="15" fill="rgb(238,38,43)" fg:x="1064" fg:w="1"/><text x="65.5261%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.12%)</title><rect x="65.3374%" y="501" width="0.1227%" height="15" fill="rgb(208,88,43)" fg:x="1065" fg:w="2"/><text x="65.5874%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.12%)</title><rect x="65.3374%" y="485" width="0.1227%" height="15" fill="rgb(205,136,37)" fg:x="1065" fg:w="2"/><text x="65.5874%" y="495.50"></text></g><g><title>do_rallocx (1 samples, 0.06%)</title><rect x="65.3988%" y="469" width="0.0613%" height="15" fill="rgb(237,34,14)" fg:x="1066" fg:w="1"/><text x="65.6488%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.12%)</title><rect x="65.5215%" y="485" width="0.1227%" height="15" fill="rgb(236,193,44)" fg:x="1068" fg:w="2"/><text x="65.7715%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="65.5828%" y="469" width="0.0613%" height="15" fill="rgb(231,48,10)" fg:x="1069" fg:w="1"/><text x="65.8328%" y="479.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="65.5828%" y="453" width="0.0613%" height="15" fill="rgb(213,141,34)" fg:x="1069" fg:w="1"/><text x="65.8328%" y="463.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="65.5828%" y="437" width="0.0613%" height="15" fill="rgb(249,130,34)" fg:x="1069" fg:w="1"/><text x="65.8328%" y="447.50"></text></g><g><title>core::str::pattern::StrSearcher::new (4 samples, 0.25%)</title><rect x="65.6442%" y="485" width="0.2454%" height="15" fill="rgb(219,42,41)" fg:x="1070" fg:w="4"/><text x="65.8942%" y="495.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (4 samples, 0.25%)</title><rect x="65.6442%" y="469" width="0.2454%" height="15" fill="rgb(224,100,54)" fg:x="1070" fg:w="4"/><text x="65.8942%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (4 samples, 0.25%)</title><rect x="65.6442%" y="453" width="0.2454%" height="15" fill="rgb(229,200,27)" fg:x="1070" fg:w="4"/><text x="65.8942%" y="463.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::replace (8 samples, 0.49%)</title><rect x="65.4601%" y="501" width="0.4908%" height="15" fill="rgb(217,118,10)" fg:x="1067" fg:w="8"/><text x="65.7101%" y="511.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (1 samples, 0.06%)</title><rect x="65.8896%" y="485" width="0.0613%" height="15" fill="rgb(206,22,3)" fg:x="1074" fg:w="1"/><text x="66.1396%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (3 samples, 0.18%)</title><rect x="65.9509%" y="501" width="0.1840%" height="15" fill="rgb(232,163,46)" fg:x="1075" fg:w="3"/><text x="66.2009%" y="511.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.06%)</title><rect x="66.1350%" y="485" width="0.0613%" height="15" fill="rgb(206,95,13)" fg:x="1078" fg:w="1"/><text x="66.3850%" y="495.50"></text></g><g><title>isfree (1 samples, 0.06%)</title><rect x="66.1350%" y="469" width="0.0613%" height="15" fill="rgb(253,154,18)" fg:x="1078" fg:w="1"/><text x="66.3850%" y="479.50"></text></g><g><title>thread_dalloc_event (1 samples, 0.06%)</title><rect x="66.1350%" y="453" width="0.0613%" height="15" fill="rgb(219,32,23)" fg:x="1078" fg:w="1"/><text x="66.3850%" y="463.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="66.1350%" y="437" width="0.0613%" height="15" fill="rgb(230,191,45)" fg:x="1078" fg:w="1"/><text x="66.3850%" y="447.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="66.1350%" y="421" width="0.0613%" height="15" fill="rgb(229,64,36)" fg:x="1078" fg:w="1"/><text x="66.3850%" y="431.50"></text></g><g><title>core::num::from_str_radix (1 samples, 0.06%)</title><rect x="66.1963%" y="485" width="0.0613%" height="15" fill="rgb(205,129,25)" fg:x="1079" fg:w="1"/><text x="66.4463%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="66.2577%" y="485" width="0.0613%" height="15" fill="rgb(254,112,7)" fg:x="1080" fg:w="1"/><text x="66.5077%" y="495.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.06%)</title><rect x="66.2577%" y="469" width="0.0613%" height="15" fill="rgb(226,53,48)" fg:x="1080" fg:w="1"/><text x="66.5077%" y="479.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.06%)</title><rect x="66.3190%" y="485" width="0.0613%" height="15" fill="rgb(214,153,38)" fg:x="1081" fg:w="1"/><text x="66.5690%" y="495.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.06%)</title><rect x="66.3190%" y="469" width="0.0613%" height="15" fill="rgb(243,101,7)" fg:x="1081" fg:w="1"/><text x="66.5690%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.06%)</title><rect x="66.3190%" y="453" width="0.0613%" height="15" fill="rgb(240,140,22)" fg:x="1081" fg:w="1"/><text x="66.5690%" y="463.50"></text></g><g><title>std::path::Path::_join (2 samples, 0.12%)</title><rect x="66.3804%" y="485" width="0.1227%" height="15" fill="rgb(235,114,2)" fg:x="1082" fg:w="2"/><text x="66.6304%" y="495.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 0.06%)</title><rect x="66.4417%" y="469" width="0.0613%" height="15" fill="rgb(242,59,12)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="479.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.06%)</title><rect x="66.4417%" y="453" width="0.0613%" height="15" fill="rgb(252,134,9)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="463.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.06%)</title><rect x="66.4417%" y="437" width="0.0613%" height="15" fill="rgb(236,4,44)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="447.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.06%)</title><rect x="66.4417%" y="421" width="0.0613%" height="15" fill="rgb(254,172,41)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="66.4417%" y="405" width="0.0613%" height="15" fill="rgb(244,63,20)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="66.4417%" y="389" width="0.0613%" height="15" fill="rgb(250,73,31)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="66.4417%" y="373" width="0.0613%" height="15" fill="rgb(241,38,36)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="66.4417%" y="357" width="0.0613%" height="15" fill="rgb(245,211,2)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="66.4417%" y="341" width="0.0613%" height="15" fill="rgb(206,120,28)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="66.4417%" y="325" width="0.0613%" height="15" fill="rgb(211,59,34)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.06%)</title><rect x="66.4417%" y="309" width="0.0613%" height="15" fill="rgb(233,168,5)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.06%)</title><rect x="66.4417%" y="293" width="0.0613%" height="15" fill="rgb(234,33,13)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.06%)</title><rect x="66.4417%" y="277" width="0.0613%" height="15" fill="rgb(231,150,26)" fg:x="1083" fg:w="1"/><text x="66.6917%" y="287.50"></text></g><g><title>std::io::error::Error::kind (1 samples, 0.06%)</title><rect x="66.5644%" y="437" width="0.0613%" height="15" fill="rgb(217,191,4)" fg:x="1085" fg:w="1"/><text x="66.8144%" y="447.50"></text></g><g><title>std::sys::unix::decode_error_kind (1 samples, 0.06%)</title><rect x="66.5644%" y="421" width="0.0613%" height="15" fill="rgb(246,198,38)" fg:x="1085" fg:w="1"/><text x="66.8144%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::open_c (2 samples, 0.12%)</title><rect x="66.5644%" y="469" width="0.1227%" height="15" fill="rgb(245,64,37)" fg:x="1085" fg:w="2"/><text x="66.8144%" y="479.50"></text></g><g><title>std::sys::unix::cvt_r (2 samples, 0.12%)</title><rect x="66.5644%" y="453" width="0.1227%" height="15" fill="rgb(250,30,36)" fg:x="1085" fg:w="2"/><text x="66.8144%" y="463.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.06%)</title><rect x="66.6258%" y="437" width="0.0613%" height="15" fill="rgb(217,86,53)" fg:x="1086" fg:w="1"/><text x="66.8758%" y="447.50"></text></g><g><title>_rjem_je_emap_update_edata_state (2 samples, 0.12%)</title><rect x="66.7485%" y="69" width="0.1227%" height="15" fill="rgb(228,157,16)" fg:x="1088" fg:w="2"/><text x="66.9985%" y="79.50"></text></g><g><title>rtree_leaf_elm_lookup (2 samples, 0.12%)</title><rect x="66.7485%" y="53" width="0.1227%" height="15" fill="rgb(217,59,31)" fg:x="1088" fg:w="2"/><text x="66.9985%" y="63.50"></text></g><g><title>rtree_cache_direct_map (2 samples, 0.12%)</title><rect x="66.7485%" y="37" width="0.1227%" height="15" fill="rgb(237,138,41)" fg:x="1088" fg:w="2"/><text x="66.9985%" y="47.50"></text></g><g><title>iralloct (4 samples, 0.25%)</title><rect x="66.6871%" y="325" width="0.2454%" height="15" fill="rgb(227,91,49)" fg:x="1087" fg:w="4"/><text x="66.9371%" y="335.50"></text></g><g><title>_rjem_je_arena_ralloc (4 samples, 0.25%)</title><rect x="66.6871%" y="309" width="0.2454%" height="15" fill="rgb(247,21,44)" fg:x="1087" fg:w="4"/><text x="66.9371%" y="319.50"></text></g><g><title>arena_ralloc_move_helper (3 samples, 0.18%)</title><rect x="66.7485%" y="293" width="0.1840%" height="15" fill="rgb(219,210,51)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="303.50"></text></g><g><title>arena_malloc (3 samples, 0.18%)</title><rect x="66.7485%" y="277" width="0.1840%" height="15" fill="rgb(209,140,6)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="287.50"></text></g><g><title>tcache_alloc_small (3 samples, 0.18%)</title><rect x="66.7485%" y="261" width="0.1840%" height="15" fill="rgb(221,188,24)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="271.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (3 samples, 0.18%)</title><rect x="66.7485%" y="245" width="0.1840%" height="15" fill="rgb(232,154,20)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="255.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (3 samples, 0.18%)</title><rect x="66.7485%" y="229" width="0.1840%" height="15" fill="rgb(244,137,50)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="239.50"></text></g><g><title>arena_slab_alloc (3 samples, 0.18%)</title><rect x="66.7485%" y="213" width="0.1840%" height="15" fill="rgb(225,185,43)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="223.50"></text></g><g><title>_rjem_je_pa_alloc (3 samples, 0.18%)</title><rect x="66.7485%" y="197" width="0.1840%" height="15" fill="rgb(213,205,38)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="207.50"></text></g><g><title>pai_alloc (3 samples, 0.18%)</title><rect x="66.7485%" y="181" width="0.1840%" height="15" fill="rgb(236,73,12)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="191.50"></text></g><g><title>pac_alloc_impl (3 samples, 0.18%)</title><rect x="66.7485%" y="165" width="0.1840%" height="15" fill="rgb(235,219,13)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="175.50"></text></g><g><title>pac_alloc_real (3 samples, 0.18%)</title><rect x="66.7485%" y="149" width="0.1840%" height="15" fill="rgb(218,59,36)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="159.50"></text></g><g><title>_rjem_je_ecache_alloc (3 samples, 0.18%)</title><rect x="66.7485%" y="133" width="0.1840%" height="15" fill="rgb(205,110,39)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="143.50"></text></g><g><title>extent_recycle (3 samples, 0.18%)</title><rect x="66.7485%" y="117" width="0.1840%" height="15" fill="rgb(218,206,42)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="127.50"></text></g><g><title>extent_recycle_extract (3 samples, 0.18%)</title><rect x="66.7485%" y="101" width="0.1840%" height="15" fill="rgb(248,125,24)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="111.50"></text></g><g><title>extent_activate_locked (3 samples, 0.18%)</title><rect x="66.7485%" y="85" width="0.1840%" height="15" fill="rgb(242,28,27)" fg:x="1088" fg:w="3"/><text x="66.9985%" y="95.50"></text></g><g><title>_rjem_je_eset_remove (1 samples, 0.06%)</title><rect x="66.8712%" y="69" width="0.0613%" height="15" fill="rgb(216,228,15)" fg:x="1090" fg:w="1"/><text x="67.1212%" y="79.50"></text></g><g><title>eset_stats_sub (1 samples, 0.06%)</title><rect x="66.8712%" y="53" width="0.0613%" height="15" fill="rgb(235,116,46)" fg:x="1090" fg:w="1"/><text x="67.1212%" y="63.50"></text></g><g><title>atomic_load_zu (1 samples, 0.06%)</title><rect x="66.8712%" y="37" width="0.0613%" height="15" fill="rgb(224,18,32)" fg:x="1090" fg:w="1"/><text x="67.1212%" y="47.50"></text></g><g><title>alloc::string::String::reserve (5 samples, 0.31%)</title><rect x="66.6871%" y="437" width="0.3067%" height="15" fill="rgb(252,5,12)" fg:x="1087" fg:w="5"/><text x="66.9371%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.31%)</title><rect x="66.6871%" y="421" width="0.3067%" height="15" fill="rgb(251,36,5)" fg:x="1087" fg:w="5"/><text x="66.9371%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.31%)</title><rect x="66.6871%" y="405" width="0.3067%" height="15" fill="rgb(217,53,14)" fg:x="1087" fg:w="5"/><text x="66.9371%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.31%)</title><rect x="66.6871%" y="389" width="0.3067%" height="15" fill="rgb(215,86,45)" fg:x="1087" fg:w="5"/><text x="66.9371%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.31%)</title><rect x="66.6871%" y="373" width="0.3067%" height="15" fill="rgb(242,169,11)" fg:x="1087" fg:w="5"/><text x="66.9371%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.31%)</title><rect x="66.6871%" y="357" width="0.3067%" height="15" fill="rgb(211,213,45)" fg:x="1087" fg:w="5"/><text x="66.9371%" y="367.50"></text></g><g><title>do_rallocx (5 samples, 0.31%)</title><rect x="66.6871%" y="341" width="0.3067%" height="15" fill="rgb(205,88,11)" fg:x="1087" fg:w="5"/><text x="66.9371%" y="351.50"></text></g><g><title>thread_alloc_event (1 samples, 0.06%)</title><rect x="66.9325%" y="325" width="0.0613%" height="15" fill="rgb(252,69,26)" fg:x="1091" fg:w="1"/><text x="67.1825%" y="335.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="66.9325%" y="309" width="0.0613%" height="15" fill="rgb(246,123,37)" fg:x="1091" fg:w="1"/><text x="67.1825%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (33 samples, 2.02%)</title><rect x="65.0307%" y="517" width="2.0245%" height="15" fill="rgb(212,205,5)" fg:x="1060" fg:w="33"/><text x="65.2807%" y="527.50">&lt;..</text></g><g><title>sysinfo::linux::disk::find_type_for_device_name (15 samples, 0.92%)</title><rect x="66.1350%" y="501" width="0.9202%" height="15" fill="rgb(253,148,0)" fg:x="1078" fg:w="15"/><text x="66.3850%" y="511.50"></text></g><g><title>sysinfo::linux::utils::get_all_data (9 samples, 0.55%)</title><rect x="66.5031%" y="485" width="0.5521%" height="15" fill="rgb(239,22,4)" fg:x="1084" fg:w="9"/><text x="66.7531%" y="495.50"></text></g><g><title>sysinfo::linux::utils::get_all_data_from_file (6 samples, 0.37%)</title><rect x="66.6871%" y="469" width="0.3681%" height="15" fill="rgb(226,26,53)" fg:x="1087" fg:w="6"/><text x="66.9371%" y="479.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (6 samples, 0.37%)</title><rect x="66.6871%" y="453" width="0.3681%" height="15" fill="rgb(225,229,45)" fg:x="1087" fg:w="6"/><text x="66.9371%" y="463.50"></text></g><g><title>std::fs::buffer_capacity_required (1 samples, 0.06%)</title><rect x="66.9939%" y="437" width="0.0613%" height="15" fill="rgb(220,60,37)" fg:x="1092" fg:w="1"/><text x="67.2439%" y="447.50"></text></g><g><title>_rjem_je_edata_cache_put (1 samples, 0.06%)</title><rect x="67.1166%" y="261" width="0.0613%" height="15" fill="rgb(217,180,35)" fg:x="1094" fg:w="1"/><text x="67.3666%" y="271.50"></text></g><g><title>_rjem_je_edata_avail_insert (1 samples, 0.06%)</title><rect x="67.1166%" y="245" width="0.0613%" height="15" fill="rgb(229,7,53)" fg:x="1094" fg:w="1"/><text x="67.3666%" y="255.50"></text></g><g><title>ph_insert (1 samples, 0.06%)</title><rect x="67.1166%" y="229" width="0.0613%" height="15" fill="rgb(254,137,3)" fg:x="1094" fg:w="1"/><text x="67.3666%" y="239.50"></text></g><g><title>ph_try_aux_merge_pair (1 samples, 0.06%)</title><rect x="67.1166%" y="213" width="0.0613%" height="15" fill="rgb(215,140,41)" fg:x="1094" fg:w="1"/><text x="67.3666%" y="223.50"></text></g><g><title>phn_merge (1 samples, 0.06%)</title><rect x="67.1166%" y="197" width="0.0613%" height="15" fill="rgb(250,80,15)" fg:x="1094" fg:w="1"/><text x="67.3666%" y="207.50"></text></g><g><title>large_dalloc_finish_impl (2 samples, 0.12%)</title><rect x="67.1166%" y="373" width="0.1227%" height="15" fill="rgb(252,191,6)" fg:x="1094" fg:w="2"/><text x="67.3666%" y="383.50"></text></g><g><title>pac_dalloc_impl (2 samples, 0.12%)</title><rect x="67.1166%" y="357" width="0.1227%" height="15" fill="rgb(246,217,18)" fg:x="1094" fg:w="2"/><text x="67.3666%" y="367.50"></text></g><g><title>_rjem_je_extent_record (2 samples, 0.12%)</title><rect x="67.1166%" y="341" width="0.1227%" height="15" fill="rgb(223,93,7)" fg:x="1094" fg:w="2"/><text x="67.3666%" y="351.50"></text></g><g><title>extent_try_coalesce_large (2 samples, 0.12%)</title><rect x="67.1166%" y="325" width="0.1227%" height="15" fill="rgb(225,55,52)" fg:x="1094" fg:w="2"/><text x="67.3666%" y="335.50"></text></g><g><title>extent_try_coalesce_impl (2 samples, 0.12%)</title><rect x="67.1166%" y="309" width="0.1227%" height="15" fill="rgb(240,31,24)" fg:x="1094" fg:w="2"/><text x="67.3666%" y="319.50"></text></g><g><title>extent_coalesce (2 samples, 0.12%)</title><rect x="67.1166%" y="293" width="0.1227%" height="15" fill="rgb(205,56,52)" fg:x="1094" fg:w="2"/><text x="67.3666%" y="303.50"></text></g><g><title>extent_merge_impl (2 samples, 0.12%)</title><rect x="67.1166%" y="277" width="0.1227%" height="15" fill="rgb(246,146,12)" fg:x="1094" fg:w="2"/><text x="67.3666%" y="287.50"></text></g><g><title>ehooks_merge (1 samples, 0.06%)</title><rect x="67.1779%" y="261" width="0.0613%" height="15" fill="rgb(239,84,36)" fg:x="1095" fg:w="1"/><text x="67.4279%" y="271.50"></text></g><g><title>_rjem_je_ehooks_default_merge_impl (1 samples, 0.06%)</title><rect x="67.1779%" y="245" width="0.0613%" height="15" fill="rgb(207,41,40)" fg:x="1095" fg:w="1"/><text x="67.4279%" y="255.50"></text></g><g><title>_rjem_je_extent_dss_mergeable (1 samples, 0.06%)</title><rect x="67.1779%" y="229" width="0.0613%" height="15" fill="rgb(241,179,25)" fg:x="1095" fg:w="1"/><text x="67.4279%" y="239.50"></text></g><g><title>atomic_load_p (1 samples, 0.06%)</title><rect x="67.1779%" y="213" width="0.0613%" height="15" fill="rgb(210,0,34)" fg:x="1095" fg:w="1"/><text x="67.4279%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.25%)</title><rect x="67.0552%" y="517" width="0.2454%" height="15" fill="rgb(225,217,29)" fg:x="1093" fg:w="4"/><text x="67.3052%" y="527.50"></text></g><g><title>&lt;std::sys::unix::fs::Dir as core::ops::drop::Drop&gt;::drop (4 samples, 0.25%)</title><rect x="67.0552%" y="501" width="0.2454%" height="15" fill="rgb(216,191,38)" fg:x="1093" fg:w="4"/><text x="67.3052%" y="511.50"></text></g><g><title>closedir (4 samples, 0.25%)</title><rect x="67.0552%" y="485" width="0.2454%" height="15" fill="rgb(232,140,52)" fg:x="1093" fg:w="4"/><text x="67.3052%" y="495.50"></text></g><g><title>_rjem_je_free_default (4 samples, 0.25%)</title><rect x="67.0552%" y="469" width="0.2454%" height="15" fill="rgb(223,158,51)" fg:x="1093" fg:w="4"/><text x="67.3052%" y="479.50"></text></g><g><title>ifree (3 samples, 0.18%)</title><rect x="67.1166%" y="453" width="0.1840%" height="15" fill="rgb(235,29,51)" fg:x="1094" fg:w="3"/><text x="67.3666%" y="463.50"></text></g><g><title>idalloctm (3 samples, 0.18%)</title><rect x="67.1166%" y="437" width="0.1840%" height="15" fill="rgb(215,181,18)" fg:x="1094" fg:w="3"/><text x="67.3666%" y="447.50"></text></g><g><title>arena_dalloc (3 samples, 0.18%)</title><rect x="67.1166%" y="421" width="0.1840%" height="15" fill="rgb(227,125,34)" fg:x="1094" fg:w="3"/><text x="67.3666%" y="431.50"></text></g><g><title>arena_dalloc_large (3 samples, 0.18%)</title><rect x="67.1166%" y="405" width="0.1840%" height="15" fill="rgb(230,197,49)" fg:x="1094" fg:w="3"/><text x="67.3666%" y="415.50"></text></g><g><title>_rjem_je_large_dalloc (3 samples, 0.18%)</title><rect x="67.1166%" y="389" width="0.1840%" height="15" fill="rgb(239,141,16)" fg:x="1094" fg:w="3"/><text x="67.3666%" y="399.50"></text></g><g><title>large_dalloc_prep_impl (1 samples, 0.06%)</title><rect x="67.2393%" y="373" width="0.0613%" height="15" fill="rgb(225,105,43)" fg:x="1096" fg:w="1"/><text x="67.4893%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.06%)</title><rect x="67.3006%" y="517" width="0.0613%" height="15" fill="rgb(214,131,14)" fg:x="1097" fg:w="1"/><text x="67.5506%" y="527.50"></text></g><g><title>std::path::Path::to_path_buf (1 samples, 0.06%)</title><rect x="67.3620%" y="501" width="0.0613%" height="15" fill="rgb(229,177,11)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="511.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (1 samples, 0.06%)</title><rect x="67.3620%" y="485" width="0.0613%" height="15" fill="rgb(231,180,14)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="495.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.06%)</title><rect x="67.3620%" y="469" width="0.0613%" height="15" fill="rgb(232,88,2)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.06%)</title><rect x="67.3620%" y="453" width="0.0613%" height="15" fill="rgb(205,220,8)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="67.3620%" y="437" width="0.0613%" height="15" fill="rgb(225,23,53)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="67.3620%" y="421" width="0.0613%" height="15" fill="rgb(213,62,29)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="67.3620%" y="405" width="0.0613%" height="15" fill="rgb(227,75,7)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="67.3620%" y="389" width="0.0613%" height="15" fill="rgb(207,105,14)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="67.3620%" y="373" width="0.0613%" height="15" fill="rgb(245,62,29)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.06%)</title><rect x="67.3620%" y="357" width="0.0613%" height="15" fill="rgb(236,202,4)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.06%)</title><rect x="67.3620%" y="341" width="0.0613%" height="15" fill="rgb(250,67,1)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.06%)</title><rect x="67.3620%" y="325" width="0.0613%" height="15" fill="rgb(253,115,44)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.06%)</title><rect x="67.3620%" y="309" width="0.0613%" height="15" fill="rgb(251,139,18)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="319.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="67.3620%" y="293" width="0.0613%" height="15" fill="rgb(218,22,32)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="303.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="67.3620%" y="277" width="0.0613%" height="15" fill="rgb(243,53,5)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="287.50"></text></g><g><title>sz_size2index_usize_fastpath (1 samples, 0.06%)</title><rect x="67.3620%" y="261" width="0.0613%" height="15" fill="rgb(227,56,16)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="271.50"></text></g><g><title>sz_index2size_lookup_impl (1 samples, 0.06%)</title><rect x="67.3620%" y="245" width="0.0613%" height="15" fill="rgb(245,53,0)" fg:x="1098" fg:w="1"/><text x="67.6120%" y="255.50"></text></g><g><title>_rjem_je_arena_malloc_hard (1 samples, 0.06%)</title><rect x="67.4847%" y="341" width="0.0613%" height="15" fill="rgb(216,170,35)" fg:x="1100" fg:w="1"/><text x="67.7347%" y="351.50"></text></g><g><title>extent_recycle_extract (2 samples, 0.12%)</title><rect x="67.6074%" y="213" width="0.1227%" height="15" fill="rgb(211,200,8)" fg:x="1102" fg:w="2"/><text x="67.8574%" y="223.50"></text></g><g><title>_rjem_je_eset_fit (2 samples, 0.12%)</title><rect x="67.6074%" y="197" width="0.1227%" height="15" fill="rgb(228,204,44)" fg:x="1102" fg:w="2"/><text x="67.8574%" y="207.50"></text></g><g><title>eset_first_fit (1 samples, 0.06%)</title><rect x="67.6687%" y="181" width="0.0613%" height="15" fill="rgb(214,121,17)" fg:x="1103" fg:w="1"/><text x="67.9187%" y="191.50"></text></g><g><title>_rjem_je_sz_psz_quantize_ceil (1 samples, 0.06%)</title><rect x="67.6687%" y="165" width="0.0613%" height="15" fill="rgb(233,64,38)" fg:x="1103" fg:w="1"/><text x="67.9187%" y="175.50"></text></g><g><title>extent_deactivate_locked (1 samples, 0.06%)</title><rect x="67.7301%" y="197" width="0.0613%" height="15" fill="rgb(253,54,19)" fg:x="1104" fg:w="1"/><text x="67.9801%" y="207.50"></text></g><g><title>extent_deactivate_locked_impl (1 samples, 0.06%)</title><rect x="67.7301%" y="181" width="0.0613%" height="15" fill="rgb(253,94,18)" fg:x="1104" fg:w="1"/><text x="67.9801%" y="191.50"></text></g><g><title>_rjem_je_eset_insert (1 samples, 0.06%)</title><rect x="67.7301%" y="165" width="0.0613%" height="15" fill="rgb(227,57,52)" fg:x="1104" fg:w="1"/><text x="67.9801%" y="175.50"></text></g><g><title>eset_stats_add (1 samples, 0.06%)</title><rect x="67.7301%" y="149" width="0.0613%" height="15" fill="rgb(230,228,50)" fg:x="1104" fg:w="1"/><text x="67.9801%" y="159.50"></text></g><g><title>atomic_load_zu (1 samples, 0.06%)</title><rect x="67.7301%" y="133" width="0.0613%" height="15" fill="rgb(217,205,27)" fg:x="1104" fg:w="1"/><text x="67.9801%" y="143.50"></text></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.06%)</title><rect x="67.7914%" y="165" width="0.0613%" height="15" fill="rgb(252,71,50)" fg:x="1105" fg:w="1"/><text x="68.0414%" y="175.50"></text></g><g><title>_rjem_je_ecache_alloc (6 samples, 0.37%)</title><rect x="67.5460%" y="245" width="0.3681%" height="15" fill="rgb(209,86,4)" fg:x="1101" fg:w="6"/><text x="67.7960%" y="255.50"></text></g><g><title>extent_recycle (6 samples, 0.37%)</title><rect x="67.5460%" y="229" width="0.3681%" height="15" fill="rgb(229,94,0)" fg:x="1101" fg:w="6"/><text x="67.7960%" y="239.50"></text></g><g><title>extent_recycle_split (3 samples, 0.18%)</title><rect x="67.7301%" y="213" width="0.1840%" height="15" fill="rgb(252,223,21)" fg:x="1104" fg:w="3"/><text x="67.9801%" y="223.50"></text></g><g><title>extent_split_interior (2 samples, 0.12%)</title><rect x="67.7914%" y="197" width="0.1227%" height="15" fill="rgb(230,210,4)" fg:x="1105" fg:w="2"/><text x="68.0414%" y="207.50"></text></g><g><title>extent_split_impl (2 samples, 0.12%)</title><rect x="67.7914%" y="181" width="0.1227%" height="15" fill="rgb(240,149,38)" fg:x="1105" fg:w="2"/><text x="68.0414%" y="191.50"></text></g><g><title>ehooks_split_will_fail (1 samples, 0.06%)</title><rect x="67.8528%" y="165" width="0.0613%" height="15" fill="rgb(254,105,20)" fg:x="1106" fg:w="1"/><text x="68.1028%" y="175.50"></text></g><g><title>ehooks_get_extent_hooks_ptr (1 samples, 0.06%)</title><rect x="67.8528%" y="149" width="0.0613%" height="15" fill="rgb(253,87,46)" fg:x="1106" fg:w="1"/><text x="68.1028%" y="159.50"></text></g><g><title>atomic_load_p (1 samples, 0.06%)</title><rect x="67.8528%" y="133" width="0.0613%" height="15" fill="rgb(253,116,33)" fg:x="1106" fg:w="1"/><text x="68.1028%" y="143.50"></text></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.06%)</title><rect x="67.9141%" y="149" width="0.0613%" height="15" fill="rgb(229,198,5)" fg:x="1107" fg:w="1"/><text x="68.1641%" y="159.50"></text></g><g><title>_rjem_je_pa_alloc (8 samples, 0.49%)</title><rect x="67.5460%" y="309" width="0.4908%" height="15" fill="rgb(242,38,37)" fg:x="1101" fg:w="8"/><text x="67.7960%" y="319.50"></text></g><g><title>pai_alloc (8 samples, 0.49%)</title><rect x="67.5460%" y="293" width="0.4908%" height="15" fill="rgb(242,69,53)" fg:x="1101" fg:w="8"/><text x="67.7960%" y="303.50"></text></g><g><title>pac_alloc_impl (8 samples, 0.49%)</title><rect x="67.5460%" y="277" width="0.4908%" height="15" fill="rgb(249,80,16)" fg:x="1101" fg:w="8"/><text x="67.7960%" y="287.50"></text></g><g><title>pac_alloc_real (8 samples, 0.49%)</title><rect x="67.5460%" y="261" width="0.4908%" height="15" fill="rgb(206,128,11)" fg:x="1101" fg:w="8"/><text x="67.7960%" y="271.50"></text></g><g><title>_rjem_je_ecache_alloc_grow (2 samples, 0.12%)</title><rect x="67.9141%" y="245" width="0.1227%" height="15" fill="rgb(212,35,20)" fg:x="1107" fg:w="2"/><text x="68.1641%" y="255.50"></text></g><g><title>extent_alloc_retained (2 samples, 0.12%)</title><rect x="67.9141%" y="229" width="0.1227%" height="15" fill="rgb(236,79,13)" fg:x="1107" fg:w="2"/><text x="68.1641%" y="239.50"></text></g><g><title>extent_recycle (2 samples, 0.12%)</title><rect x="67.9141%" y="213" width="0.1227%" height="15" fill="rgb(233,123,3)" fg:x="1107" fg:w="2"/><text x="68.1641%" y="223.50"></text></g><g><title>extent_recycle_split (2 samples, 0.12%)</title><rect x="67.9141%" y="197" width="0.1227%" height="15" fill="rgb(214,93,52)" fg:x="1107" fg:w="2"/><text x="68.1641%" y="207.50"></text></g><g><title>extent_split_interior (2 samples, 0.12%)</title><rect x="67.9141%" y="181" width="0.1227%" height="15" fill="rgb(251,37,40)" fg:x="1107" fg:w="2"/><text x="68.1641%" y="191.50"></text></g><g><title>extent_split_impl (2 samples, 0.12%)</title><rect x="67.9141%" y="165" width="0.1227%" height="15" fill="rgb(227,80,54)" fg:x="1107" fg:w="2"/><text x="68.1641%" y="175.50"></text></g><g><title>ehooks_split (1 samples, 0.06%)</title><rect x="67.9755%" y="149" width="0.0613%" height="15" fill="rgb(254,48,11)" fg:x="1108" fg:w="1"/><text x="68.2255%" y="159.50"></text></g><g><title>imalloc_body (10 samples, 0.61%)</title><rect x="67.4847%" y="405" width="0.6135%" height="15" fill="rgb(235,193,26)" fg:x="1100" fg:w="10"/><text x="67.7347%" y="415.50"></text></g><g><title>imalloc_no_sample (10 samples, 0.61%)</title><rect x="67.4847%" y="389" width="0.6135%" height="15" fill="rgb(229,99,21)" fg:x="1100" fg:w="10"/><text x="67.7347%" y="399.50"></text></g><g><title>iallocztm (10 samples, 0.61%)</title><rect x="67.4847%" y="373" width="0.6135%" height="15" fill="rgb(211,140,41)" fg:x="1100" fg:w="10"/><text x="67.7347%" y="383.50"></text></g><g><title>arena_malloc (10 samples, 0.61%)</title><rect x="67.4847%" y="357" width="0.6135%" height="15" fill="rgb(240,227,30)" fg:x="1100" fg:w="10"/><text x="67.7347%" y="367.50"></text></g><g><title>_rjem_je_large_palloc (9 samples, 0.55%)</title><rect x="67.5460%" y="341" width="0.5521%" height="15" fill="rgb(215,224,45)" fg:x="1101" fg:w="9"/><text x="67.7960%" y="351.50"></text></g><g><title>_rjem_je_arena_extent_alloc_large (9 samples, 0.55%)</title><rect x="67.5460%" y="325" width="0.5521%" height="15" fill="rgb(206,123,31)" fg:x="1101" fg:w="9"/><text x="67.7960%" y="335.50"></text></g><g><title>san_large_extent_decide_guard (1 samples, 0.06%)</title><rect x="68.0368%" y="309" width="0.0613%" height="15" fill="rgb(210,138,16)" fg:x="1109" fg:w="1"/><text x="68.2868%" y="319.50"></text></g><g><title>std::sys::unix::fs::readdir (13 samples, 0.80%)</title><rect x="67.3620%" y="517" width="0.7975%" height="15" fill="rgb(228,57,28)" fg:x="1098" fg:w="13"/><text x="67.6120%" y="527.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (12 samples, 0.74%)</title><rect x="67.4233%" y="501" width="0.7362%" height="15" fill="rgb(242,170,10)" fg:x="1099" fg:w="12"/><text x="67.6733%" y="511.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (12 samples, 0.74%)</title><rect x="67.4233%" y="485" width="0.7362%" height="15" fill="rgb(228,214,39)" fg:x="1099" fg:w="12"/><text x="67.6733%" y="495.50"></text></g><g><title>std::sys::unix::fs::readdir::{{closure}} (12 samples, 0.74%)</title><rect x="67.4233%" y="469" width="0.7362%" height="15" fill="rgb(218,179,33)" fg:x="1099" fg:w="12"/><text x="67.6733%" y="479.50"></text></g><g><title>opendir (12 samples, 0.74%)</title><rect x="67.4233%" y="453" width="0.7362%" height="15" fill="rgb(235,193,39)" fg:x="1099" fg:w="12"/><text x="67.6733%" y="463.50"></text></g><g><title>_rjem_je_malloc_default (11 samples, 0.67%)</title><rect x="67.4847%" y="437" width="0.6748%" height="15" fill="rgb(219,221,36)" fg:x="1100" fg:w="11"/><text x="67.7347%" y="447.50"></text></g><g><title>imalloc (11 samples, 0.67%)</title><rect x="67.4847%" y="421" width="0.6748%" height="15" fill="rgb(248,218,19)" fg:x="1100" fg:w="11"/><text x="67.7347%" y="431.50"></text></g><g><title>tsd_fetch (1 samples, 0.06%)</title><rect x="68.0982%" y="405" width="0.0613%" height="15" fill="rgb(205,50,9)" fg:x="1110" fg:w="1"/><text x="68.3482%" y="415.50"></text></g><g><title>tsd_fetch_impl (1 samples, 0.06%)</title><rect x="68.0982%" y="389" width="0.0613%" height="15" fill="rgb(238,81,28)" fg:x="1110" fg:w="1"/><text x="68.3482%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (2 samples, 0.12%)</title><rect x="68.1595%" y="501" width="0.1227%" height="15" fill="rgb(235,110,19)" fg:x="1111" fg:w="2"/><text x="68.4095%" y="511.50"></text></g><g><title>std::io::default_read_to_string (2 samples, 0.12%)</title><rect x="68.1595%" y="485" width="0.1227%" height="15" fill="rgb(214,7,14)" fg:x="1111" fg:w="2"/><text x="68.4095%" y="495.50"></text></g><g><title>std::io::append_to_string (2 samples, 0.12%)</title><rect x="68.1595%" y="469" width="0.1227%" height="15" fill="rgb(211,77,3)" fg:x="1111" fg:w="2"/><text x="68.4095%" y="479.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="68.2209%" y="453" width="0.0613%" height="15" fill="rgb(229,5,9)" fg:x="1112" fg:w="1"/><text x="68.4709%" y="463.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.06%)</title><rect x="68.2209%" y="437" width="0.0613%" height="15" fill="rgb(225,90,11)" fg:x="1112" fg:w="1"/><text x="68.4709%" y="447.50"></text></g><g><title>_rjem_je_malloc_default (1 samples, 0.06%)</title><rect x="68.2822%" y="501" width="0.0613%" height="15" fill="rgb(242,56,8)" fg:x="1113" fg:w="1"/><text x="68.5322%" y="511.50"></text></g><g><title>imalloc (1 samples, 0.06%)</title><rect x="68.2822%" y="485" width="0.0613%" height="15" fill="rgb(249,212,39)" fg:x="1113" fg:w="1"/><text x="68.5322%" y="495.50"></text></g><g><title>imalloc_body (1 samples, 0.06%)</title><rect x="68.2822%" y="469" width="0.0613%" height="15" fill="rgb(236,90,9)" fg:x="1113" fg:w="1"/><text x="68.5322%" y="479.50"></text></g><g><title>thread_alloc_event (1 samples, 0.06%)</title><rect x="68.2822%" y="453" width="0.0613%" height="15" fill="rgb(206,88,35)" fg:x="1113" fg:w="1"/><text x="68.5322%" y="463.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="68.2822%" y="437" width="0.0613%" height="15" fill="rgb(205,126,30)" fg:x="1113" fg:w="1"/><text x="68.5322%" y="447.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="68.2822%" y="421" width="0.0613%" height="15" fill="rgb(230,176,12)" fg:x="1113" fg:w="1"/><text x="68.5322%" y="431.50"></text></g><g><title>tcache_event (1 samples, 0.06%)</title><rect x="68.2822%" y="405" width="0.0613%" height="15" fill="rgb(243,19,9)" fg:x="1113" fg:w="1"/><text x="68.5322%" y="415.50"></text></g><g><title>&lt;sysinfo::linux::system::System as sysinfo::traits::SystemExt&gt;::refresh_disks_list (58 samples, 3.56%)</title><rect x="64.8466%" y="533" width="3.5583%" height="15" fill="rgb(245,171,17)" fg:x="1057" fg:w="58"/><text x="65.0966%" y="543.50">&lt;sys..</text></g><g><title>sysinfo::linux::utils::get_all_data_from_file (4 samples, 0.25%)</title><rect x="68.1595%" y="517" width="0.2454%" height="15" fill="rgb(227,52,21)" fg:x="1111" fg:w="4"/><text x="68.4095%" y="527.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="68.3436%" y="501" width="0.0613%" height="15" fill="rgb(238,69,14)" fg:x="1114" fg:w="1"/><text x="68.5936%" y="511.50"></text></g><g><title>&lt;sysinfo::linux::system::System as sysinfo::traits::SystemExt&gt;::refresh_memory (3 samples, 0.18%)</title><rect x="68.4049%" y="533" width="0.1840%" height="15" fill="rgb(241,156,39)" fg:x="1115" fg:w="3"/><text x="68.6549%" y="543.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.06%)</title><rect x="68.5276%" y="517" width="0.0613%" height="15" fill="rgb(212,227,28)" fg:x="1117" fg:w="1"/><text x="68.7776%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.18%)</title><rect x="68.5890%" y="533" width="0.1840%" height="15" fill="rgb(209,118,27)" fg:x="1118" fg:w="3"/><text x="68.8390%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="68.7117%" y="517" width="0.0613%" height="15" fill="rgb(226,102,5)" fg:x="1120" fg:w="1"/><text x="68.9617%" y="527.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="68.7117%" y="501" width="0.0613%" height="15" fill="rgb(223,34,3)" fg:x="1120" fg:w="1"/><text x="68.9617%" y="511.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="68.7117%" y="485" width="0.0613%" height="15" fill="rgb(221,81,38)" fg:x="1120" fg:w="1"/><text x="68.9617%" y="495.50"></text></g><g><title>bytes::bytes::promotable_even_drop (1 samples, 0.06%)</title><rect x="68.7730%" y="533" width="0.0613%" height="15" fill="rgb(236,219,28)" fg:x="1121" fg:w="1"/><text x="69.0230%" y="543.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.06%)</title><rect x="68.8344%" y="533" width="0.0613%" height="15" fill="rgb(213,200,14)" fg:x="1122" fg:w="1"/><text x="69.0844%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (1 samples, 0.06%)</title><rect x="68.8957%" y="533" width="0.0613%" height="15" fill="rgb(240,33,19)" fg:x="1123" fg:w="1"/><text x="69.1457%" y="543.50"></text></g><g><title>client::composite_session::CompositeSession::refresh_sessions::{{closure}} (2 samples, 0.12%)</title><rect x="69.2638%" y="517" width="0.1227%" height="15" fill="rgb(233,113,27)" fg:x="1129" fg:w="2"/><text x="69.5138%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.12%)</title><rect x="69.2638%" y="501" width="0.1227%" height="15" fill="rgb(220,221,18)" fg:x="1129" fg:w="2"/><text x="69.5138%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.12%)</title><rect x="69.2638%" y="485" width="0.1227%" height="15" fill="rgb(238,92,8)" fg:x="1129" fg:w="2"/><text x="69.5138%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="69.3252%" y="469" width="0.0613%" height="15" fill="rgb(222,164,16)" fg:x="1130" fg:w="1"/><text x="69.5752%" y="479.50"></text></g><g><title>iralloct (3 samples, 0.18%)</title><rect x="69.5092%" y="405" width="0.1840%" height="15" fill="rgb(241,119,3)" fg:x="1133" fg:w="3"/><text x="69.7592%" y="415.50"></text></g><g><title>_rjem_je_arena_ralloc (3 samples, 0.18%)</title><rect x="69.5092%" y="389" width="0.1840%" height="15" fill="rgb(241,44,8)" fg:x="1133" fg:w="3"/><text x="69.7592%" y="399.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::create_byte_string (5 samples, 0.31%)</title><rect x="69.5092%" y="485" width="0.3067%" height="15" fill="rgb(230,36,40)" fg:x="1133" fg:w="5"/><text x="69.7592%" y="495.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.1731 (5 samples, 0.31%)</title><rect x="69.5092%" y="469" width="0.3067%" height="15" fill="rgb(243,16,36)" fg:x="1133" fg:w="5"/><text x="69.7592%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.31%)</title><rect x="69.5092%" y="453" width="0.3067%" height="15" fill="rgb(231,4,26)" fg:x="1133" fg:w="5"/><text x="69.7592%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.31%)</title><rect x="69.5092%" y="437" width="0.3067%" height="15" fill="rgb(240,9,31)" fg:x="1133" fg:w="5"/><text x="69.7592%" y="447.50"></text></g><g><title>do_rallocx (5 samples, 0.31%)</title><rect x="69.5092%" y="421" width="0.3067%" height="15" fill="rgb(207,173,15)" fg:x="1133" fg:w="5"/><text x="69.7592%" y="431.50"></text></g><g><title>zero_get (2 samples, 0.12%)</title><rect x="69.6933%" y="405" width="0.1227%" height="15" fill="rgb(224,192,53)" fg:x="1136" fg:w="2"/><text x="69.9433%" y="415.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (1 samples, 0.06%)</title><rect x="69.8160%" y="485" width="0.0613%" height="15" fill="rgb(223,67,28)" fg:x="1138" fg:w="1"/><text x="70.0660%" y="495.50"></text></g><g><title>model::range_server::&lt;impl core::convert::From&lt;&amp;model::range_server::RangeServer&gt; for protocol::rpc::header::RangeServerT&gt;::from (2 samples, 0.12%)</title><rect x="69.8773%" y="485" width="0.1227%" height="15" fill="rgb(211,20,47)" fg:x="1139" fg:w="2"/><text x="70.1273%" y="495.50"></text></g><g><title>protocol::rpc::header::RangeServer::create (3 samples, 0.18%)</title><rect x="70.0000%" y="485" width="0.1840%" height="15" fill="rgb(240,228,2)" fg:x="1141" fg:w="3"/><text x="70.2500%" y="495.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (3 samples, 0.18%)</title><rect x="70.0000%" y="469" width="0.1840%" height="15" fill="rgb(248,151,12)" fg:x="1141" fg:w="3"/><text x="70.2500%" y="479.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.676 (2 samples, 0.12%)</title><rect x="70.0613%" y="453" width="0.1227%" height="15" fill="rgb(244,8,39)" fg:x="1142" fg:w="2"/><text x="70.3113%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="70.1227%" y="437" width="0.0613%" height="15" fill="rgb(222,26,8)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="70.1227%" y="421" width="0.0613%" height="15" fill="rgb(213,106,44)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="431.50"></text></g><g><title>do_rallocx (1 samples, 0.06%)</title><rect x="70.1227%" y="405" width="0.0613%" height="15" fill="rgb(214,129,20)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="415.50"></text></g><g><title>iralloct (1 samples, 0.06%)</title><rect x="70.1227%" y="389" width="0.0613%" height="15" fill="rgb(212,32,13)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="399.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.06%)</title><rect x="70.1227%" y="373" width="0.0613%" height="15" fill="rgb(208,168,33)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="383.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.06%)</title><rect x="70.1227%" y="357" width="0.0613%" height="15" fill="rgb(231,207,8)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="367.50"></text></g><g><title>sz_s2u (1 samples, 0.06%)</title><rect x="70.1227%" y="341" width="0.0613%" height="15" fill="rgb(235,219,23)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="351.50"></text></g><g><title>sz_s2u_lookup (1 samples, 0.06%)</title><rect x="70.1227%" y="325" width="0.0613%" height="15" fill="rgb(226,216,26)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="335.50"></text></g><g><title>sz_size2index_lookup (1 samples, 0.06%)</title><rect x="70.1227%" y="309" width="0.0613%" height="15" fill="rgb(239,137,16)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="319.50"></text></g><g><title>sz_size2index_lookup_impl (1 samples, 0.06%)</title><rect x="70.1227%" y="293" width="0.0613%" height="15" fill="rgb(207,12,36)" fg:x="1143" fg:w="1"/><text x="70.3727%" y="303.50"></text></g><g><title>client::request::&lt;impl core::convert::From&lt;&amp;client::request::Request&gt; for bytes::bytes::Bytes&gt;::from (13 samples, 0.80%)</title><rect x="69.4479%" y="501" width="0.7975%" height="15" fill="rgb(210,214,24)" fg:x="1132" fg:w="13"/><text x="69.6979%" y="511.50"></text></g><g><title>sdallocx (1 samples, 0.06%)</title><rect x="70.1840%" y="485" width="0.0613%" height="15" fill="rgb(206,56,30)" fg:x="1144" fg:w="1"/><text x="70.4340%" y="495.50"></text></g><g><title>free_fastpath (1 samples, 0.06%)</title><rect x="70.1840%" y="469" width="0.0613%" height="15" fill="rgb(228,143,26)" fg:x="1144" fg:w="1"/><text x="70.4340%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="70.2454%" y="501" width="0.0613%" height="15" fill="rgb(216,218,46)" fg:x="1145" fg:w="1"/><text x="70.4954%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="70.3067%" y="485" width="0.0613%" height="15" fill="rgb(206,6,19)" fg:x="1146" fg:w="1"/><text x="70.5567%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="70.3067%" y="469" width="0.0613%" height="15" fill="rgb(239,177,51)" fg:x="1146" fg:w="1"/><text x="70.5567%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="70.3067%" y="453" width="0.0613%" height="15" fill="rgb(216,55,25)" fg:x="1146" fg:w="1"/><text x="70.5567%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="70.3067%" y="437" width="0.0613%" height="15" fill="rgb(231,163,29)" fg:x="1146" fg:w="1"/><text x="70.5567%" y="447.50"></text></g><g><title>client::session::Session::write::{{closure}} (17 samples, 1.04%)</title><rect x="69.3865%" y="517" width="1.0429%" height="15" fill="rgb(232,149,50)" fg:x="1131" fg:w="17"/><text x="69.6365%" y="527.50"></text></g><g><title>transport::connection::Connection::write_frame::{{closure}} (2 samples, 0.12%)</title><rect x="70.3067%" y="501" width="0.1227%" height="15" fill="rgb(223,142,48)" fg:x="1146" fg:w="2"/><text x="70.5567%" y="511.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.06%)</title><rect x="70.3681%" y="485" width="0.0613%" height="15" fill="rgb(245,83,23)" fg:x="1147" fg:w="1"/><text x="70.6181%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="70.4294%" y="517" width="0.0613%" height="15" fill="rgb(224,63,2)" fg:x="1148" fg:w="1"/><text x="70.6794%" y="527.50"></text></g><g><title>client::composite_session::CompositeSession::refresh_placement_driver_cluster::{{closure}} (27 samples, 1.66%)</title><rect x="68.9571%" y="533" width="1.6564%" height="15" fill="rgb(218,65,53)" fg:x="1124" fg:w="27"/><text x="69.2071%" y="543.50"></text></g><g><title>malloc (2 samples, 0.12%)</title><rect x="70.4908%" y="517" width="0.1227%" height="15" fill="rgb(221,84,29)" fg:x="1149" fg:w="2"/><text x="70.7408%" y="527.50"></text></g><g><title>imalloc_fastpath (2 samples, 0.12%)</title><rect x="70.4908%" y="501" width="0.1227%" height="15" fill="rgb(234,0,32)" fg:x="1149" fg:w="2"/><text x="70.7408%" y="511.50"></text></g><g><title>client::composite_session::CompositeSession::try_reconnect::{{closure}} (1 samples, 0.06%)</title><rect x="70.6135%" y="533" width="0.0613%" height="15" fill="rgb(206,20,16)" fg:x="1151" fg:w="1"/><text x="70.8635%" y="543.50"></text></g><g><title>client::request::&lt;impl core::convert::From&lt;&amp;client::request::Request&gt; for bytes::bytes::Bytes&gt;::from (2 samples, 0.12%)</title><rect x="70.6748%" y="517" width="0.1227%" height="15" fill="rgb(244,172,18)" fg:x="1152" fg:w="2"/><text x="70.9248%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push_slot (2 samples, 0.12%)</title><rect x="70.6748%" y="501" width="0.1227%" height="15" fill="rgb(254,133,1)" fg:x="1152" fg:w="2"/><text x="70.9248%" y="511.50"></text></g><g><title>client::session::Session::write::{{closure}} (3 samples, 0.18%)</title><rect x="70.6748%" y="533" width="0.1840%" height="15" fill="rgb(222,206,41)" fg:x="1152" fg:w="3"/><text x="70.9248%" y="543.50"></text></g><g><title>transport::connection::Connection::write_frame::{{closure}} (1 samples, 0.06%)</title><rect x="70.7975%" y="517" width="0.0613%" height="15" fill="rgb(212,3,42)" fg:x="1154" fg:w="1"/><text x="71.0475%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.06%)</title><rect x="70.7975%" y="501" width="0.0613%" height="15" fill="rgb(241,11,4)" fg:x="1154" fg:w="1"/><text x="71.0475%" y="511.50"></text></g><g><title>client::session_manager::SessionManager::get_composite_session::{{closure}} (1 samples, 0.06%)</title><rect x="70.8589%" y="533" width="0.0613%" height="15" fill="rgb(205,19,26)" fg:x="1155" fg:w="1"/><text x="71.1089%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="70.8589%" y="517" width="0.0613%" height="15" fill="rgb(210,179,32)" fg:x="1155" fg:w="1"/><text x="71.1089%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="70.9202%" y="533" width="0.0613%" height="15" fill="rgb(227,116,49)" fg:x="1156" fg:w="1"/><text x="71.1702%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;range_server::handler::ServerCall&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="70.9816%" y="533" width="0.0613%" height="15" fill="rgb(211,146,6)" fg:x="1157" fg:w="1"/><text x="71.2316%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;range_server::handler::cmd::Command::apply&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;::{{closure}}&gt; (1 samples, 0.06%)</title><rect x="71.0429%" y="533" width="0.0613%" height="15" fill="rgb(219,44,39)" fg:x="1158" fg:w="1"/><text x="71.2929%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::op::Op&lt;tokio_uring::io::writev::Writev&lt;bytes::bytes::Bytes&gt;&gt;&gt; (2 samples, 0.12%)</title><rect x="71.1043%" y="533" width="0.1227%" height="15" fill="rgb(234,128,11)" fg:x="1159" fg:w="2"/><text x="71.3543%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;transport::connection::Connection::write_frame::{{closure}}&gt; (1 samples, 0.06%)</title><rect x="71.2270%" y="533" width="0.0613%" height="15" fill="rgb(220,183,53)" fg:x="1161" fg:w="1"/><text x="71.4770%" y="543.50"></text></g><g><title>local_sync::mpsc::block::Queue&lt;T&gt;::pop_unchecked (2 samples, 0.12%)</title><rect x="71.2883%" y="533" width="0.1227%" height="15" fill="rgb(213,219,32)" fg:x="1162" fg:w="2"/><text x="71.5383%" y="543.50"></text></g><g><title>local_sync::mpsc::chan::Tx&lt;T,S&gt;::send (9 samples, 0.55%)</title><rect x="71.4110%" y="533" width="0.5521%" height="15" fill="rgb(232,156,16)" fg:x="1164" fg:w="9"/><text x="71.6610%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (4 samples, 0.25%)</title><rect x="71.7178%" y="517" width="0.2454%" height="15" fill="rgb(246,135,34)" fg:x="1169" fg:w="4"/><text x="71.9678%" y="527.50"></text></g><g><title>local_sync::mpsc::unbounded::Rx&lt;T&gt;::recv::{{closure}} (2 samples, 0.12%)</title><rect x="71.9632%" y="533" width="0.1227%" height="15" fill="rgb(241,99,0)" fg:x="1173" fg:w="2"/><text x="72.2132%" y="543.50"></text></g><g><title>local_sync::mpsc::block::Queue&lt;T&gt;::pop_unchecked (1 samples, 0.06%)</title><rect x="72.0245%" y="517" width="0.0613%" height="15" fill="rgb(222,103,45)" fg:x="1174" fg:w="1"/><text x="72.2745%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.06%)</title><rect x="72.0859%" y="517" width="0.0613%" height="15" fill="rgb(212,57,4)" fg:x="1175" fg:w="1"/><text x="72.3359%" y="527.50"></text></g><g><title>local_sync::oneshot::Sender&lt;T&gt;::send (2 samples, 0.12%)</title><rect x="72.0859%" y="533" width="0.1227%" height="15" fill="rgb(215,68,47)" fg:x="1175" fg:w="2"/><text x="72.3359%" y="543.50"></text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.06%)</title><rect x="72.1472%" y="517" width="0.0613%" height="15" fill="rgb(230,84,2)" fg:x="1176" fg:w="1"/><text x="72.3972%" y="527.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="72.2086%" y="533" width="0.0613%" height="15" fill="rgb(220,102,14)" fg:x="1177" fg:w="1"/><text x="72.4586%" y="543.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="72.2086%" y="517" width="0.0613%" height="15" fill="rgb(240,10,32)" fg:x="1177" fg:w="1"/><text x="72.4586%" y="527.50"></text></g><g><title>arena_slab_alloc (1 samples, 0.06%)</title><rect x="72.5153%" y="357" width="0.0613%" height="15" fill="rgb(215,47,27)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="367.50"></text></g><g><title>_rjem_je_pa_alloc (1 samples, 0.06%)</title><rect x="72.5153%" y="341" width="0.0613%" height="15" fill="rgb(233,188,43)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="351.50"></text></g><g><title>pai_alloc (1 samples, 0.06%)</title><rect x="72.5153%" y="325" width="0.0613%" height="15" fill="rgb(253,190,1)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="335.50"></text></g><g><title>pac_alloc_impl (1 samples, 0.06%)</title><rect x="72.5153%" y="309" width="0.0613%" height="15" fill="rgb(206,114,52)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="319.50"></text></g><g><title>pac_alloc_real (1 samples, 0.06%)</title><rect x="72.5153%" y="293" width="0.0613%" height="15" fill="rgb(233,120,37)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="303.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.06%)</title><rect x="72.5153%" y="277" width="0.0613%" height="15" fill="rgb(214,52,39)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="287.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="72.5153%" y="261" width="0.0613%" height="15" fill="rgb(223,80,29)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="271.50"></text></g><g><title>extent_recycle_extract (1 samples, 0.06%)</title><rect x="72.5153%" y="245" width="0.0613%" height="15" fill="rgb(230,101,40)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="255.50"></text></g><g><title>_rjem_je_eset_fit (1 samples, 0.06%)</title><rect x="72.5153%" y="229" width="0.0613%" height="15" fill="rgb(219,211,8)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="239.50"></text></g><g><title>eset_first_fit (1 samples, 0.06%)</title><rect x="72.5153%" y="213" width="0.0613%" height="15" fill="rgb(252,126,28)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="223.50"></text></g><g><title>_rjem_je_edata_heap_first (1 samples, 0.06%)</title><rect x="72.5153%" y="197" width="0.0613%" height="15" fill="rgb(215,56,38)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="207.50"></text></g><g><title>ph_first (1 samples, 0.06%)</title><rect x="72.5153%" y="181" width="0.0613%" height="15" fill="rgb(249,55,44)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="191.50"></text></g><g><title>ph_merge_aux (1 samples, 0.06%)</title><rect x="72.5153%" y="165" width="0.0613%" height="15" fill="rgb(220,221,32)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="175.50"></text></g><g><title>phn_next_get (1 samples, 0.06%)</title><rect x="72.5153%" y="149" width="0.0613%" height="15" fill="rgb(212,216,41)" fg:x="1182" fg:w="1"/><text x="72.7653%" y="159.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (3 samples, 0.18%)</title><rect x="72.5153%" y="389" width="0.1840%" height="15" fill="rgb(228,213,43)" fg:x="1182" fg:w="3"/><text x="72.7653%" y="399.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (3 samples, 0.18%)</title><rect x="72.5153%" y="373" width="0.1840%" height="15" fill="rgb(211,31,26)" fg:x="1182" fg:w="3"/><text x="72.7653%" y="383.50"></text></g><g><title>edata_nfree_get (2 samples, 0.12%)</title><rect x="72.5767%" y="357" width="0.1227%" height="15" fill="rgb(229,202,19)" fg:x="1183" fg:w="2"/><text x="72.8267%" y="367.50"></text></g><g><title>imalloc_no_sample (7 samples, 0.43%)</title><rect x="72.5153%" y="485" width="0.4294%" height="15" fill="rgb(229,105,46)" fg:x="1182" fg:w="7"/><text x="72.7653%" y="495.50"></text></g><g><title>ipalloct (7 samples, 0.43%)</title><rect x="72.5153%" y="469" width="0.4294%" height="15" fill="rgb(235,108,1)" fg:x="1182" fg:w="7"/><text x="72.7653%" y="479.50"></text></g><g><title>ipallocztm (7 samples, 0.43%)</title><rect x="72.5153%" y="453" width="0.4294%" height="15" fill="rgb(245,111,35)" fg:x="1182" fg:w="7"/><text x="72.7653%" y="463.50"></text></g><g><title>_rjem_je_arena_palloc (7 samples, 0.43%)</title><rect x="72.5153%" y="437" width="0.4294%" height="15" fill="rgb(219,185,31)" fg:x="1182" fg:w="7"/><text x="72.7653%" y="447.50"></text></g><g><title>arena_malloc (7 samples, 0.43%)</title><rect x="72.5153%" y="421" width="0.4294%" height="15" fill="rgb(214,4,43)" fg:x="1182" fg:w="7"/><text x="72.7653%" y="431.50"></text></g><g><title>tcache_alloc_small (7 samples, 0.43%)</title><rect x="72.5153%" y="405" width="0.4294%" height="15" fill="rgb(235,227,40)" fg:x="1182" fg:w="7"/><text x="72.7653%" y="415.50"></text></g><g><title>cache_bin_alloc (4 samples, 0.25%)</title><rect x="72.6994%" y="389" width="0.2454%" height="15" fill="rgb(230,88,30)" fg:x="1185" fg:w="4"/><text x="72.9494%" y="399.50"></text></g><g><title>cache_bin_alloc_impl (4 samples, 0.25%)</title><rect x="72.6994%" y="373" width="0.2454%" height="15" fill="rgb(216,217,1)" fg:x="1185" fg:w="4"/><text x="72.9494%" y="383.50"></text></g><g><title>mallocx (12 samples, 0.74%)</title><rect x="72.2699%" y="533" width="0.7362%" height="15" fill="rgb(248,139,50)" fg:x="1178" fg:w="12"/><text x="72.5199%" y="543.50"></text></g><g><title>imalloc (8 samples, 0.49%)</title><rect x="72.5153%" y="517" width="0.4908%" height="15" fill="rgb(233,1,21)" fg:x="1182" fg:w="8"/><text x="72.7653%" y="527.50"></text></g><g><title>imalloc_body (8 samples, 0.49%)</title><rect x="72.5153%" y="501" width="0.4908%" height="15" fill="rgb(215,183,12)" fg:x="1182" fg:w="8"/><text x="72.7653%" y="511.50"></text></g><g><title>thread_alloc_event (1 samples, 0.06%)</title><rect x="72.9448%" y="485" width="0.0613%" height="15" fill="rgb(229,104,42)" fg:x="1189" fg:w="1"/><text x="73.1948%" y="495.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="72.9448%" y="469" width="0.0613%" height="15" fill="rgb(243,34,48)" fg:x="1189" fg:w="1"/><text x="73.1948%" y="479.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="72.9448%" y="453" width="0.0613%" height="15" fill="rgb(239,11,44)" fg:x="1189" fg:w="1"/><text x="73.1948%" y="463.50"></text></g><g><title>te_adjust_thresholds_helper (1 samples, 0.06%)</title><rect x="72.9448%" y="437" width="0.0613%" height="15" fill="rgb(231,98,35)" fg:x="1189" fg:w="1"/><text x="73.1948%" y="447.50"></text></g><g><title>te_ctx_next_event_set (1 samples, 0.06%)</title><rect x="72.9448%" y="421" width="0.0613%" height="15" fill="rgb(233,28,25)" fg:x="1189" fg:w="1"/><text x="73.1948%" y="431.50"></text></g><g><title>_rjem_je_te_recompute_fast_threshold (1 samples, 0.06%)</title><rect x="72.9448%" y="405" width="0.0613%" height="15" fill="rgb(234,123,11)" fg:x="1189" fg:w="1"/><text x="73.1948%" y="415.50"></text></g><g><title>_rjem_je_te_recompute_fast_threshold (1 samples, 0.06%)</title><rect x="72.9448%" y="389" width="0.0613%" height="15" fill="rgb(220,69,3)" fg:x="1189" fg:w="1"/><text x="73.1948%" y="399.50"></text></g><g><title>atomic_fence (1 samples, 0.06%)</title><rect x="72.9448%" y="373" width="0.0613%" height="15" fill="rgb(214,64,36)" fg:x="1189" fg:w="1"/><text x="73.1948%" y="383.50"></text></g><g><title>ordered_multimap::list_ordered_multimap::hash_key (1 samples, 0.06%)</title><rect x="73.0061%" y="533" width="0.0613%" height="15" fill="rgb(211,138,32)" fg:x="1190" fg:w="1"/><text x="73.2561%" y="543.50"></text></g><g><title>&lt;observation::metrics::store_metrics::START_TIME as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="76.9939%" y="469" width="0.0613%" height="15" fill="rgb(213,118,47)" fg:x="1255" fg:w="1"/><text x="77.2439%" y="479.50"></text></g><g><title>&lt;observation::metrics::store_metrics::STORE_APPEND_COUNT as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="77.0552%" y="469" width="0.0613%" height="15" fill="rgb(243,124,49)" fg:x="1256" fg:w="1"/><text x="77.3052%" y="479.50"></text></g><g><title>__floattidf (1 samples, 0.06%)</title><rect x="77.1166%" y="469" width="0.0613%" height="15" fill="rgb(221,30,28)" fg:x="1257" fg:w="1"/><text x="77.3666%" y="479.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (1 samples, 0.06%)</title><rect x="77.1166%" y="453" width="0.0613%" height="15" fill="rgb(246,37,13)" fg:x="1257" fg:w="1"/><text x="77.3666%" y="463.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (1 samples, 0.06%)</title><rect x="77.1166%" y="437" width="0.0613%" height="15" fill="rgb(249,66,14)" fg:x="1257" fg:w="1"/><text x="77.3666%" y="447.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_shl (1 samples, 0.06%)</title><rect x="77.1166%" y="421" width="0.0613%" height="15" fill="rgb(213,166,5)" fg:x="1257" fg:w="1"/><text x="77.3666%" y="431.50"></text></g><g><title>core::num::&lt;impl u128&gt;::unchecked_shl (1 samples, 0.06%)</title><rect x="77.1166%" y="405" width="0.0613%" height="15" fill="rgb(221,66,24)" fg:x="1257" fg:w="1"/><text x="77.3666%" y="415.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify.3940 (6 samples, 0.37%)</title><rect x="77.1779%" y="469" width="0.3681%" height="15" fill="rgb(210,132,17)" fg:x="1258" fg:w="6"/><text x="77.4279%" y="479.50"></text></g><g><title>sdallocx (2 samples, 0.12%)</title><rect x="77.5460%" y="469" width="0.1227%" height="15" fill="rgb(243,202,5)" fg:x="1264" fg:w="2"/><text x="77.7960%" y="479.50"></text></g><g><title>free_fastpath (2 samples, 0.12%)</title><rect x="77.5460%" y="453" width="0.1227%" height="15" fill="rgb(233,70,48)" fg:x="1264" fg:w="2"/><text x="77.7960%" y="463.50"></text></g><g><title>tokio::runtime::coop::poll_proceed.1391 (2 samples, 0.12%)</title><rect x="77.6687%" y="469" width="0.1227%" height="15" fill="rgb(238,41,26)" fg:x="1266" fg:w="2"/><text x="77.9187%" y="479.50"></text></g><g><title>&lt;store::store::elastic_store::ElasticStore as store::Store&gt;::append::{{closure}} (31 samples, 1.90%)</title><rect x="75.9509%" y="485" width="1.9018%" height="15" fill="rgb(241,19,31)" fg:x="1238" fg:w="31"/><text x="76.2009%" y="495.50">&lt;..</text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.06%)</title><rect x="77.7914%" y="469" width="0.0613%" height="15" fill="rgb(214,76,10)" fg:x="1268" fg:w="1"/><text x="78.0414%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="77.8528%" y="485" width="0.0613%" height="15" fill="rgb(254,202,22)" fg:x="1269" fg:w="1"/><text x="78.1028%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="77.8528%" y="469" width="0.0613%" height="15" fill="rgb(214,72,24)" fg:x="1269" fg:w="1"/><text x="78.1028%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::join_all::JoinAll&lt;&lt;store::store::elastic_store::ElasticStore as store::Store&gt;::append::{{closure}}&gt;&gt; (2 samples, 0.12%)</title><rect x="77.9141%" y="485" width="0.1227%" height="15" fill="rgb(221,92,46)" fg:x="1270" fg:w="2"/><text x="78.1641%" y="495.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="78.0368%" y="485" width="0.0613%" height="15" fill="rgb(246,13,50)" fg:x="1272" fg:w="1"/><text x="78.2868%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="78.0368%" y="469" width="0.0613%" height="15" fill="rgb(240,165,38)" fg:x="1272" fg:w="1"/><text x="78.2868%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="78.0368%" y="453" width="0.0613%" height="15" fill="rgb(241,24,51)" fg:x="1272" fg:w="1"/><text x="78.2868%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="78.0368%" y="437" width="0.0613%" height="15" fill="rgb(227,51,44)" fg:x="1272" fg:w="1"/><text x="78.2868%" y="447.50"></text></g><g><title>sdallocx (1 samples, 0.06%)</title><rect x="78.0982%" y="485" width="0.0613%" height="15" fill="rgb(231,121,3)" fg:x="1273" fg:w="1"/><text x="78.3482%" y="495.50"></text></g><g><title>free_fastpath (1 samples, 0.06%)</title><rect x="78.0982%" y="469" width="0.0613%" height="15" fill="rgb(245,3,41)" fg:x="1273" fg:w="1"/><text x="78.3482%" y="479.50"></text></g><g><title>&lt;store::store::buffer::store::BufferedStore&lt;S&gt; as store::Store&gt;::append::{{closure}} (59 samples, 3.62%)</title><rect x="75.0920%" y="501" width="3.6196%" height="15" fill="rgb(214,13,26)" fg:x="1224" fg:w="59"/><text x="75.3420%" y="511.50">&lt;sto..</text></g><g><title>store::store::buffer::store::StoreBuffer::stream_buffer (9 samples, 0.55%)</title><rect x="78.1595%" y="485" width="0.5521%" height="15" fill="rgb(252,75,11)" fg:x="1274" fg:w="9"/><text x="78.4095%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.43%)</title><rect x="78.2822%" y="469" width="0.4294%" height="15" fill="rgb(218,226,17)" fg:x="1276" fg:w="7"/><text x="78.5322%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.25%)</title><rect x="78.4663%" y="453" width="0.2454%" height="15" fill="rgb(248,89,38)" fg:x="1279" fg:w="4"/><text x="78.7163%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.25%)</title><rect x="78.7117%" y="501" width="0.2454%" height="15" fill="rgb(237,73,46)" fg:x="1283" fg:w="4"/><text x="78.9617%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.12%)</title><rect x="78.8344%" y="485" width="0.1227%" height="15" fill="rgb(242,78,33)" fg:x="1285" fg:w="2"/><text x="79.0844%" y="495.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (80 samples, 4.91%)</title><rect x="74.3558%" y="517" width="4.9080%" height="15" fill="rgb(235,60,3)" fg:x="1212" fg:w="80"/><text x="74.6058%" y="527.50">&lt;core:..</text></g><g><title>range_server::range_manager::window::Window::check_barrier (5 samples, 0.31%)</title><rect x="78.9571%" y="501" width="0.3067%" height="15" fill="rgb(216,172,19)" fg:x="1287" fg:w="5"/><text x="79.2071%" y="511.50"></text></g><g><title>&lt;object_storage::object_storage::AsyncObjectStorage as object_storage::ObjectStorage&gt;::new_commit (6 samples, 0.37%)</title><rect x="79.2638%" y="517" width="0.3681%" height="15" fill="rgb(227,6,42)" fg:x="1292" fg:w="6"/><text x="79.5138%" y="527.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.12%)</title><rect x="79.5092%" y="501" width="0.1227%" height="15" fill="rgb(223,207,42)" fg:x="1296" fg:w="2"/><text x="79.7592%" y="511.50"></text></g><g><title>&lt;store::store::buffer::store::BufferedStore&lt;S&gt; as store::Store&gt;::seal::{{closure}} (1 samples, 0.06%)</title><rect x="79.6319%" y="517" width="0.0613%" height="15" fill="rgb(246,138,30)" fg:x="1298" fg:w="1"/><text x="79.8819%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.43%)</title><rect x="79.6933%" y="517" width="0.4294%" height="15" fill="rgb(251,199,47)" fg:x="1299" fg:w="7"/><text x="79.9433%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="80.0613%" y="501" width="0.0613%" height="15" fill="rgb(228,218,44)" fg:x="1305" fg:w="1"/><text x="80.3113%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="80.0613%" y="485" width="0.0613%" height="15" fill="rgb(220,68,6)" fg:x="1305" fg:w="1"/><text x="80.3113%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="80.0613%" y="469" width="0.0613%" height="15" fill="rgb(240,60,26)" fg:x="1305" fg:w="1"/><text x="80.3113%" y="479.50"></text></g><g><title>calloc (2 samples, 0.12%)</title><rect x="80.1227%" y="517" width="0.1227%" height="15" fill="rgb(211,200,19)" fg:x="1306" fg:w="2"/><text x="80.3727%" y="527.50"></text></g><g><title>chrono::offset::utc::Utc::now (5 samples, 0.31%)</title><rect x="80.2454%" y="517" width="0.3067%" height="15" fill="rgb(242,145,30)" fg:x="1308" fg:w="5"/><text x="80.4954%" y="527.50"></text></g><g><title>chrono::naive::internals::cycle_to_yo (1 samples, 0.06%)</title><rect x="80.4908%" y="501" width="0.0613%" height="15" fill="rgb(225,64,13)" fg:x="1312" fg:w="1"/><text x="80.7408%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="80.5521%" y="517" width="0.0613%" height="15" fill="rgb(218,103,35)" fg:x="1313" fg:w="1"/><text x="80.8021%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;&gt;&gt; (2 samples, 0.12%)</title><rect x="80.6135%" y="517" width="0.1227%" height="15" fill="rgb(216,93,46)" fg:x="1314" fg:w="2"/><text x="80.8635%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;flatbuffers::builder::FlatBufferBuilder&gt; (1 samples, 0.06%)</title><rect x="80.7362%" y="517" width="0.0613%" height="15" fill="rgb(225,159,27)" fg:x="1316" fg:w="1"/><text x="80.9862%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::join_all::JoinAll&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;range_server::handler::append::Append::apply&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="80.7975%" y="517" width="0.0613%" height="15" fill="rgb(225,204,11)" fg:x="1317" fg:w="1"/><text x="81.0475%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::create_vector (4 samples, 0.25%)</title><rect x="80.8589%" y="517" width="0.2454%" height="15" fill="rgb(205,56,4)" fg:x="1318" fg:w="4"/><text x="81.1089%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.2049 (2 samples, 0.12%)</title><rect x="80.9816%" y="501" width="0.1227%" height="15" fill="rgb(206,6,35)" fg:x="1320" fg:w="2"/><text x="81.2316%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.2049 (1 samples, 0.06%)</title><rect x="81.1043%" y="517" width="0.0613%" height="15" fill="rgb(247,73,52)" fg:x="1322" fg:w="1"/><text x="81.3543%" y="527.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="81.1656%" y="517" width="0.0613%" height="15" fill="rgb(246,97,4)" fg:x="1323" fg:w="1"/><text x="81.4156%" y="527.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="81.1656%" y="501" width="0.0613%" height="15" fill="rgb(212,37,15)" fg:x="1323" fg:w="1"/><text x="81.4156%" y="511.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="81.1656%" y="485" width="0.0613%" height="15" fill="rgb(208,130,40)" fg:x="1323" fg:w="1"/><text x="81.4156%" y="495.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="81.1656%" y="469" width="0.0613%" height="15" fill="rgb(236,55,29)" fg:x="1323" fg:w="1"/><text x="81.4156%" y="479.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push_slot (1 samples, 0.06%)</title><rect x="81.2270%" y="501" width="0.0613%" height="15" fill="rgb(209,156,45)" fg:x="1324" fg:w="1"/><text x="81.4770%" y="511.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (2 samples, 0.12%)</title><rect x="81.9632%" y="389" width="0.1227%" height="15" fill="rgb(249,107,4)" fg:x="1336" fg:w="2"/><text x="82.2132%" y="399.50"></text></g><g><title>protocol::rpc::header::AppendResponse::create (16 samples, 0.98%)</title><rect x="81.2270%" y="517" width="0.9816%" height="15" fill="rgb(227,7,13)" fg:x="1324" fg:w="16"/><text x="81.4770%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (15 samples, 0.92%)</title><rect x="81.2883%" y="501" width="0.9202%" height="15" fill="rgb(250,129,14)" fg:x="1325" fg:w="15"/><text x="81.5383%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.676 (15 samples, 0.92%)</title><rect x="81.2883%" y="485" width="0.9202%" height="15" fill="rgb(229,92,13)" fg:x="1325" fg:w="15"/><text x="81.5383%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.80%)</title><rect x="81.4110%" y="469" width="0.7975%" height="15" fill="rgb(245,98,39)" fg:x="1327" fg:w="13"/><text x="81.6610%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.67%)</title><rect x="81.5337%" y="453" width="0.6748%" height="15" fill="rgb(234,135,48)" fg:x="1329" fg:w="11"/><text x="81.7837%" y="463.50"></text></g><g><title>do_rallocx (10 samples, 0.61%)</title><rect x="81.5951%" y="437" width="0.6135%" height="15" fill="rgb(230,98,28)" fg:x="1330" fg:w="10"/><text x="81.8451%" y="447.50"></text></g><g><title>iralloct (5 samples, 0.31%)</title><rect x="81.9018%" y="421" width="0.3067%" height="15" fill="rgb(223,121,0)" fg:x="1335" fg:w="5"/><text x="82.1518%" y="431.50"></text></g><g><title>_rjem_je_arena_ralloc (5 samples, 0.31%)</title><rect x="81.9018%" y="405" width="0.3067%" height="15" fill="rgb(234,173,33)" fg:x="1335" fg:w="5"/><text x="82.1518%" y="415.50"></text></g><g><title>_rjem_je_hook_invoke_alloc (2 samples, 0.12%)</title><rect x="82.0859%" y="389" width="0.1227%" height="15" fill="rgb(245,47,8)" fg:x="1338" fg:w="2"/><text x="82.3359%" y="399.50"></text></g><g><title>atomic_load_u (2 samples, 0.12%)</title><rect x="82.0859%" y="373" width="0.1227%" height="15" fill="rgb(205,17,20)" fg:x="1338" fg:w="2"/><text x="82.3359%" y="383.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push (2 samples, 0.12%)</title><rect x="82.3313%" y="501" width="0.1227%" height="15" fill="rgb(232,151,16)" fg:x="1342" fg:w="2"/><text x="82.5813%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push_slot (1 samples, 0.06%)</title><rect x="82.4540%" y="501" width="0.0613%" height="15" fill="rgb(208,30,32)" fg:x="1344" fg:w="1"/><text x="82.7040%" y="511.50"></text></g><g><title>protocol::rpc::header::AppendResultEntry::create (7 samples, 0.43%)</title><rect x="82.2086%" y="517" width="0.4294%" height="15" fill="rgb(254,26,3)" fg:x="1340" fg:w="7"/><text x="82.4586%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::required (2 samples, 0.12%)</title><rect x="82.5153%" y="501" width="0.1227%" height="15" fill="rgb(240,177,30)" fg:x="1345" fg:w="2"/><text x="82.7653%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="82.6380%" y="501" width="0.0613%" height="15" fill="rgb(248,76,44)" fg:x="1347" fg:w="1"/><text x="82.8880%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="82.6380%" y="485" width="0.0613%" height="15" fill="rgb(241,186,54)" fg:x="1347" fg:w="1"/><text x="82.8880%" y="495.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="82.6380%" y="469" width="0.0613%" height="15" fill="rgb(249,171,29)" fg:x="1347" fg:w="1"/><text x="82.8880%" y="479.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="82.6380%" y="453" width="0.0613%" height="15" fill="rgb(237,151,44)" fg:x="1347" fg:w="1"/><text x="82.8880%" y="463.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="82.6380%" y="437" width="0.0613%" height="15" fill="rgb(228,174,30)" fg:x="1347" fg:w="1"/><text x="82.8880%" y="447.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="82.6380%" y="421" width="0.0613%" height="15" fill="rgb(252,14,37)" fg:x="1347" fg:w="1"/><text x="82.8880%" y="431.50"></text></g><g><title>protocol::rpc::header::Status::create (6 samples, 0.37%)</title><rect x="82.6380%" y="517" width="0.3681%" height="15" fill="rgb(207,111,40)" fg:x="1347" fg:w="6"/><text x="82.8880%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (5 samples, 0.31%)</title><rect x="82.6994%" y="501" width="0.3067%" height="15" fill="rgb(248,171,54)" fg:x="1348" fg:w="5"/><text x="82.9494%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.43%)</title><rect x="83.3129%" y="501" width="0.4294%" height="15" fill="rgb(211,127,2)" fg:x="1358" fg:w="7"/><text x="83.5629%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.25%)</title><rect x="83.4969%" y="485" width="0.2454%" height="15" fill="rgb(236,87,47)" fg:x="1361" fg:w="4"/><text x="83.7469%" y="495.50"></text></g><g><title>malloc (2 samples, 0.12%)</title><rect x="83.6196%" y="469" width="0.1227%" height="15" fill="rgb(223,190,45)" fg:x="1363" fg:w="2"/><text x="83.8696%" y="479.50"></text></g><g><title>imalloc_fastpath (2 samples, 0.12%)</title><rect x="83.6196%" y="453" width="0.1227%" height="15" fill="rgb(215,5,16)" fg:x="1363" fg:w="2"/><text x="83.8696%" y="463.50"></text></g><g><title>range_server::handler::append::Append::build_store_requests (13 samples, 0.80%)</title><rect x="83.0061%" y="517" width="0.7975%" height="15" fill="rgb(252,82,33)" fg:x="1353" fg:w="13"/><text x="83.2561%" y="527.50"></text></g><g><title>model::payload::Payload::parse_append_entry (1 samples, 0.06%)</title><rect x="83.7423%" y="501" width="0.0613%" height="15" fill="rgb(247,213,44)" fg:x="1365" fg:w="1"/><text x="83.9923%" y="511.50"></text></g><g><title>flatbuffers::verifier::Verifier::visit_table.1164 (1 samples, 0.06%)</title><rect x="83.7423%" y="485" width="0.0613%" height="15" fill="rgb(205,196,44)" fg:x="1365" fg:w="1"/><text x="83.9923%" y="495.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_i32 (4 samples, 0.25%)</title><rect x="84.0491%" y="485" width="0.2454%" height="15" fill="rgb(237,96,54)" fg:x="1370" fg:w="4"/><text x="84.2991%" y="495.50"></text></g><g><title>flatbuffers::table::Table::get (1 samples, 0.06%)</title><rect x="84.2945%" y="485" width="0.0613%" height="15" fill="rgb(230,113,34)" fg:x="1374" fg:w="1"/><text x="84.5445%" y="495.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (2 samples, 0.12%)</title><rect x="84.3558%" y="485" width="0.1227%" height="15" fill="rgb(221,224,12)" fg:x="1375" fg:w="2"/><text x="84.6058%" y="495.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::deref (1 samples, 0.06%)</title><rect x="84.4172%" y="469" width="0.0613%" height="15" fill="rgb(219,112,44)" fg:x="1376" fg:w="1"/><text x="84.6672%" y="479.50"></text></g><g><title>range_server::handler::append::Append::replicated (14 samples, 0.86%)</title><rect x="83.8037%" y="517" width="0.8589%" height="15" fill="rgb(210,31,13)" fg:x="1366" fg:w="14"/><text x="84.0537%" y="527.50"></text></g><g><title>model::payload::Payload::parse_append_entry (13 samples, 0.80%)</title><rect x="83.8650%" y="501" width="0.7975%" height="15" fill="rgb(230,25,16)" fg:x="1367" fg:w="13"/><text x="84.1150%" y="511.50"></text></g><g><title>flatbuffers::verifier::Verifier::visit_table.1164 (3 samples, 0.18%)</title><rect x="84.4785%" y="485" width="0.1840%" height="15" fill="rgb(246,108,53)" fg:x="1377" fg:w="3"/><text x="84.7285%" y="495.50"></text></g><g><title>range_server::range_manager::range::Range::commit::{{closure}} (4 samples, 0.25%)</title><rect x="84.6626%" y="517" width="0.2454%" height="15" fill="rgb(241,172,50)" fg:x="1380" fg:w="4"/><text x="84.9126%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::pop_first (1 samples, 0.06%)</title><rect x="84.8466%" y="501" width="0.0613%" height="15" fill="rgb(235,141,10)" fg:x="1383" fg:w="1"/><text x="85.0966%" y="511.50"></text></g><g><title>range_server::range_manager::stream::Stream::create_range (1 samples, 0.06%)</title><rect x="84.9080%" y="517" width="0.0613%" height="15" fill="rgb(220,174,43)" fg:x="1384" fg:w="1"/><text x="85.1580%" y="527.50"></text></g><g><title>range_server::handler::cmd::Command::apply::{{closure}} (195 samples, 11.96%)</title><rect x="73.0675%" y="533" width="11.9632%" height="15" fill="rgb(215,181,40)" fg:x="1191" fg:w="195"/><text x="73.3175%" y="543.50">range_server::hand..</text></g><g><title>range_server::range_manager::stream::Stream::seal (1 samples, 0.06%)</title><rect x="84.9693%" y="517" width="0.0613%" height="15" fill="rgb(230,97,2)" fg:x="1385" fg:w="1"/><text x="85.2193%" y="527.50"></text></g><g><title>&lt;log4rs::Logger as log::Log&gt;::log (1 samples, 0.06%)</title><rect x="84.9693%" y="501" width="0.0613%" height="15" fill="rgb(211,25,27)" fg:x="1385" fg:w="1"/><text x="85.2193%" y="511.50"></text></g><g><title>&lt;log4rs::append::rolling_file::RollingFileAppender as log4rs::append::Append&gt;::append (1 samples, 0.06%)</title><rect x="84.9693%" y="485" width="0.0613%" height="15" fill="rgb(230,87,26)" fg:x="1385" fg:w="1"/><text x="85.2193%" y="495.50"></text></g><g><title>&lt;log4rs::encode::pattern::PatternEncoder as log4rs::encode::Encode&gt;::encode (1 samples, 0.06%)</title><rect x="84.9693%" y="469" width="0.0613%" height="15" fill="rgb(227,160,17)" fg:x="1385" fg:w="1"/><text x="85.2193%" y="479.50"></text></g><g><title>log4rs::encode::pattern::Chunk::encode (1 samples, 0.06%)</title><rect x="84.9693%" y="453" width="0.0613%" height="15" fill="rgb(244,85,34)" fg:x="1385" fg:w="1"/><text x="85.2193%" y="463.50"></text></g><g><title>range_server::handler::cmd::Command::from_frame (8 samples, 0.49%)</title><rect x="85.0307%" y="533" width="0.4908%" height="15" fill="rgb(207,70,0)" fg:x="1386" fg:w="8"/><text x="85.2807%" y="543.50"></text></g><g><title>bytes::bytes::promotable_even_clone (4 samples, 0.25%)</title><rect x="85.2761%" y="517" width="0.2454%" height="15" fill="rgb(223,129,7)" fg:x="1390" fg:w="4"/><text x="85.5261%" y="527.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (2 samples, 0.12%)</title><rect x="85.3988%" y="501" width="0.1227%" height="15" fill="rgb(246,105,7)" fg:x="1392" fg:w="2"/><text x="85.6488%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="85.4601%" y="485" width="0.0613%" height="15" fill="rgb(215,154,42)" fg:x="1393" fg:w="1"/><text x="85.7101%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="85.4601%" y="469" width="0.0613%" height="15" fill="rgb(220,215,30)" fg:x="1393" fg:w="1"/><text x="85.7101%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="85.4601%" y="453" width="0.0613%" height="15" fill="rgb(228,81,51)" fg:x="1393" fg:w="1"/><text x="85.7101%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="85.4601%" y="437" width="0.0613%" height="15" fill="rgb(247,71,54)" fg:x="1393" fg:w="1"/><text x="85.7101%" y="447.50"></text></g><g><title>alloc::ffi::c_str::CString::_from_vec_unchecked (1 samples, 0.06%)</title><rect x="85.5828%" y="517" width="0.0613%" height="15" fill="rgb(234,176,34)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.06%)</title><rect x="85.5828%" y="501" width="0.0613%" height="15" fill="rgb(241,103,54)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.06%)</title><rect x="85.5828%" y="485" width="0.0613%" height="15" fill="rgb(228,22,34)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.06%)</title><rect x="85.5828%" y="469" width="0.0613%" height="15" fill="rgb(241,179,48)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (1 samples, 0.06%)</title><rect x="85.5828%" y="453" width="0.0613%" height="15" fill="rgb(235,167,37)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::shrink (1 samples, 0.06%)</title><rect x="85.5828%" y="437" width="0.0613%" height="15" fill="rgb(213,109,30)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="447.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.06%)</title><rect x="85.5828%" y="421" width="0.0613%" height="15" fill="rgb(222,172,16)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="431.50"></text></g><g><title>do_rallocx (1 samples, 0.06%)</title><rect x="85.5828%" y="405" width="0.0613%" height="15" fill="rgb(233,192,5)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="415.50"></text></g><g><title>iralloct (1 samples, 0.06%)</title><rect x="85.5828%" y="389" width="0.0613%" height="15" fill="rgb(247,189,41)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="399.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.06%)</title><rect x="85.5828%" y="373" width="0.0613%" height="15" fill="rgb(218,134,47)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="383.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.06%)</title><rect x="85.5828%" y="357" width="0.0613%" height="15" fill="rgb(216,29,3)" fg:x="1395" fg:w="1"/><text x="85.8328%" y="367.50"></text></g><g><title>rustix::fs::at::_readlinkat (3 samples, 0.18%)</title><rect x="85.5215%" y="533" width="0.1840%" height="15" fill="rgb(246,140,12)" fg:x="1394" fg:w="3"/><text x="85.7715%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="85.6442%" y="517" width="0.0613%" height="15" fill="rgb(230,136,11)" fg:x="1396" fg:w="1"/><text x="85.8942%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="85.6442%" y="501" width="0.0613%" height="15" fill="rgb(247,22,47)" fg:x="1396" fg:w="1"/><text x="85.8942%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="85.6442%" y="485" width="0.0613%" height="15" fill="rgb(218,84,22)" fg:x="1396" fg:w="1"/><text x="85.8942%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="85.6442%" y="469" width="0.0613%" height="15" fill="rgb(216,87,39)" fg:x="1396" fg:w="1"/><text x="85.8942%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="85.6442%" y="453" width="0.0613%" height="15" fill="rgb(221,178,8)" fg:x="1396" fg:w="1"/><text x="85.8942%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="85.6442%" y="437" width="0.0613%" height="15" fill="rgb(230,42,11)" fg:x="1396" fg:w="1"/><text x="85.8942%" y="447.50"></text></g><g><title>sdallocx (2 samples, 0.12%)</title><rect x="85.7055%" y="533" width="0.1227%" height="15" fill="rgb(237,229,4)" fg:x="1397" fg:w="2"/><text x="85.9555%" y="543.50"></text></g><g><title>free_fastpath (2 samples, 0.12%)</title><rect x="85.7055%" y="517" width="0.1227%" height="15" fill="rgb(222,31,33)" fg:x="1397" fg:w="2"/><text x="85.9555%" y="527.50"></text></g><g><title>sz_index2size (2 samples, 0.12%)</title><rect x="85.7055%" y="501" width="0.1227%" height="15" fill="rgb(210,17,39)" fg:x="1397" fg:w="2"/><text x="85.9555%" y="511.50"></text></g><g><title>sz_index2size_lookup (2 samples, 0.12%)</title><rect x="85.7055%" y="485" width="0.1227%" height="15" fill="rgb(244,93,20)" fg:x="1397" fg:w="2"/><text x="85.9555%" y="495.50"></text></g><g><title>sz_index2size_lookup_impl (2 samples, 0.12%)</title><rect x="85.7055%" y="469" width="0.1227%" height="15" fill="rgb(210,40,47)" fg:x="1397" fg:w="2"/><text x="85.9555%" y="479.50"></text></g><g><title>std::path::Path::_join (1 samples, 0.06%)</title><rect x="85.8282%" y="533" width="0.0613%" height="15" fill="rgb(239,211,47)" fg:x="1399" fg:w="1"/><text x="86.0782%" y="543.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 0.06%)</title><rect x="85.8282%" y="517" width="0.0613%" height="15" fill="rgb(251,223,49)" fg:x="1399" fg:w="1"/><text x="86.0782%" y="527.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.06%)</title><rect x="85.8282%" y="501" width="0.0613%" height="15" fill="rgb(221,149,5)" fg:x="1399" fg:w="1"/><text x="86.0782%" y="511.50"></text></g><g><title>std::path::Path::is_absolute (1 samples, 0.06%)</title><rect x="85.8282%" y="485" width="0.0613%" height="15" fill="rgb(219,224,51)" fg:x="1399" fg:w="1"/><text x="86.0782%" y="495.50"></text></g><g><title>std::path::Path::has_root (1 samples, 0.06%)</title><rect x="85.8282%" y="469" width="0.0613%" height="15" fill="rgb(223,7,8)" fg:x="1399" fg:w="1"/><text x="86.0782%" y="479.50"></text></g><g><title>std::path::Path::components (1 samples, 0.06%)</title><rect x="85.8282%" y="453" width="0.0613%" height="15" fill="rgb(241,217,22)" fg:x="1399" fg:w="1"/><text x="86.0782%" y="463.50"></text></g><g><title>std::path::has_physical_root (1 samples, 0.06%)</title><rect x="85.8282%" y="437" width="0.0613%" height="15" fill="rgb(248,209,0)" fg:x="1399" fg:w="1"/><text x="86.0782%" y="447.50"></text></g><g><title>std::sys::unix::path::is_sep_byte (1 samples, 0.06%)</title><rect x="85.8282%" y="421" width="0.0613%" height="15" fill="rgb(217,205,4)" fg:x="1399" fg:w="1"/><text x="86.0782%" y="431.50"></text></g><g><title>&lt;flatbuffers::primitives::ForwardsUOffset&lt;T&gt; as flatbuffers::verifier::Verifiable&gt;::run_verifier (1 samples, 0.06%)</title><rect x="86.0736%" y="501" width="0.0613%" height="15" fill="rgb(228,124,39)" fg:x="1403" fg:w="1"/><text x="86.3236%" y="511.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (1 samples, 0.06%)</title><rect x="86.0736%" y="485" width="0.0613%" height="15" fill="rgb(250,116,42)" fg:x="1403" fg:w="1"/><text x="86.3236%" y="495.50"></text></g><g><title>flatbuffers::verifier::Verifier::get_uoffset (1 samples, 0.06%)</title><rect x="86.0736%" y="469" width="0.0613%" height="15" fill="rgb(223,202,9)" fg:x="1403" fg:w="1"/><text x="86.3236%" y="479.50"></text></g><g><title>client::response::Response::on_describe_placement_driver (2 samples, 0.12%)</title><rect x="86.0736%" y="517" width="0.1227%" height="15" fill="rgb(242,222,40)" fg:x="1403" fg:w="2"/><text x="86.3236%" y="527.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (1 samples, 0.06%)</title><rect x="86.1350%" y="501" width="0.0613%" height="15" fill="rgb(229,99,46)" fg:x="1404" fg:w="1"/><text x="86.3850%" y="511.50"></text></g><g><title>flatbuffers::verifier::Verifier::get_uoffset (1 samples, 0.06%)</title><rect x="86.1350%" y="485" width="0.0613%" height="15" fill="rgb(225,56,46)" fg:x="1404" fg:w="1"/><text x="86.3850%" y="495.50"></text></g><g><title>client::response::Response::on_report_metrics (1 samples, 0.06%)</title><rect x="86.1963%" y="517" width="0.0613%" height="15" fill="rgb(227,94,5)" fg:x="1405" fg:w="1"/><text x="86.4463%" y="527.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (1 samples, 0.06%)</title><rect x="86.1963%" y="501" width="0.0613%" height="15" fill="rgb(205,112,38)" fg:x="1405" fg:w="1"/><text x="86.4463%" y="511.50"></text></g><g><title>&lt;flatbuffers::primitives::ForwardsUOffset&lt;T&gt; as flatbuffers::verifier::Verifiable&gt;::run_verifier (1 samples, 0.06%)</title><rect x="86.1963%" y="485" width="0.0613%" height="15" fill="rgb(231,133,46)" fg:x="1405" fg:w="1"/><text x="86.4463%" y="495.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (7 samples, 0.43%)</title><rect x="85.8896%" y="533" width="0.4294%" height="15" fill="rgb(217,16,9)" fg:x="1400" fg:w="7"/><text x="86.1396%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::op::Op&lt;tokio_uring::io::read::Read&lt;bytes::bytes_mut::BytesMut&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="86.2577%" y="517" width="0.0613%" height="15" fill="rgb(249,173,9)" fg:x="1406" fg:w="1"/><text x="86.5077%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.12%)</title><rect x="86.3190%" y="533" width="0.1227%" height="15" fill="rgb(205,163,53)" fg:x="1407" fg:w="2"/><text x="86.5690%" y="543.50"></text></g><g><title>tokio::task::local::Shared::schedule (2 samples, 0.12%)</title><rect x="86.4417%" y="533" width="0.1227%" height="15" fill="rgb(217,54,41)" fg:x="1409" fg:w="2"/><text x="86.6917%" y="543.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 0.12%)</title><rect x="86.5644%" y="517" width="0.1227%" height="15" fill="rgb(228,216,12)" fg:x="1411" fg:w="2"/><text x="86.8144%" y="527.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.06%)</title><rect x="86.6258%" y="501" width="0.0613%" height="15" fill="rgb(244,228,15)" fg:x="1412" fg:w="1"/><text x="86.8758%" y="511.50"></text></g><g><title>tokio::time::interval::Interval::poll_tick (3 samples, 0.18%)</title><rect x="86.5644%" y="533" width="0.1840%" height="15" fill="rgb(221,176,53)" fg:x="1411" fg:w="3"/><text x="86.8144%" y="543.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.06%)</title><rect x="86.6871%" y="517" width="0.0613%" height="15" fill="rgb(205,94,34)" fg:x="1413" fg:w="1"/><text x="86.9371%" y="527.50"></text></g><g><title>tokio_uring::runtime::driver::Driver::dispatch_completions (3 samples, 0.18%)</title><rect x="86.7485%" y="533" width="0.1840%" height="15" fill="rgb(213,110,48)" fg:x="1414" fg:w="3"/><text x="86.9985%" y="543.50"></text></g><g><title>tokio_uring::runtime::driver::Ops::remove (1 samples, 0.06%)</title><rect x="86.9325%" y="533" width="0.0613%" height="15" fill="rgb(236,142,28)" fg:x="1417" fg:w="1"/><text x="87.1825%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_off (1 samples, 0.06%)</title><rect x="87.3620%" y="517" width="0.0613%" height="15" fill="rgb(225,135,29)" fg:x="1424" fg:w="1"/><text x="87.6120%" y="527.50"></text></g><g><title>bytes::bytes_mut::BytesMut::unsplit (3 samples, 0.18%)</title><rect x="87.4233%" y="517" width="0.1840%" height="15" fill="rgb(252,45,31)" fg:x="1425" fg:w="3"/><text x="87.6733%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio_uring::io::read::Read&lt;bytes::bytes_mut::BytesMut&gt;&gt;&gt; (2 samples, 0.12%)</title><rect x="87.6074%" y="517" width="0.1227%" height="15" fill="rgb(211,187,50)" fg:x="1428" fg:w="2"/><text x="87.8574%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::op::Op&lt;tokio_uring::io::read::Read&lt;bytes::bytes_mut::BytesMut&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="87.7301%" y="517" width="0.0613%" height="15" fill="rgb(229,109,7)" fg:x="1430" fg:w="1"/><text x="87.9801%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.06%)</title><rect x="87.7914%" y="517" width="0.0613%" height="15" fill="rgb(251,131,51)" fg:x="1431" fg:w="1"/><text x="88.0414%" y="527.50"></text></g><g><title>tokio_uring::runtime::driver::Ops::insert (2 samples, 0.12%)</title><rect x="87.8528%" y="517" width="0.1227%" height="15" fill="rgb(251,180,35)" fg:x="1432" fg:w="2"/><text x="88.1028%" y="527.50"></text></g><g><title>tokio_uring::runtime::driver::Ops::remove (1 samples, 0.06%)</title><rect x="87.9755%" y="517" width="0.0613%" height="15" fill="rgb(211,46,32)" fg:x="1434" fg:w="1"/><text x="88.2255%" y="527.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.06%)</title><rect x="88.7117%" y="501" width="0.0613%" height="15" fill="rgb(248,123,17)" fg:x="1446" fg:w="1"/><text x="88.9617%" y="511.50"></text></g><g><title>isfree (1 samples, 0.06%)</title><rect x="88.7117%" y="485" width="0.0613%" height="15" fill="rgb(227,141,18)" fg:x="1446" fg:w="1"/><text x="88.9617%" y="495.50"></text></g><g><title>thread_dalloc_event (1 samples, 0.06%)</title><rect x="88.7117%" y="469" width="0.0613%" height="15" fill="rgb(216,102,9)" fg:x="1446" fg:w="1"/><text x="88.9617%" y="479.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="88.7117%" y="453" width="0.0613%" height="15" fill="rgb(253,47,13)" fg:x="1446" fg:w="1"/><text x="88.9617%" y="463.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="88.7117%" y="437" width="0.0613%" height="15" fill="rgb(226,93,23)" fg:x="1446" fg:w="1"/><text x="88.9617%" y="447.50"></text></g><g><title>te_adjust_thresholds_helper (1 samples, 0.06%)</title><rect x="88.7117%" y="421" width="0.0613%" height="15" fill="rgb(247,104,17)" fg:x="1446" fg:w="1"/><text x="88.9617%" y="431.50"></text></g><g><title>te_ctx_next_event_set (1 samples, 0.06%)</title><rect x="88.7117%" y="405" width="0.0613%" height="15" fill="rgb(233,203,26)" fg:x="1446" fg:w="1"/><text x="88.9617%" y="415.50"></text></g><g><title>_rjem_je_tcache_postfork_child (1 samples, 0.06%)</title><rect x="88.7117%" y="389" width="0.0613%" height="15" fill="rgb(244,98,49)" fg:x="1446" fg:w="1"/><text x="88.9617%" y="399.50"></text></g><g><title>_rjem_je_malloc_default (1 samples, 0.06%)</title><rect x="89.0184%" y="485" width="0.0613%" height="15" fill="rgb(235,134,22)" fg:x="1451" fg:w="1"/><text x="89.2684%" y="495.50"></text></g><g><title>imalloc (1 samples, 0.06%)</title><rect x="89.0184%" y="469" width="0.0613%" height="15" fill="rgb(221,70,32)" fg:x="1451" fg:w="1"/><text x="89.2684%" y="479.50"></text></g><g><title>imalloc_body (1 samples, 0.06%)</title><rect x="89.0184%" y="453" width="0.0613%" height="15" fill="rgb(238,15,50)" fg:x="1451" fg:w="1"/><text x="89.2684%" y="463.50"></text></g><g><title>thread_alloc_event (1 samples, 0.06%)</title><rect x="89.0184%" y="437" width="0.0613%" height="15" fill="rgb(215,221,48)" fg:x="1451" fg:w="1"/><text x="89.2684%" y="447.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="89.0184%" y="421" width="0.0613%" height="15" fill="rgb(236,73,3)" fg:x="1451" fg:w="1"/><text x="89.2684%" y="431.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="89.0184%" y="405" width="0.0613%" height="15" fill="rgb(250,107,11)" fg:x="1451" fg:w="1"/><text x="89.2684%" y="415.50"></text></g><g><title>_rjem_je_tcache_gc_event_handler (1 samples, 0.06%)</title><rect x="89.0184%" y="389" width="0.0613%" height="15" fill="rgb(242,39,14)" fg:x="1451" fg:w="1"/><text x="89.2684%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (1 samples, 0.06%)</title><rect x="89.0798%" y="485" width="0.0613%" height="15" fill="rgb(248,164,37)" fg:x="1452" fg:w="1"/><text x="89.3298%" y="495.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_bytes (11 samples, 0.67%)</title><rect x="88.7730%" y="501" width="0.6748%" height="15" fill="rgb(217,60,12)" fg:x="1447" fg:w="11"/><text x="89.0230%" y="511.50"></text></g><g><title>malloc (5 samples, 0.31%)</title><rect x="89.1411%" y="485" width="0.3067%" height="15" fill="rgb(240,125,29)" fg:x="1453" fg:w="5"/><text x="89.3911%" y="495.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u32 (2 samples, 0.12%)</title><rect x="89.4479%" y="501" width="0.1227%" height="15" fill="rgb(208,207,28)" fg:x="1458" fg:w="2"/><text x="89.6979%" y="511.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (18 samples, 1.10%)</title><rect x="89.5706%" y="501" width="1.1043%" height="15" fill="rgb(209,159,27)" fg:x="1460" fg:w="18"/><text x="89.8206%" y="511.50"></text></g><g><title>crc32fast::hash (3 samples, 0.18%)</title><rect x="90.6748%" y="501" width="0.1840%" height="15" fill="rgb(251,176,53)" fg:x="1478" fg:w="3"/><text x="90.9248%" y="511.50"></text></g><g><title>transport::connection::Connection::read_frame::{{closure}} (64 samples, 3.93%)</title><rect x="86.9939%" y="533" width="3.9264%" height="15" fill="rgb(211,85,7)" fg:x="1418" fg:w="64"/><text x="87.2439%" y="543.50">tran..</text></g><g><title>transport::connection::Connection::parse_frame (47 samples, 2.88%)</title><rect x="88.0368%" y="517" width="2.8834%" height="15" fill="rgb(216,64,54)" fg:x="1435" fg:w="47"/><text x="88.2868%" y="527.50">tr..</text></g><g><title>sdallocx (1 samples, 0.06%)</title><rect x="90.8589%" y="501" width="0.0613%" height="15" fill="rgb(217,54,24)" fg:x="1481" fg:w="1"/><text x="91.1089%" y="511.50"></text></g><g><title>free_fastpath (1 samples, 0.06%)</title><rect x="90.8589%" y="485" width="0.0613%" height="15" fill="rgb(208,206,53)" fg:x="1481" fg:w="1"/><text x="91.1089%" y="495.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.06%)</title><rect x="90.8589%" y="469" width="0.0613%" height="15" fill="rgb(251,74,39)" fg:x="1481" fg:w="1"/><text x="91.1089%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;local_sync::oneshot::Inner&lt;core::result::Result&lt;(),transport::error::ConnectionError&gt;&gt;&gt;&gt;&gt; (5 samples, 0.31%)</title><rect x="91.2883%" y="517" width="0.3067%" height="15" fill="rgb(226,47,5)" fg:x="1488" fg:w="5"/><text x="91.5383%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (3 samples, 0.18%)</title><rect x="91.4110%" y="501" width="0.1840%" height="15" fill="rgb(234,111,33)" fg:x="1490" fg:w="3"/><text x="91.6610%" y="511.50"></text></g><g><title>RangeServer[Pri (707 samples, 43.37%)</title><rect x="48.3436%" y="677" width="43.3742%" height="15" fill="rgb(251,14,10)" fg:x="788" fg:w="707"/><text x="48.5936%" y="687.50">RangeServer[Pri</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (707 samples, 43.37%)</title><rect x="48.3436%" y="661" width="43.3742%" height="15" fill="rgb(232,43,0)" fg:x="788" fg:w="707"/><text x="48.5936%" y="671.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (707 samples, 43.37%)</title><rect x="48.3436%" y="645" width="43.3742%" height="15" fill="rgb(222,68,43)" fg:x="788" fg:w="707"/><text x="48.5936%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (707 samples, 43.37%)</title><rect x="48.3436%" y="629" width="43.3742%" height="15" fill="rgb(217,24,23)" fg:x="788" fg:w="707"/><text x="48.5936%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (707 samples, 43.37%)</title><rect x="48.3436%" y="613" width="43.3742%" height="15" fill="rgb(229,209,14)" fg:x="788" fg:w="707"/><text x="48.5936%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (707 samples, 43.37%)</title><rect x="48.3436%" y="597" width="43.3742%" height="15" fill="rgb(250,149,48)" fg:x="788" fg:w="707"/><text x="48.5936%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (576 samples, 35.34%)</title><rect x="56.3804%" y="581" width="35.3374%" height="15" fill="rgb(210,120,37)" fg:x="919" fg:w="576"/><text x="56.6304%" y="591.50">tokio::task::local::LocalSet::run_until::{{closure}}</text></g><g><title>tokio::task::local::LocalSet::tick (532 samples, 32.64%)</title><rect x="59.0798%" y="565" width="32.6380%" height="15" fill="rgb(210,21,8)" fg:x="963" fg:w="532"/><text x="59.3298%" y="575.50">tokio::task::local::LocalSet::tick</text></g><g><title>tokio::runtime::task::raw::poll (522 samples, 32.02%)</title><rect x="59.6933%" y="549" width="32.0245%" height="15" fill="rgb(243,145,7)" fg:x="973" fg:w="522"/><text x="59.9433%" y="559.50">tokio::runtime::task::raw::poll</text></g><g><title>transport::connection::Connection::write_frame::{{closure}} (13 samples, 0.80%)</title><rect x="90.9202%" y="533" width="0.7975%" height="15" fill="rgb(238,178,32)" fg:x="1482" fg:w="13"/><text x="91.1702%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.12%)</title><rect x="91.5951%" y="517" width="0.1227%" height="15" fill="rgb(222,4,10)" fg:x="1493" fg:w="2"/><text x="91.8451%" y="527.50"></text></g><g><title>iralloct (1 samples, 0.06%)</title><rect x="91.7791%" y="101" width="0.0613%" height="15" fill="rgb(239,7,37)" fg:x="1496" fg:w="1"/><text x="92.0291%" y="111.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.06%)</title><rect x="91.7791%" y="85" width="0.0613%" height="15" fill="rgb(215,31,37)" fg:x="1496" fg:w="1"/><text x="92.0291%" y="95.50"></text></g><g><title>alloc::fmt::format::format_inner (3 samples, 0.18%)</title><rect x="91.7791%" y="501" width="0.1840%" height="15" fill="rgb(224,83,33)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.18%)</title><rect x="91.7791%" y="485" width="0.1840%" height="15" fill="rgb(239,55,3)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="495.50"></text></g><g><title>core::fmt::write (3 samples, 0.18%)</title><rect x="91.7791%" y="469" width="0.1840%" height="15" fill="rgb(247,92,11)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="479.50"></text></g><g><title>core::fmt::run (3 samples, 0.18%)</title><rect x="91.7791%" y="453" width="0.1840%" height="15" fill="rgb(239,200,7)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.18%)</title><rect x="91.7791%" y="437" width="0.1840%" height="15" fill="rgb(227,115,8)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="447.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (3 samples, 0.18%)</title><rect x="91.7791%" y="421" width="0.1840%" height="15" fill="rgb(215,189,27)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="431.50"></text></g><g><title>core::fmt::write (3 samples, 0.18%)</title><rect x="91.7791%" y="405" width="0.1840%" height="15" fill="rgb(251,216,39)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="415.50"></text></g><g><title>core::fmt::run (3 samples, 0.18%)</title><rect x="91.7791%" y="389" width="0.1840%" height="15" fill="rgb(207,29,47)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.18%)</title><rect x="91.7791%" y="373" width="0.1840%" height="15" fill="rgb(210,71,34)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3 samples, 0.18%)</title><rect x="91.7791%" y="357" width="0.1840%" height="15" fill="rgb(253,217,51)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3 samples, 0.18%)</title><rect x="91.7791%" y="341" width="0.1840%" height="15" fill="rgb(222,117,46)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (3 samples, 0.18%)</title><rect x="91.7791%" y="325" width="0.1840%" height="15" fill="rgb(226,132,6)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="335.50"></text></g><g><title>alloc::string::String::push_str (3 samples, 0.18%)</title><rect x="91.7791%" y="309" width="0.1840%" height="15" fill="rgb(254,145,51)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.18%)</title><rect x="91.7791%" y="293" width="0.1840%" height="15" fill="rgb(231,199,27)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.18%)</title><rect x="91.7791%" y="277" width="0.1840%" height="15" fill="rgb(245,158,14)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.18%)</title><rect x="91.7791%" y="261" width="0.1840%" height="15" fill="rgb(240,113,14)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (3 samples, 0.18%)</title><rect x="91.7791%" y="245" width="0.1840%" height="15" fill="rgb(210,20,13)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.18%)</title><rect x="91.7791%" y="229" width="0.1840%" height="15" fill="rgb(241,144,13)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.18%)</title><rect x="91.7791%" y="213" width="0.1840%" height="15" fill="rgb(235,43,34)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.18%)</title><rect x="91.7791%" y="197" width="0.1840%" height="15" fill="rgb(208,36,20)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.18%)</title><rect x="91.7791%" y="181" width="0.1840%" height="15" fill="rgb(239,204,10)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.18%)</title><rect x="91.7791%" y="165" width="0.1840%" height="15" fill="rgb(217,84,43)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.18%)</title><rect x="91.7791%" y="149" width="0.1840%" height="15" fill="rgb(241,170,50)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="159.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.18%)</title><rect x="91.7791%" y="133" width="0.1840%" height="15" fill="rgb(226,205,29)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="143.50"></text></g><g><title>do_rallocx (3 samples, 0.18%)</title><rect x="91.7791%" y="117" width="0.1840%" height="15" fill="rgb(233,113,1)" fg:x="1496" fg:w="3"/><text x="92.0291%" y="127.50"></text></g><g><title>thread_alloc_event (2 samples, 0.12%)</title><rect x="91.8405%" y="101" width="0.1227%" height="15" fill="rgb(253,98,13)" fg:x="1497" fg:w="2"/><text x="92.0905%" y="111.50"></text></g><g><title>te_event_advance (2 samples, 0.12%)</title><rect x="91.8405%" y="85" width="0.1227%" height="15" fill="rgb(211,115,12)" fg:x="1497" fg:w="2"/><text x="92.0905%" y="95.50"></text></g><g><title>&lt;cpp_demangle::ast::FunctionArgSlice as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="91.9632%" y="421" width="0.0613%" height="15" fill="rgb(208,12,16)" fg:x="1499" fg:w="1"/><text x="92.2132%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="91.9632%" y="405" width="0.0613%" height="15" fill="rgb(237,193,54)" fg:x="1499" fg:w="1"/><text x="92.2132%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="91.9632%" y="389" width="0.0613%" height="15" fill="rgb(243,22,42)" fg:x="1499" fg:w="1"/><text x="92.2132%" y="399.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="91.9632%" y="373" width="0.0613%" height="15" fill="rgb(233,151,36)" fg:x="1499" fg:w="1"/><text x="92.2132%" y="383.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="91.9632%" y="357" width="0.0613%" height="15" fill="rgb(237,57,45)" fg:x="1499" fg:w="1"/><text x="92.2132%" y="367.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::DemangleAsInner&lt;W&gt;&gt;::demangle_as_inner (1 samples, 0.06%)</title><rect x="91.9632%" y="341" width="0.0613%" height="15" fill="rgb(221,88,17)" fg:x="1499" fg:w="1"/><text x="92.2132%" y="351.50"></text></g><g><title>&lt;cpp_demangle::ast::Encoding as cpp_demangle::ast::DemangleAsInner&lt;W&gt;&gt;::demangle_as_inner (2 samples, 0.12%)</title><rect x="91.9632%" y="437" width="0.1227%" height="15" fill="rgb(230,79,15)" fg:x="1499" fg:w="2"/><text x="92.2132%" y="447.50"></text></g><g><title>cpp_demangle::ast::DemangleAsInner::demangle_as_inner (1 samples, 0.06%)</title><rect x="92.0245%" y="421" width="0.0613%" height="15" fill="rgb(213,57,13)" fg:x="1500" fg:w="1"/><text x="92.2745%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::MangledName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (3 samples, 0.18%)</title><rect x="91.9632%" y="485" width="0.1840%" height="15" fill="rgb(222,116,39)" fg:x="1499" fg:w="3"/><text x="92.2132%" y="495.50"></text></g><g><title>&lt;cpp_demangle::ast::Encoding as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (3 samples, 0.18%)</title><rect x="91.9632%" y="469" width="0.1840%" height="15" fill="rgb(245,107,2)" fg:x="1499" fg:w="3"/><text x="92.2132%" y="479.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (3 samples, 0.18%)</title><rect x="91.9632%" y="453" width="0.1840%" height="15" fill="rgb(238,1,10)" fg:x="1499" fg:w="3"/><text x="92.2132%" y="463.50"></text></g><g><title>&lt;cpp_demangle::subs::Substitutable as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="92.0859%" y="437" width="0.0613%" height="15" fill="rgb(249,4,48)" fg:x="1501" fg:w="1"/><text x="92.3359%" y="447.50"></text></g><g><title>&lt;cpp_demangle::subs::Substitutable as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="92.0859%" y="421" width="0.0613%" height="15" fill="rgb(223,151,18)" fg:x="1501" fg:w="1"/><text x="92.3359%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::UnqualifiedName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="92.0859%" y="405" width="0.0613%" height="15" fill="rgb(227,65,43)" fg:x="1501" fg:w="1"/><text x="92.3359%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::SourceName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="92.0859%" y="389" width="0.0613%" height="15" fill="rgb(218,40,45)" fg:x="1501" fg:w="1"/><text x="92.3359%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="92.0859%" y="373" width="0.0613%" height="15" fill="rgb(252,121,31)" fg:x="1501" fg:w="1"/><text x="92.3359%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.49%)</title><rect x="91.7178%" y="581" width="0.4908%" height="15" fill="rgb(219,158,43)" fg:x="1495" fg:w="8"/><text x="91.9678%" y="591.50"></text></g><g><title>core::fmt::write (8 samples, 0.49%)</title><rect x="91.7178%" y="565" width="0.4908%" height="15" fill="rgb(231,162,42)" fg:x="1495" fg:w="8"/><text x="91.9678%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (8 samples, 0.49%)</title><rect x="91.7178%" y="549" width="0.4908%" height="15" fill="rgb(217,179,25)" fg:x="1495" fg:w="8"/><text x="91.9678%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (8 samples, 0.49%)</title><rect x="91.7178%" y="533" width="0.4908%" height="15" fill="rgb(206,212,31)" fg:x="1495" fg:w="8"/><text x="91.9678%" y="543.50"></text></g><g><title>pprof::frames::Symbol::name (8 samples, 0.49%)</title><rect x="91.7178%" y="517" width="0.4908%" height="15" fill="rgb(235,144,12)" fg:x="1495" fg:w="8"/><text x="91.9678%" y="527.50"></text></g><g><title>symbolic_demangle::try_demangle_cpp (4 samples, 0.25%)</title><rect x="91.9632%" y="501" width="0.2454%" height="15" fill="rgb(213,51,10)" fg:x="1499" fg:w="4"/><text x="92.2132%" y="511.50"></text></g><g><title>&lt;cpp_demangle::ast::MangledName as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="92.1472%" y="485" width="0.0613%" height="15" fill="rgb(231,145,14)" fg:x="1502" fg:w="1"/><text x="92.3972%" y="495.50"></text></g><g><title>&lt;cpp_demangle::ast::Encoding as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="92.1472%" y="469" width="0.0613%" height="15" fill="rgb(235,15,28)" fg:x="1502" fg:w="1"/><text x="92.3972%" y="479.50"></text></g><g><title>&lt;cpp_demangle::ast::BareFunctionType as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="92.1472%" y="453" width="0.0613%" height="15" fill="rgb(237,206,10)" fg:x="1502" fg:w="1"/><text x="92.3972%" y="463.50"></text></g><g><title>cpp_demangle::ast::one_or_more (1 samples, 0.06%)</title><rect x="92.1472%" y="437" width="0.0613%" height="15" fill="rgb(236,227,27)" fg:x="1502" fg:w="1"/><text x="92.3972%" y="447.50"></text></g><g><title>&lt;cpp_demangle::ast::TypeHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="92.1472%" y="421" width="0.0613%" height="15" fill="rgb(246,83,35)" fg:x="1502" fg:w="1"/><text x="92.3972%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::TypeHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="92.1472%" y="405" width="0.0613%" height="15" fill="rgb(220,136,24)" fg:x="1502" fg:w="1"/><text x="92.3972%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::TypeHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="92.1472%" y="389" width="0.0613%" height="15" fill="rgb(217,3,25)" fg:x="1502" fg:w="1"/><text x="92.3972%" y="399.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="92.1472%" y="373" width="0.0613%" height="15" fill="rgb(239,24,14)" fg:x="1502" fg:w="1"/><text x="92.3972%" y="383.50"></text></g><g><title>&lt;cpp_demangle::ast::PrefixHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="92.1472%" y="357" width="0.0613%" height="15" fill="rgb(244,16,53)" fg:x="1502" fg:w="1"/><text x="92.3972%" y="367.50"></text></g><g><title>&lt;str_stack::Writer as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="92.2699%" y="565" width="0.0613%" height="15" fill="rgb(208,175,44)" fg:x="1504" fg:w="1"/><text x="92.5199%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="92.3313%" y="565" width="0.0613%" height="15" fill="rgb(252,18,48)" fg:x="1505" fg:w="1"/><text x="92.5813%" y="575.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.06%)</title><rect x="92.3313%" y="549" width="0.0613%" height="15" fill="rgb(234,199,32)" fg:x="1505" fg:w="1"/><text x="92.5813%" y="559.50"></text></g><g><title>inferno::flamegraph::merge::frames (2 samples, 0.12%)</title><rect x="92.3926%" y="565" width="0.1227%" height="15" fill="rgb(225,77,54)" fg:x="1506" fg:w="2"/><text x="92.6426%" y="575.50"></text></g><g><title>inferno::flamegraph::merge::flow (2 samples, 0.12%)</title><rect x="92.3926%" y="549" width="0.1227%" height="15" fill="rgb(225,42,25)" fg:x="1506" fg:w="2"/><text x="92.6426%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="92.4540%" y="533" width="0.0613%" height="15" fill="rgb(242,227,46)" fg:x="1507" fg:w="1"/><text x="92.7040%" y="543.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="92.5153%" y="549" width="0.0613%" height="15" fill="rgb(246,197,35)" fg:x="1508" fg:w="1"/><text x="92.7653%" y="559.50"></text></g><g><title>core::fmt::run (1 samples, 0.06%)</title><rect x="92.5153%" y="533" width="0.0613%" height="15" fill="rgb(215,159,26)" fg:x="1508" fg:w="1"/><text x="92.7653%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.06%)</title><rect x="92.5153%" y="517" width="0.0613%" height="15" fill="rgb(212,194,50)" fg:x="1508" fg:w="1"/><text x="92.7653%" y="527.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.06%)</title><rect x="92.5153%" y="501" width="0.0613%" height="15" fill="rgb(246,132,1)" fg:x="1508" fg:w="1"/><text x="92.7653%" y="511.50"></text></g><g><title>core::num::flt2dec::to_exact_fixed_str (1 samples, 0.06%)</title><rect x="92.5153%" y="485" width="0.0613%" height="15" fill="rgb(217,71,7)" fg:x="1508" fg:w="1"/><text x="92.7653%" y="495.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.06%)</title><rect x="92.5153%" y="469" width="0.0613%" height="15" fill="rgb(252,59,32)" fg:x="1508" fg:w="1"/><text x="92.7653%" y="479.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact (1 samples, 0.06%)</title><rect x="92.5153%" y="453" width="0.0613%" height="15" fill="rgb(253,204,25)" fg:x="1508" fg:w="1"/><text x="92.7653%" y="463.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (1 samples, 0.06%)</title><rect x="92.5153%" y="437" width="0.0613%" height="15" fill="rgb(232,21,16)" fg:x="1508" fg:w="1"/><text x="92.7653%" y="447.50"></text></g><g><title>inferno::flamegraph::svg::write_str (2 samples, 0.12%)</title><rect x="92.5153%" y="565" width="0.1227%" height="15" fill="rgb(248,90,29)" fg:x="1508" fg:w="2"/><text x="92.7653%" y="575.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (1 samples, 0.06%)</title><rect x="92.5767%" y="549" width="0.0613%" height="15" fill="rgb(249,223,7)" fg:x="1509" fg:w="1"/><text x="92.8267%" y="559.50"></text></g><g><title>quick_xml::events::BytesStart::push_attribute (1 samples, 0.06%)</title><rect x="92.6380%" y="565" width="0.0613%" height="15" fill="rgb(231,119,42)" fg:x="1510" fg:w="1"/><text x="92.8880%" y="575.50"></text></g><g><title>quick_xml::escapei::escape (1 samples, 0.06%)</title><rect x="92.6380%" y="549" width="0.0613%" height="15" fill="rgb(215,41,35)" fg:x="1510" fg:w="1"/><text x="92.8880%" y="559.50"></text></g><g><title>inferno::flamegraph::from_lines (12 samples, 0.74%)</title><rect x="92.2086%" y="581" width="0.7362%" height="15" fill="rgb(220,44,45)" fg:x="1503" fg:w="12"/><text x="92.4586%" y="591.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (4 samples, 0.25%)</title><rect x="92.6994%" y="565" width="0.2454%" height="15" fill="rgb(253,197,36)" fg:x="1511" fg:w="4"/><text x="92.9494%" y="575.50"></text></g><g><title>std::io::Write::write_all (3 samples, 0.18%)</title><rect x="92.7607%" y="549" width="0.1840%" height="15" fill="rgb(245,225,54)" fg:x="1512" fg:w="3"/><text x="93.0107%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.06%)</title><rect x="92.9448%" y="581" width="0.0613%" height="15" fill="rgb(239,94,37)" fg:x="1515" fg:w="1"/><text x="93.1948%" y="591.50"></text></g><g><title>flamegraph (22 samples, 1.35%)</title><rect x="91.7178%" y="677" width="1.3497%" height="15" fill="rgb(242,217,10)" fg:x="1495" fg:w="22"/><text x="91.9678%" y="687.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (22 samples, 1.35%)</title><rect x="91.7178%" y="661" width="1.3497%" height="15" fill="rgb(250,193,7)" fg:x="1495" fg:w="22"/><text x="91.9678%" y="671.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22 samples, 1.35%)</title><rect x="91.7178%" y="645" width="1.3497%" height="15" fill="rgb(230,104,19)" fg:x="1495" fg:w="22"/><text x="91.9678%" y="655.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (22 samples, 1.35%)</title><rect x="91.7178%" y="629" width="1.3497%" height="15" fill="rgb(230,181,4)" fg:x="1495" fg:w="22"/><text x="91.9678%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (22 samples, 1.35%)</title><rect x="91.7178%" y="613" width="1.3497%" height="15" fill="rgb(216,219,49)" fg:x="1495" fg:w="22"/><text x="91.9678%" y="623.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (22 samples, 1.35%)</title><rect x="91.7178%" y="597" width="1.3497%" height="15" fill="rgb(254,144,0)" fg:x="1495" fg:w="22"/><text x="91.9678%" y="607.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (1 samples, 0.06%)</title><rect x="93.0061%" y="581" width="0.0613%" height="15" fill="rgb(205,209,38)" fg:x="1516" fg:w="1"/><text x="93.2561%" y="591.50"></text></g><g><title>rocksdb::HistogramStat::Data(rocksdb::HistogramData*) const (1 samples, 0.06%)</title><rect x="93.1288%" y="597" width="0.0613%" height="15" fill="rgb(240,21,42)" fg:x="1518" fg:w="1"/><text x="93.3788%" y="607.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.06%)</title><rect x="93.1902%" y="581" width="0.0613%" height="15" fill="rgb(241,132,3)" fg:x="1519" fg:w="1"/><text x="93.4402%" y="591.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="93.1902%" y="565" width="0.0613%" height="15" fill="rgb(225,14,2)" fg:x="1519" fg:w="1"/><text x="93.4402%" y="575.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="93.1902%" y="549" width="0.0613%" height="15" fill="rgb(210,141,35)" fg:x="1519" fg:w="1"/><text x="93.4402%" y="559.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="93.1902%" y="533" width="0.0613%" height="15" fill="rgb(251,14,44)" fg:x="1519" fg:w="1"/><text x="93.4402%" y="543.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="93.1902%" y="517" width="0.0613%" height="15" fill="rgb(247,48,18)" fg:x="1519" fg:w="1"/><text x="93.4402%" y="527.50"></text></g><g><title>rocksdb::StatisticsImpl::getHistogramImplLocked(unsigned int) const (95 samples, 5.83%)</title><rect x="93.1902%" y="597" width="5.8282%" height="15" fill="rgb(225,0,40)" fg:x="1519" fg:w="95"/><text x="93.4402%" y="607.50">rocksdb..</text></g><g><title>rocksdb::HistogramImpl::Merge(rocksdb::HistogramImpl const&amp;) (94 samples, 5.77%)</title><rect x="93.2515%" y="581" width="5.7669%" height="15" fill="rgb(221,31,33)" fg:x="1520" fg:w="94"/><text x="93.5015%" y="591.50">rocksdb..</text></g><g><title>rocksdb::HistogramStat::Merge(rocksdb::HistogramStat const&amp;) (94 samples, 5.77%)</title><rect x="93.2515%" y="565" width="5.7669%" height="15" fill="rgb(237,42,40)" fg:x="1520" fg:w="94"/><text x="93.5015%" y="575.50">rocksdb..</text></g><g><title>rocksdb::DBImpl::PrintStatistics() (97 samples, 5.95%)</title><rect x="93.1288%" y="629" width="5.9509%" height="15" fill="rgb(233,51,29)" fg:x="1518" fg:w="97"/><text x="93.3788%" y="639.50">rocksdb:..</text></g><g><title>rocksdb::StatisticsImpl::ToString[abi:cxx11]() const (97 samples, 5.95%)</title><rect x="93.1288%" y="613" width="5.9509%" height="15" fill="rgb(226,58,20)" fg:x="1518" fg:w="97"/><text x="93.3788%" y="623.50">rocksdb:..</text></g><g><title>rocksdb::StatisticsImpl::getTickerCountLocked(unsigned int) const (1 samples, 0.06%)</title><rect x="99.0184%" y="597" width="0.0613%" height="15" fill="rgb(208,98,7)" fg:x="1614" fg:w="1"/><text x="99.2684%" y="607.50"></text></g><g><title>rocksdb::InternalStats::HandleCFStatsPeriodic(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, rocksdb::Slice) (1 samples, 0.06%)</title><rect x="99.0798%" y="629" width="0.0613%" height="15" fill="rgb(228,143,44)" fg:x="1615" fg:w="1"/><text x="99.3298%" y="639.50"></text></g><g><title>rocksdb::InternalStats::DumpCFStatsNoFileHistogram(bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.06%)</title><rect x="99.0798%" y="613" width="0.0613%" height="15" fill="rgb(246,55,38)" fg:x="1615" fg:w="1"/><text x="99.3298%" y="623.50"></text></g><g><title>rocksdb::InternalStats::DumpCFStatsWriteStall(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, unsigned long*) (1 samples, 0.06%)</title><rect x="99.0798%" y="597" width="0.0613%" height="15" fill="rgb(247,87,16)" fg:x="1615" fg:w="1"/><text x="99.3298%" y="607.50"></text></g><g><title>rocksdb::InternalStats::DumpCFMapStatsWriteStall(std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;*) (1 samples, 0.06%)</title><rect x="99.0798%" y="581" width="0.0613%" height="15" fill="rgb(234,129,42)" fg:x="1615" fg:w="1"/><text x="99.3298%" y="591.50"></text></g><g><title>rocksdb::WriteStallStatsMapKeys::CauseConditionCount[abi:cxx11](rocksdb::WriteStallCause, rocksdb::WriteStallCondition) (1 samples, 0.06%)</title><rect x="99.0798%" y="565" width="0.0613%" height="15" fill="rgb(220,82,16)" fg:x="1615" fg:w="1"/><text x="99.3298%" y="575.50"></text></g><g><title>rocksdb::WriteStallConditionToHyphenString[abi:cxx11](rocksdb::WriteStallCondition) (1 samples, 0.06%)</title><rect x="99.0798%" y="549" width="0.0613%" height="15" fill="rgb(211,88,4)" fg:x="1615" fg:w="1"/><text x="99.3298%" y="559.50"></text></g><g><title>rocksdb::InternalStats::HandleDBStats(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, rocksdb::Slice) (1 samples, 0.06%)</title><rect x="99.1411%" y="629" width="0.0613%" height="15" fill="rgb(248,151,21)" fg:x="1616" fg:w="1"/><text x="99.3911%" y="639.50"></text></g><g><title>rocksdb::InternalStats::DumpDBStats(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.06%)</title><rect x="99.1411%" y="613" width="0.0613%" height="15" fill="rgb(238,163,6)" fg:x="1616" fg:w="1"/><text x="99.3911%" y="623.50"></text></g><g><title>rocksdb::InternalStats::DumpDBStatsWriteStall(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.06%)</title><rect x="99.1411%" y="597" width="0.0613%" height="15" fill="rgb(209,183,11)" fg:x="1616" fg:w="1"/><text x="99.3911%" y="607.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.06%)</title><rect x="99.1411%" y="581" width="0.0613%" height="15" fill="rgb(219,37,20)" fg:x="1616" fg:w="1"/><text x="99.3911%" y="591.50"></text></g><g><title>std::ios_base::_M_init() (1 samples, 0.06%)</title><rect x="99.1411%" y="565" width="0.0613%" height="15" fill="rgb(210,158,4)" fg:x="1616" fg:w="1"/><text x="99.3911%" y="575.50"></text></g><g><title>rocksdb::DBImpl::DumpStats() (100 samples, 6.13%)</title><rect x="93.1288%" y="645" width="6.1350%" height="15" fill="rgb(221,167,53)" fg:x="1518" fg:w="100"/><text x="93.3788%" y="655.50">rocksdb:..</text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt;(char const*, char const*, std::forward_iterator_tag) (1 samples, 0.06%)</title><rect x="99.2025%" y="629" width="0.0613%" height="15" fill="rgb(237,151,45)" fg:x="1617" fg:w="1"/><text x="99.4525%" y="639.50"></text></g><g><title>rocksdb::DBImpl::EstimateInMemoryStatsHistorySize() const (2 samples, 0.12%)</title><rect x="99.3252%" y="629" width="0.1227%" height="15" fill="rgb(231,39,3)" fg:x="1619" fg:w="2"/><text x="99.5752%" y="639.50"></text></g><g><title>std::_Rb_tree_increment(std::_Rb_tree_node_base const*) (2 samples, 0.12%)</title><rect x="99.3252%" y="613" width="0.1227%" height="15" fill="rgb(212,167,28)" fg:x="1619" fg:w="2"/><text x="99.5752%" y="623.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.06%)</title><rect x="99.5092%" y="613" width="0.0613%" height="15" fill="rgb(232,178,8)" fg:x="1622" fg:w="1"/><text x="99.7592%" y="623.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="99.5092%" y="597" width="0.0613%" height="15" fill="rgb(225,151,20)" fg:x="1622" fg:w="1"/><text x="99.7592%" y="607.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="99.5092%" y="581" width="0.0613%" height="15" fill="rgb(238,3,37)" fg:x="1622" fg:w="1"/><text x="99.7592%" y="591.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="99.5092%" y="565" width="0.0613%" height="15" fill="rgb(251,147,42)" fg:x="1622" fg:w="1"/><text x="99.7592%" y="575.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="99.5092%" y="549" width="0.0613%" height="15" fill="rgb(208,173,10)" fg:x="1622" fg:w="1"/><text x="99.7592%" y="559.50"></text></g><g><title>rocksdb::StatisticsImpl::getTickerCountLocked(unsigned int) const (2 samples, 0.12%)</title><rect x="99.5706%" y="613" width="0.1227%" height="15" fill="rgb(246,225,4)" fg:x="1623" fg:w="2"/><text x="99.8206%" y="623.50"></text></g><g><title>rocksdb::StatisticsImpl::getTickerMap(std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;*) const (5 samples, 0.31%)</title><rect x="99.4479%" y="629" width="0.3067%" height="15" fill="rgb(248,102,6)" fg:x="1621" fg:w="5"/><text x="99.6979%" y="639.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (1 samples, 0.06%)</title><rect x="99.6933%" y="613" width="0.0613%" height="15" fill="rgb(232,6,21)" fg:x="1625" fg:w="1"/><text x="99.9433%" y="623.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.06%)</title><rect x="99.7546%" y="629" width="0.0613%" height="15" fill="rgb(221,179,22)" fg:x="1626" fg:w="1"/><text x="100.0046%" y="639.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::operator=(std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt; const&amp;) (1 samples, 0.06%)</title><rect x="99.8160%" y="629" width="0.0613%" height="15" fill="rgb(252,50,20)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="639.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&gt;(std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; const*, std::_Rb_tree_node_base*, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&amp;) (1 samples, 0.06%)</title><rect x="99.8160%" y="613" width="0.0613%" height="15" fill="rgb(222,56,38)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="623.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&gt;(std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; const*, std::_Rb_tree_node_base*, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&amp;) (1 samples, 0.06%)</title><rect x="99.8160%" y="597" width="0.0613%" height="15" fill="rgb(206,193,29)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="607.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&gt;(std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; const*, std::_Rb_tree_node_base*, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&amp;) (1 samples, 0.06%)</title><rect x="99.8160%" y="581" width="0.0613%" height="15" fill="rgb(239,192,45)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="591.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) [clone .constprop.0] (1 samples, 0.06%)</title><rect x="99.8160%" y="565" width="0.0613%" height="15" fill="rgb(254,18,36)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="575.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.06%)</title><rect x="99.8160%" y="549" width="0.0613%" height="15" fill="rgb(221,127,11)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="559.50"></text></g><g><title>_rjem_je_malloc_default (1 samples, 0.06%)</title><rect x="99.8160%" y="533" width="0.0613%" height="15" fill="rgb(234,146,35)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="543.50"></text></g><g><title>imalloc (1 samples, 0.06%)</title><rect x="99.8160%" y="517" width="0.0613%" height="15" fill="rgb(254,201,37)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="527.50"></text></g><g><title>imalloc_body (1 samples, 0.06%)</title><rect x="99.8160%" y="501" width="0.0613%" height="15" fill="rgb(211,202,23)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="511.50"></text></g><g><title>imalloc_no_sample (1 samples, 0.06%)</title><rect x="99.8160%" y="485" width="0.0613%" height="15" fill="rgb(237,91,2)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="495.50"></text></g><g><title>iallocztm (1 samples, 0.06%)</title><rect x="99.8160%" y="469" width="0.0613%" height="15" fill="rgb(226,228,36)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="479.50"></text></g><g><title>arena_malloc (1 samples, 0.06%)</title><rect x="99.8160%" y="453" width="0.0613%" height="15" fill="rgb(213,63,50)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="463.50"></text></g><g><title>tcache_alloc_small (1 samples, 0.06%)</title><rect x="99.8160%" y="437" width="0.0613%" height="15" fill="rgb(235,194,19)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="447.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.06%)</title><rect x="99.8160%" y="421" width="0.0613%" height="15" fill="rgb(207,204,18)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="431.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.06%)</title><rect x="99.8160%" y="405" width="0.0613%" height="15" fill="rgb(248,8,7)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="415.50"></text></g><g><title>arena_slab_alloc (1 samples, 0.06%)</title><rect x="99.8160%" y="389" width="0.0613%" height="15" fill="rgb(223,145,47)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="399.50"></text></g><g><title>_rjem_je_pa_alloc (1 samples, 0.06%)</title><rect x="99.8160%" y="373" width="0.0613%" height="15" fill="rgb(228,84,11)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="383.50"></text></g><g><title>pai_alloc (1 samples, 0.06%)</title><rect x="99.8160%" y="357" width="0.0613%" height="15" fill="rgb(218,76,45)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="367.50"></text></g><g><title>pac_alloc_impl (1 samples, 0.06%)</title><rect x="99.8160%" y="341" width="0.0613%" height="15" fill="rgb(223,80,15)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="351.50"></text></g><g><title>pac_alloc_real (1 samples, 0.06%)</title><rect x="99.8160%" y="325" width="0.0613%" height="15" fill="rgb(219,218,33)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="335.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.06%)</title><rect x="99.8160%" y="309" width="0.0613%" height="15" fill="rgb(208,51,11)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="319.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="99.8160%" y="293" width="0.0613%" height="15" fill="rgb(229,165,39)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="303.50"></text></g><g><title>extent_recycle_split (1 samples, 0.06%)</title><rect x="99.8160%" y="277" width="0.0613%" height="15" fill="rgb(241,100,24)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="287.50"></text></g><g><title>extent_split_interior (1 samples, 0.06%)</title><rect x="99.8160%" y="261" width="0.0613%" height="15" fill="rgb(228,14,23)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="271.50"></text></g><g><title>extent_split_impl (1 samples, 0.06%)</title><rect x="99.8160%" y="245" width="0.0613%" height="15" fill="rgb(247,116,52)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="255.50"></text></g><g><title>edata_init (1 samples, 0.06%)</title><rect x="99.8160%" y="229" width="0.0613%" height="15" fill="rgb(216,149,33)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="239.50"></text></g><g><title>edata_is_head_set (1 samples, 0.06%)</title><rect x="99.8160%" y="213" width="0.0613%" height="15" fill="rgb(238,142,29)" fg:x="1627" fg:w="1"/><text x="100.0660%" y="223.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.06%)</title><rect x="99.8773%" y="613" width="0.0613%" height="15" fill="rgb(224,83,40)" fg:x="1628" fg:w="1"/><text x="100.1273%" y="623.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="99.8773%" y="597" width="0.0613%" height="15" fill="rgb(234,165,11)" fg:x="1628" fg:w="1"/><text x="100.1273%" y="607.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="99.8773%" y="581" width="0.0613%" height="15" fill="rgb(215,96,23)" fg:x="1628" fg:w="1"/><text x="100.1273%" y="591.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="99.8773%" y="565" width="0.0613%" height="15" fill="rgb(233,179,26)" fg:x="1628" fg:w="1"/><text x="100.1273%" y="575.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="99.8773%" y="549" width="0.0613%" height="15" fill="rgb(225,129,33)" fg:x="1628" fg:w="1"/><text x="100.1273%" y="559.50"></text></g><g><title>all (1,630 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(237,49,13)" fg:x="0" fg:w="1630"/><text x="0.2500%" y="703.50"></text></g><g><title>range-server (113 samples, 6.93%)</title><rect x="93.0675%" y="677" width="6.9325%" height="15" fill="rgb(211,3,31)" fg:x="1517" fg:w="113"/><text x="93.3175%" y="687.50">range-ser..</text></g><g><title>rocksdb::Timer::Run() (113 samples, 6.93%)</title><rect x="93.0675%" y="661" width="6.9325%" height="15" fill="rgb(216,152,19)" fg:x="1517" fg:w="113"/><text x="93.3175%" y="671.50">rocksdb::..</text></g><g><title>rocksdb::DBImpl::PersistStats() (12 samples, 0.74%)</title><rect x="99.2638%" y="645" width="0.7362%" height="15" fill="rgb(251,121,35)" fg:x="1618" fg:w="12"/><text x="99.5138%" y="655.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt;) (2 samples, 0.12%)</title><rect x="99.8773%" y="629" width="0.1227%" height="15" fill="rgb(210,217,47)" fg:x="1628" fg:w="2"/><text x="100.1273%" y="639.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.06%)</title><rect x="99.9387%" y="613" width="0.0613%" height="15" fill="rgb(244,116,22)" fg:x="1629" fg:w="1"/><text x="100.1887%" y="623.50"></text></g></svg></svg>