<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="725.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="725.00"> </text><svg id="frames" x="10" width="1180" total_samples="1768"><g><title>&lt;observation::metrics::uring_metrics::INFLIGHT_IO as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="2.5452%" y="565" width="0.0566%" height="15" fill="rgb(228,17,21)" fg:x="45" fg:w="1"/><text x="2.7952%" y="575.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until.2063 (11 samples, 0.62%)</title><rect x="2.7715%" y="549" width="0.6222%" height="15" fill="rgb(240,149,34)" fg:x="49" fg:w="11"/><text x="3.0215%" y="559.50"></text></g><g><title>std::thread::park (5 samples, 0.28%)</title><rect x="3.1109%" y="533" width="0.2828%" height="15" fill="rgb(208,125,47)" fg:x="55" fg:w="5"/><text x="3.3609%" y="543.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (16 samples, 0.90%)</title><rect x="2.6018%" y="565" width="0.9050%" height="15" fill="rgb(249,186,39)" fg:x="46" fg:w="16"/><text x="2.8518%" y="575.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::register (2 samples, 0.11%)</title><rect x="3.3937%" y="549" width="0.1131%" height="15" fill="rgb(240,220,33)" fg:x="60" fg:w="2"/><text x="3.6437%" y="559.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (9 samples, 0.51%)</title><rect x="3.5068%" y="565" width="0.5090%" height="15" fill="rgb(243,110,23)" fg:x="62" fg:w="9"/><text x="3.7568%" y="575.50"></text></g><g><title>rocksdb_get_pinned_cf (1 samples, 0.06%)</title><rect x="4.0158%" y="565" width="0.0566%" height="15" fill="rgb(219,163,46)" fg:x="71" fg:w="1"/><text x="4.2658%" y="575.50"></text></g><g><title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*) (1 samples, 0.06%)</title><rect x="4.0158%" y="549" width="0.0566%" height="15" fill="rgb(216,126,30)" fg:x="71" fg:w="1"/><text x="4.2658%" y="559.50"></text></g><g><title>rocksdb::DBImpl::Get(rocksdb::ReadOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::PinnableSlice*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.06%)</title><rect x="4.0158%" y="533" width="0.0566%" height="15" fill="rgb(208,139,11)" fg:x="71" fg:w="1"/><text x="4.2658%" y="543.50"></text></g><g><title>rocksdb::DBImpl::GetImpl(rocksdb::ReadOptions const&amp;, rocksdb::Slice const&amp;, rocksdb::DBImpl::GetImplOptions&amp;) (1 samples, 0.06%)</title><rect x="4.0158%" y="517" width="0.0566%" height="15" fill="rgb(213,118,36)" fg:x="71" fg:w="1"/><text x="4.2658%" y="527.50"></text></g><g><title>rocksdb::Version::Get(rocksdb::ReadOptions const&amp;, rocksdb::LookupKey const&amp;, rocksdb::PinnableSlice*, rocksdb::PinnableWideColumns*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, rocksdb::Status*, rocksdb::MergeContext*, unsigned long*, rocksdb::PinnedIteratorsManager*, bool*, bool*, unsigned long*, rocksdb::ReadCallback*, bool*, bool) (1 samples, 0.06%)</title><rect x="4.0158%" y="501" width="0.0566%" height="15" fill="rgb(226,43,17)" fg:x="71" fg:w="1"/><text x="4.2658%" y="511.50"></text></g><g><title>sdallocx (1 samples, 0.06%)</title><rect x="4.0724%" y="565" width="0.0566%" height="15" fill="rgb(254,217,4)" fg:x="72" fg:w="1"/><text x="4.3224%" y="575.50"></text></g><g><title>free_fastpath (1 samples, 0.06%)</title><rect x="4.0724%" y="549" width="0.0566%" height="15" fill="rgb(210,134,47)" fg:x="72" fg:w="1"/><text x="4.3224%" y="559.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.06%)</title><rect x="4.0724%" y="533" width="0.0566%" height="15" fill="rgb(237,24,49)" fg:x="72" fg:w="1"/><text x="4.3224%" y="543.50"></text></g><g><title>store::io::uring::IO::add_pending_task (5 samples, 0.28%)</title><rect x="4.1290%" y="565" width="0.2828%" height="15" fill="rgb(251,39,46)" fg:x="73" fg:w="5"/><text x="4.3790%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (5 samples, 0.28%)</title><rect x="6.1652%" y="549" width="0.2828%" height="15" fill="rgb(251,220,3)" fg:x="109" fg:w="5"/><text x="6.4152%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.11%)</title><rect x="6.3348%" y="533" width="0.1131%" height="15" fill="rgb(228,105,12)" fg:x="112" fg:w="2"/><text x="6.5848%" y="543.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="6.3914%" y="517" width="0.0566%" height="15" fill="rgb(215,196,1)" fg:x="113" fg:w="1"/><text x="6.6414%" y="527.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="6.3914%" y="501" width="0.0566%" height="15" fill="rgb(214,33,39)" fg:x="113" fg:w="1"/><text x="6.6414%" y="511.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="6.3914%" y="485" width="0.0566%" height="15" fill="rgb(220,19,52)" fg:x="113" fg:w="1"/><text x="6.6414%" y="495.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="6.3914%" y="469" width="0.0566%" height="15" fill="rgb(221,78,38)" fg:x="113" fg:w="1"/><text x="6.6414%" y="479.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (13 samples, 0.74%)</title><rect x="6.4480%" y="549" width="0.7353%" height="15" fill="rgb(253,30,16)" fg:x="114" fg:w="13"/><text x="6.6980%" y="559.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (4 samples, 0.23%)</title><rect x="7.1833%" y="549" width="0.2262%" height="15" fill="rgb(242,65,0)" fg:x="127" fg:w="4"/><text x="7.4333%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (3 samples, 0.17%)</title><rect x="7.2398%" y="533" width="0.1697%" height="15" fill="rgb(235,201,12)" fg:x="128" fg:w="3"/><text x="7.4898%" y="543.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.17%)</title><rect x="7.2398%" y="517" width="0.1697%" height="15" fill="rgb(233,161,9)" fg:x="128" fg:w="3"/><text x="7.4898%" y="527.50"></text></g><g><title>malloc (6 samples, 0.34%)</title><rect x="7.4095%" y="549" width="0.3394%" height="15" fill="rgb(241,207,41)" fg:x="131" fg:w="6"/><text x="7.6595%" y="559.50"></text></g><g><title>imalloc_fastpath (6 samples, 0.34%)</title><rect x="7.4095%" y="533" width="0.3394%" height="15" fill="rgb(212,69,46)" fg:x="131" fg:w="6"/><text x="7.6595%" y="543.50"></text></g><g><title>cache_bin_alloc_easy (6 samples, 0.34%)</title><rect x="7.4095%" y="517" width="0.3394%" height="15" fill="rgb(239,69,45)" fg:x="131" fg:w="6"/><text x="7.6595%" y="527.50"></text></g><g><title>cache_bin_alloc_impl (6 samples, 0.34%)</title><rect x="7.4095%" y="501" width="0.3394%" height="15" fill="rgb(242,117,48)" fg:x="131" fg:w="6"/><text x="7.6595%" y="511.50"></text></g><g><title>sdallocx (1 samples, 0.06%)</title><rect x="7.7489%" y="549" width="0.0566%" height="15" fill="rgb(228,41,36)" fg:x="137" fg:w="1"/><text x="7.9989%" y="559.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::remaining (2 samples, 0.11%)</title><rect x="7.8054%" y="549" width="0.1131%" height="15" fill="rgb(212,3,32)" fg:x="138" fg:w="2"/><text x="8.0554%" y="559.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="7.9751%" y="533" width="0.0566%" height="15" fill="rgb(233,41,49)" fg:x="141" fg:w="1"/><text x="8.2251%" y="543.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="7.9751%" y="517" width="0.0566%" height="15" fill="rgb(252,170,49)" fg:x="141" fg:w="1"/><text x="8.2251%" y="527.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="7.9751%" y="501" width="0.0566%" height="15" fill="rgb(229,53,26)" fg:x="141" fg:w="1"/><text x="8.2251%" y="511.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="7.9751%" y="485" width="0.0566%" height="15" fill="rgb(217,157,12)" fg:x="141" fg:w="1"/><text x="8.2251%" y="495.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.06%)</title><rect x="8.2579%" y="261" width="0.0566%" height="15" fill="rgb(227,17,9)" fg:x="146" fg:w="1"/><text x="8.5079%" y="271.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="8.2579%" y="245" width="0.0566%" height="15" fill="rgb(218,84,12)" fg:x="146" fg:w="1"/><text x="8.5079%" y="255.50"></text></g><g><title>extent_recycle_extract (1 samples, 0.06%)</title><rect x="8.2579%" y="229" width="0.0566%" height="15" fill="rgb(212,79,24)" fg:x="146" fg:w="1"/><text x="8.5079%" y="239.50"></text></g><g><title>_rjem_je_eset_fit (1 samples, 0.06%)</title><rect x="8.2579%" y="213" width="0.0566%" height="15" fill="rgb(217,222,37)" fg:x="146" fg:w="1"/><text x="8.5079%" y="223.50"></text></g><g><title>eset_first_fit (1 samples, 0.06%)</title><rect x="8.2579%" y="197" width="0.0566%" height="15" fill="rgb(246,208,8)" fg:x="146" fg:w="1"/><text x="8.5079%" y="207.50"></text></g><g><title>_rjem_je_sz_psz_quantize_ceil (1 samples, 0.06%)</title><rect x="8.2579%" y="181" width="0.0566%" height="15" fill="rgb(244,133,10)" fg:x="146" fg:w="1"/><text x="8.5079%" y="191.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::reserve_to (8 samples, 0.45%)</title><rect x="7.9186%" y="549" width="0.4525%" height="15" fill="rgb(209,219,41)" fg:x="140" fg:w="8"/><text x="8.1686%" y="559.50"></text></g><g><title>store::io::buf::aligned_buf::AlignedBuf::new (6 samples, 0.34%)</title><rect x="8.0317%" y="533" width="0.3394%" height="15" fill="rgb(253,175,45)" fg:x="142" fg:w="6"/><text x="8.2817%" y="543.50"></text></g><g><title>mallocx (5 samples, 0.28%)</title><rect x="8.0882%" y="517" width="0.2828%" height="15" fill="rgb(235,100,37)" fg:x="143" fg:w="5"/><text x="8.3382%" y="527.50"></text></g><g><title>imalloc (5 samples, 0.28%)</title><rect x="8.0882%" y="501" width="0.2828%" height="15" fill="rgb(225,87,19)" fg:x="143" fg:w="5"/><text x="8.3382%" y="511.50"></text></g><g><title>imalloc_body (5 samples, 0.28%)</title><rect x="8.0882%" y="485" width="0.2828%" height="15" fill="rgb(217,152,17)" fg:x="143" fg:w="5"/><text x="8.3382%" y="495.50"></text></g><g><title>imalloc_no_sample (5 samples, 0.28%)</title><rect x="8.0882%" y="469" width="0.2828%" height="15" fill="rgb(235,72,13)" fg:x="143" fg:w="5"/><text x="8.3382%" y="479.50"></text></g><g><title>ipalloct (5 samples, 0.28%)</title><rect x="8.0882%" y="453" width="0.2828%" height="15" fill="rgb(233,140,18)" fg:x="143" fg:w="5"/><text x="8.3382%" y="463.50"></text></g><g><title>ipallocztm (5 samples, 0.28%)</title><rect x="8.0882%" y="437" width="0.2828%" height="15" fill="rgb(207,212,28)" fg:x="143" fg:w="5"/><text x="8.3382%" y="447.50"></text></g><g><title>_rjem_je_arena_palloc (5 samples, 0.28%)</title><rect x="8.0882%" y="421" width="0.2828%" height="15" fill="rgb(220,130,25)" fg:x="143" fg:w="5"/><text x="8.3382%" y="431.50"></text></g><g><title>arena_malloc (5 samples, 0.28%)</title><rect x="8.0882%" y="405" width="0.2828%" height="15" fill="rgb(205,55,34)" fg:x="143" fg:w="5"/><text x="8.3382%" y="415.50"></text></g><g><title>tcache_alloc_small (5 samples, 0.28%)</title><rect x="8.0882%" y="389" width="0.2828%" height="15" fill="rgb(237,54,35)" fg:x="143" fg:w="5"/><text x="8.3382%" y="399.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (2 samples, 0.11%)</title><rect x="8.2579%" y="373" width="0.1131%" height="15" fill="rgb(208,67,23)" fg:x="146" fg:w="2"/><text x="8.5079%" y="383.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (2 samples, 0.11%)</title><rect x="8.2579%" y="357" width="0.1131%" height="15" fill="rgb(206,207,50)" fg:x="146" fg:w="2"/><text x="8.5079%" y="367.50"></text></g><g><title>arena_slab_alloc (2 samples, 0.11%)</title><rect x="8.2579%" y="341" width="0.1131%" height="15" fill="rgb(213,211,42)" fg:x="146" fg:w="2"/><text x="8.5079%" y="351.50"></text></g><g><title>_rjem_je_pa_alloc (2 samples, 0.11%)</title><rect x="8.2579%" y="325" width="0.1131%" height="15" fill="rgb(252,197,50)" fg:x="146" fg:w="2"/><text x="8.5079%" y="335.50"></text></g><g><title>pai_alloc (2 samples, 0.11%)</title><rect x="8.2579%" y="309" width="0.1131%" height="15" fill="rgb(251,211,41)" fg:x="146" fg:w="2"/><text x="8.5079%" y="319.50"></text></g><g><title>pac_alloc_impl (2 samples, 0.11%)</title><rect x="8.2579%" y="293" width="0.1131%" height="15" fill="rgb(229,211,5)" fg:x="146" fg:w="2"/><text x="8.5079%" y="303.50"></text></g><g><title>pac_alloc_real (2 samples, 0.11%)</title><rect x="8.2579%" y="277" width="0.1131%" height="15" fill="rgb(239,36,31)" fg:x="146" fg:w="2"/><text x="8.5079%" y="287.50"></text></g><g><title>_rjem_je_ecache_alloc_grow (1 samples, 0.06%)</title><rect x="8.3145%" y="261" width="0.0566%" height="15" fill="rgb(248,67,31)" fg:x="147" fg:w="1"/><text x="8.5645%" y="271.50"></text></g><g><title>extent_alloc_retained (1 samples, 0.06%)</title><rect x="8.3145%" y="245" width="0.0566%" height="15" fill="rgb(249,55,44)" fg:x="147" fg:w="1"/><text x="8.5645%" y="255.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="8.3145%" y="229" width="0.0566%" height="15" fill="rgb(216,82,12)" fg:x="147" fg:w="1"/><text x="8.5645%" y="239.50"></text></g><g><title>extent_recycle_split (1 samples, 0.06%)</title><rect x="8.3145%" y="213" width="0.0566%" height="15" fill="rgb(242,174,1)" fg:x="147" fg:w="1"/><text x="8.5645%" y="223.50"></text></g><g><title>extent_split_interior (1 samples, 0.06%)</title><rect x="8.3145%" y="197" width="0.0566%" height="15" fill="rgb(208,120,29)" fg:x="147" fg:w="1"/><text x="8.5645%" y="207.50"></text></g><g><title>extent_split_impl (1 samples, 0.06%)</title><rect x="8.3145%" y="181" width="0.0566%" height="15" fill="rgb(221,105,43)" fg:x="147" fg:w="1"/><text x="8.5645%" y="191.50"></text></g><g><title>ehooks_split (1 samples, 0.06%)</title><rect x="8.3145%" y="165" width="0.0566%" height="15" fill="rgb(234,124,22)" fg:x="147" fg:w="1"/><text x="8.5645%" y="175.50"></text></g><g><title>ehooks_post_reentrancy (1 samples, 0.06%)</title><rect x="8.3145%" y="149" width="0.0566%" height="15" fill="rgb(212,23,30)" fg:x="147" fg:w="1"/><text x="8.5645%" y="159.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::write (9 samples, 0.51%)</title><rect x="8.3710%" y="549" width="0.5090%" height="15" fill="rgb(219,122,53)" fg:x="148" fg:w="9"/><text x="8.6210%" y="559.50"></text></g><g><title>store::io::buf::aligned_buf_writer::AlignedBufWriter::swap (2 samples, 0.11%)</title><rect x="8.7670%" y="533" width="0.1131%" height="15" fill="rgb(248,84,24)" fg:x="155" fg:w="2"/><text x="9.0170%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="9.6719%" y="533" width="0.0566%" height="15" fill="rgb(245,115,18)" fg:x="171" fg:w="1"/><text x="9.9219%" y="543.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="9.6719%" y="517" width="0.0566%" height="15" fill="rgb(227,176,51)" fg:x="171" fg:w="1"/><text x="9.9219%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::map_while::MapWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="9.7285%" y="533" width="0.0566%" height="15" fill="rgb(229,63,42)" fg:x="172" fg:w="1"/><text x="9.9785%" y="543.50"></text></g><g><title>store::io::uring::try_reclaim_from_wal (17 samples, 0.96%)</title><rect x="8.8801%" y="549" width="0.9615%" height="15" fill="rgb(247,202,24)" fg:x="157" fg:w="17"/><text x="9.1301%" y="559.50"></text></g><g><title>store::io::block_cache::Entry::score (1 samples, 0.06%)</title><rect x="9.7851%" y="533" width="0.0566%" height="15" fill="rgb(244,173,20)" fg:x="173" fg:w="1"/><text x="10.0351%" y="543.50"></text></g><g><title>store::io::uring::IO::build_sqe (101 samples, 5.71%)</title><rect x="4.4118%" y="565" width="5.7127%" height="15" fill="rgb(242,81,47)" fg:x="78" fg:w="101"/><text x="4.6618%" y="575.50">store::..</text></g><g><title>store::io::wal::Wal::segment_file_of (5 samples, 0.28%)</title><rect x="9.8416%" y="549" width="0.2828%" height="15" fill="rgb(231,185,54)" fg:x="174" fg:w="5"/><text x="10.0916%" y="559.50"></text></g><g><title>log4rs::encode::pattern::Chunk::encode (2 samples, 0.11%)</title><rect x="12.3869%" y="501" width="0.1131%" height="15" fill="rgb(243,55,32)" fg:x="219" fg:w="2"/><text x="12.6369%" y="511.50"></text></g><g><title>log4rs::encode::pattern::LeftAlignWriter&lt;W&gt;::finish (1 samples, 0.06%)</title><rect x="12.4434%" y="485" width="0.0566%" height="15" fill="rgb(208,167,19)" fg:x="220" fg:w="1"/><text x="12.6934%" y="495.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="12.4434%" y="469" width="0.0566%" height="15" fill="rgb(231,72,35)" fg:x="220" fg:w="1"/><text x="12.6934%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.06%)</title><rect x="12.4434%" y="453" width="0.0566%" height="15" fill="rgb(250,173,51)" fg:x="220" fg:w="1"/><text x="12.6934%" y="463.50"></text></g><g><title>core::fmt::Write::write_char (1 samples, 0.06%)</title><rect x="12.4434%" y="437" width="0.0566%" height="15" fill="rgb(209,5,22)" fg:x="220" fg:w="1"/><text x="12.6934%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_char.1051 (1 samples, 0.06%)</title><rect x="12.5000%" y="421" width="0.0566%" height="15" fill="rgb(250,174,19)" fg:x="221" fg:w="1"/><text x="12.7500%" y="431.50"></text></g><g><title>alloc::string::String::push.1052 (1 samples, 0.06%)</title><rect x="12.5000%" y="405" width="0.0566%" height="15" fill="rgb(217,3,49)" fg:x="221" fg:w="1"/><text x="12.7500%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="12.5000%" y="389" width="0.0566%" height="15" fill="rgb(218,225,5)" fg:x="221" fg:w="1"/><text x="12.7500%" y="399.50"></text></g><g><title>&lt;chrono::offset::fixed::FixedOffset as core::fmt::Debug&gt;::fmt (3 samples, 0.17%)</title><rect x="12.5000%" y="485" width="0.1697%" height="15" fill="rgb(236,89,11)" fg:x="221" fg:w="3"/><text x="12.7500%" y="495.50"></text></g><g><title>core::fmt::write (3 samples, 0.17%)</title><rect x="12.5000%" y="469" width="0.1697%" height="15" fill="rgb(206,33,28)" fg:x="221" fg:w="3"/><text x="12.7500%" y="479.50"></text></g><g><title>core::fmt::run (3 samples, 0.17%)</title><rect x="12.5000%" y="453" width="0.1697%" height="15" fill="rgb(241,56,42)" fg:x="221" fg:w="3"/><text x="12.7500%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (3 samples, 0.17%)</title><rect x="12.5000%" y="437" width="0.1697%" height="15" fill="rgb(222,44,11)" fg:x="221" fg:w="3"/><text x="12.7500%" y="447.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (2 samples, 0.11%)</title><rect x="12.5566%" y="421" width="0.1131%" height="15" fill="rgb(234,111,20)" fg:x="222" fg:w="2"/><text x="12.8066%" y="431.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.11%)</title><rect x="12.5566%" y="405" width="0.1131%" height="15" fill="rgb(237,77,6)" fg:x="222" fg:w="2"/><text x="12.8066%" y="415.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.11%)</title><rect x="12.5566%" y="389" width="0.1131%" height="15" fill="rgb(235,111,23)" fg:x="222" fg:w="2"/><text x="12.8066%" y="399.50"></text></g><g><title>core::fmt::Formatter::pad_integral::write_prefix (1 samples, 0.06%)</title><rect x="12.6131%" y="373" width="0.0566%" height="15" fill="rgb(251,135,29)" fg:x="223" fg:w="1"/><text x="12.8631%" y="383.50"></text></g><g><title>chrono::offset::utc::Utc::now (1 samples, 0.06%)</title><rect x="12.6697%" y="485" width="0.0566%" height="15" fill="rgb(217,57,1)" fg:x="224" fg:w="1"/><text x="12.9197%" y="495.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.06%)</title><rect x="12.6697%" y="469" width="0.0566%" height="15" fill="rgb(249,119,31)" fg:x="224" fg:w="1"/><text x="12.9197%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;T,A&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.06%)</title><rect x="12.7262%" y="437" width="0.0566%" height="15" fill="rgb(233,164,33)" fg:x="225" fg:w="1"/><text x="12.9762%" y="447.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.06%)</title><rect x="12.7828%" y="181" width="0.0566%" height="15" fill="rgb(250,217,43)" fg:x="226" fg:w="1"/><text x="13.0328%" y="191.50"></text></g><g><title>chrono::format::format_inner (2 samples, 0.11%)</title><rect x="12.7828%" y="421" width="0.1131%" height="15" fill="rgb(232,154,50)" fg:x="226" fg:w="2"/><text x="13.0328%" y="431.50"></text></g><g><title>core::fmt::write (2 samples, 0.11%)</title><rect x="12.7828%" y="405" width="0.1131%" height="15" fill="rgb(227,190,8)" fg:x="226" fg:w="2"/><text x="13.0328%" y="415.50"></text></g><g><title>core::fmt::run (2 samples, 0.11%)</title><rect x="12.7828%" y="389" width="0.1131%" height="15" fill="rgb(209,217,32)" fg:x="226" fg:w="2"/><text x="13.0328%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.11%)</title><rect x="12.7828%" y="373" width="0.1131%" height="15" fill="rgb(243,203,50)" fg:x="226" fg:w="2"/><text x="13.0328%" y="383.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i64&gt;::fmt (2 samples, 0.11%)</title><rect x="12.7828%" y="357" width="0.1131%" height="15" fill="rgb(232,152,27)" fg:x="226" fg:w="2"/><text x="13.0328%" y="367.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (2 samples, 0.11%)</title><rect x="12.7828%" y="341" width="0.1131%" height="15" fill="rgb(240,34,29)" fg:x="226" fg:w="2"/><text x="13.0328%" y="351.50"></text></g><g><title>core::fmt::Formatter::pad_integral (2 samples, 0.11%)</title><rect x="12.7828%" y="325" width="0.1131%" height="15" fill="rgb(215,185,52)" fg:x="226" fg:w="2"/><text x="13.0328%" y="335.50"></text></g><g><title>core::fmt::Formatter::padding (2 samples, 0.11%)</title><rect x="12.7828%" y="309" width="0.1131%" height="15" fill="rgb(240,89,49)" fg:x="226" fg:w="2"/><text x="13.0328%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_char (2 samples, 0.11%)</title><rect x="12.7828%" y="293" width="0.1131%" height="15" fill="rgb(225,12,52)" fg:x="226" fg:w="2"/><text x="13.0328%" y="303.50"></text></g><g><title>alloc::string::String::push.1052 (2 samples, 0.11%)</title><rect x="12.7828%" y="277" width="0.1131%" height="15" fill="rgb(239,128,45)" fg:x="226" fg:w="2"/><text x="13.0328%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.11%)</title><rect x="12.7828%" y="261" width="0.1131%" height="15" fill="rgb(211,78,47)" fg:x="226" fg:w="2"/><text x="13.0328%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.11%)</title><rect x="12.7828%" y="245" width="0.1131%" height="15" fill="rgb(232,31,21)" fg:x="226" fg:w="2"/><text x="13.0328%" y="255.50"></text></g><g><title>do_rallocx (2 samples, 0.11%)</title><rect x="12.7828%" y="229" width="0.1131%" height="15" fill="rgb(222,168,14)" fg:x="226" fg:w="2"/><text x="13.0328%" y="239.50"></text></g><g><title>iralloct (2 samples, 0.11%)</title><rect x="12.7828%" y="213" width="0.1131%" height="15" fill="rgb(209,128,24)" fg:x="226" fg:w="2"/><text x="13.0328%" y="223.50"></text></g><g><title>_rjem_je_arena_ralloc (2 samples, 0.11%)</title><rect x="12.7828%" y="197" width="0.1131%" height="15" fill="rgb(249,35,13)" fg:x="226" fg:w="2"/><text x="13.0328%" y="207.50"></text></g><g><title>isdalloct (1 samples, 0.06%)</title><rect x="12.8394%" y="181" width="0.0566%" height="15" fill="rgb(218,7,2)" fg:x="227" fg:w="1"/><text x="13.0894%" y="191.50"></text></g><g><title>arena_sdalloc (1 samples, 0.06%)</title><rect x="12.8394%" y="165" width="0.0566%" height="15" fill="rgb(238,107,27)" fg:x="227" fg:w="1"/><text x="13.0894%" y="175.50"></text></g><g><title>arena_dalloc_large (1 samples, 0.06%)</title><rect x="12.8394%" y="149" width="0.0566%" height="15" fill="rgb(217,88,38)" fg:x="227" fg:w="1"/><text x="13.0894%" y="159.50"></text></g><g><title>tcache_dalloc_large (1 samples, 0.06%)</title><rect x="12.8394%" y="133" width="0.0566%" height="15" fill="rgb(230,207,0)" fg:x="227" fg:w="1"/><text x="13.0894%" y="143.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.06%)</title><rect x="12.8394%" y="117" width="0.0566%" height="15" fill="rgb(249,64,54)" fg:x="227" fg:w="1"/><text x="13.0894%" y="127.50"></text></g><g><title>&lt;log4rs::append::rolling_file::RollingFileAppender as log4rs::append::Append&gt;::append (10 samples, 0.57%)</title><rect x="12.3869%" y="533" width="0.5656%" height="15" fill="rgb(231,7,11)" fg:x="219" fg:w="10"/><text x="12.6369%" y="543.50"></text></g><g><title>&lt;log4rs::encode::pattern::PatternEncoder as log4rs::encode::Encode&gt;::encode (10 samples, 0.57%)</title><rect x="12.3869%" y="517" width="0.5656%" height="15" fill="rgb(205,149,21)" fg:x="219" fg:w="10"/><text x="12.6369%" y="527.50"></text></g><g><title>log4rs::encode::pattern::FormattedChunk::encode (8 samples, 0.45%)</title><rect x="12.5000%" y="501" width="0.4525%" height="15" fill="rgb(215,126,34)" fg:x="221" fg:w="8"/><text x="12.7500%" y="511.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.23%)</title><rect x="12.7262%" y="485" width="0.2262%" height="15" fill="rgb(241,132,45)" fg:x="225" fg:w="4"/><text x="12.9762%" y="495.50"></text></g><g><title>core::fmt::write (4 samples, 0.23%)</title><rect x="12.7262%" y="469" width="0.2262%" height="15" fill="rgb(252,69,32)" fg:x="225" fg:w="4"/><text x="12.9762%" y="479.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.23%)</title><rect x="12.7262%" y="453" width="0.2262%" height="15" fill="rgb(232,204,19)" fg:x="225" fg:w="4"/><text x="12.9762%" y="463.50"></text></g><g><title>&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (3 samples, 0.17%)</title><rect x="12.7828%" y="437" width="0.1697%" height="15" fill="rgb(249,15,47)" fg:x="226" fg:w="3"/><text x="13.0328%" y="447.50"></text></g><g><title>core::fmt::Formatter::pad (1 samples, 0.06%)</title><rect x="12.8959%" y="421" width="0.0566%" height="15" fill="rgb(209,227,23)" fg:x="228" fg:w="1"/><text x="13.1459%" y="431.50"></text></g><g><title>&lt;log4rs::Logger as log::Log&gt;::log (12 samples, 0.68%)</title><rect x="12.3869%" y="549" width="0.6787%" height="15" fill="rgb(248,92,24)" fg:x="219" fg:w="12"/><text x="12.6369%" y="559.50"></text></g><g><title>log4rs::ConfiguredLogger::find (2 samples, 0.11%)</title><rect x="12.9525%" y="533" width="0.1131%" height="15" fill="rgb(247,59,2)" fg:x="229" fg:w="2"/><text x="13.2025%" y="543.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.06%)</title><rect x="13.0090%" y="517" width="0.0566%" height="15" fill="rgb(221,30,5)" fg:x="230" fg:w="1"/><text x="13.2590%" y="527.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.06%)</title><rect x="13.0090%" y="501" width="0.0566%" height="15" fill="rgb(208,108,53)" fg:x="230" fg:w="1"/><text x="13.2590%" y="511.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::reverse_maximal_suffix (1 samples, 0.06%)</title><rect x="13.0090%" y="485" width="0.0566%" height="15" fill="rgb(211,183,26)" fg:x="230" fg:w="1"/><text x="13.2590%" y="495.50"></text></g><g><title>&lt;observation::metrics::uring_metrics::COMPLETED_WRITE_IO as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="13.0656%" y="549" width="0.0566%" height="15" fill="rgb(232,132,4)" fg:x="231" fg:w="1"/><text x="13.3156%" y="559.50"></text></g><g><title>&lt;observation::metrics::uring_metrics::INFLIGHT_IO as core::ops::deref::Deref&gt;::deref (2 samples, 0.11%)</title><rect x="13.1222%" y="549" width="0.1131%" height="15" fill="rgb(253,128,37)" fg:x="232" fg:w="2"/><text x="13.3722%" y="559.50"></text></g><g><title>__floattidf (2 samples, 0.11%)</title><rect x="13.2353%" y="549" width="0.1131%" height="15" fill="rgb(221,58,24)" fg:x="234" fg:w="2"/><text x="13.4853%" y="559.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (2 samples, 0.11%)</title><rect x="13.2353%" y="533" width="0.1131%" height="15" fill="rgb(230,54,45)" fg:x="234" fg:w="2"/><text x="13.4853%" y="543.50"></text></g><g><title>core::num::&lt;impl i128&gt;::unsigned_abs (2 samples, 0.11%)</title><rect x="13.2353%" y="517" width="0.1131%" height="15" fill="rgb(254,21,18)" fg:x="234" fg:w="2"/><text x="13.4853%" y="527.50"></text></g><g><title>core::num::&lt;impl i128&gt;::wrapping_abs (2 samples, 0.11%)</title><rect x="13.2353%" y="501" width="0.1131%" height="15" fill="rgb(221,108,0)" fg:x="234" fg:w="2"/><text x="13.4853%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.17%)</title><rect x="13.3484%" y="549" width="0.1697%" height="15" fill="rgb(206,95,1)" fg:x="236" fg:w="3"/><text x="13.5984%" y="559.50"></text></g><g><title>_rjem_je_arena_slab_dalloc (1 samples, 0.06%)</title><rect x="13.5181%" y="405" width="0.0566%" height="15" fill="rgb(237,52,5)" fg:x="239" fg:w="1"/><text x="13.7681%" y="415.50"></text></g><g><title>pac_dalloc_impl (1 samples, 0.06%)</title><rect x="13.5181%" y="389" width="0.0566%" height="15" fill="rgb(218,150,34)" fg:x="239" fg:w="1"/><text x="13.7681%" y="399.50"></text></g><g><title>_rjem_je_extent_record (1 samples, 0.06%)</title><rect x="13.5181%" y="373" width="0.0566%" height="15" fill="rgb(235,194,28)" fg:x="239" fg:w="1"/><text x="13.7681%" y="383.50"></text></g><g><title>extent_deactivate_locked (1 samples, 0.06%)</title><rect x="13.5181%" y="357" width="0.0566%" height="15" fill="rgb(245,92,18)" fg:x="239" fg:w="1"/><text x="13.7681%" y="367.50"></text></g><g><title>extent_deactivate_locked_impl (1 samples, 0.06%)</title><rect x="13.5181%" y="341" width="0.0566%" height="15" fill="rgb(253,203,53)" fg:x="239" fg:w="1"/><text x="13.7681%" y="351.50"></text></g><g><title>_rjem_je_eset_insert (1 samples, 0.06%)</title><rect x="13.5181%" y="325" width="0.0566%" height="15" fill="rgb(249,185,47)" fg:x="239" fg:w="1"/><text x="13.7681%" y="335.50"></text></g><g><title>_rjem_je_stats_postfork_child (1 samples, 0.06%)</title><rect x="13.5181%" y="309" width="0.0566%" height="15" fill="rgb(252,194,52)" fg:x="239" fg:w="1"/><text x="13.7681%" y="319.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (3 samples, 0.17%)</title><rect x="13.5181%" y="453" width="0.1697%" height="15" fill="rgb(210,53,36)" fg:x="239" fg:w="3"/><text x="13.7681%" y="463.50"></text></g><g><title>tcache_bin_flush_bottom (3 samples, 0.17%)</title><rect x="13.5181%" y="437" width="0.1697%" height="15" fill="rgb(237,37,25)" fg:x="239" fg:w="3"/><text x="13.7681%" y="447.50"></text></g><g><title>tcache_bin_flush_impl (3 samples, 0.17%)</title><rect x="13.5181%" y="421" width="0.1697%" height="15" fill="rgb(242,116,27)" fg:x="239" fg:w="3"/><text x="13.7681%" y="431.50"></text></g><g><title>arena_dalloc_bin_locked_step (2 samples, 0.11%)</title><rect x="13.5747%" y="405" width="0.1131%" height="15" fill="rgb(213,185,26)" fg:x="240" fg:w="2"/><text x="13.8247%" y="415.50"></text></g><g><title>arena_bin_lower_slab (1 samples, 0.06%)</title><rect x="13.6312%" y="389" width="0.0566%" height="15" fill="rgb(225,204,8)" fg:x="241" fg:w="1"/><text x="13.8812%" y="399.50"></text></g><g><title>arena_bin_slabs_nonfull_insert (1 samples, 0.06%)</title><rect x="13.6312%" y="373" width="0.0566%" height="15" fill="rgb(254,111,37)" fg:x="241" fg:w="1"/><text x="13.8812%" y="383.50"></text></g><g><title>_rjem_je_edata_heap_insert (1 samples, 0.06%)</title><rect x="13.6312%" y="357" width="0.0566%" height="15" fill="rgb(242,35,9)" fg:x="241" fg:w="1"/><text x="13.8812%" y="367.50"></text></g><g><title>_rjem_je_sdallocx_default (4 samples, 0.23%)</title><rect x="13.5181%" y="533" width="0.2262%" height="15" fill="rgb(232,138,49)" fg:x="239" fg:w="4"/><text x="13.7681%" y="543.50"></text></g><g><title>isfree (4 samples, 0.23%)</title><rect x="13.5181%" y="517" width="0.2262%" height="15" fill="rgb(247,56,4)" fg:x="239" fg:w="4"/><text x="13.7681%" y="527.50"></text></g><g><title>isdalloct (4 samples, 0.23%)</title><rect x="13.5181%" y="501" width="0.2262%" height="15" fill="rgb(226,179,17)" fg:x="239" fg:w="4"/><text x="13.7681%" y="511.50"></text></g><g><title>arena_sdalloc (4 samples, 0.23%)</title><rect x="13.5181%" y="485" width="0.2262%" height="15" fill="rgb(216,163,45)" fg:x="239" fg:w="4"/><text x="13.7681%" y="495.50"></text></g><g><title>tcache_dalloc_small (4 samples, 0.23%)</title><rect x="13.5181%" y="469" width="0.2262%" height="15" fill="rgb(211,157,3)" fg:x="239" fg:w="4"/><text x="13.7681%" y="479.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.06%)</title><rect x="13.6878%" y="453" width="0.0566%" height="15" fill="rgb(234,44,20)" fg:x="242" fg:w="1"/><text x="13.9378%" y="463.50"></text></g><g><title>cache_bin_full (1 samples, 0.06%)</title><rect x="13.6878%" y="437" width="0.0566%" height="15" fill="rgb(254,138,23)" fg:x="242" fg:w="1"/><text x="13.9378%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (9 samples, 0.51%)</title><rect x="13.5181%" y="549" width="0.5090%" height="15" fill="rgb(206,119,39)" fg:x="239" fg:w="9"/><text x="13.7681%" y="559.50"></text></g><g><title>tokio::runtime::task::raw::dealloc (5 samples, 0.28%)</title><rect x="13.7443%" y="533" width="0.2828%" height="15" fill="rgb(231,105,52)" fg:x="243" fg:w="5"/><text x="13.9943%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::task::core::Stage&lt;range_server::session::Session&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;::process0::{{closure}}::{{closure}}::{{closure}}&gt;&gt; (1 samples, 0.06%)</title><rect x="13.9706%" y="517" width="0.0566%" height="15" fill="rgb(250,20,5)" fg:x="247" fg:w="1"/><text x="14.2206%" y="527.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.06%)</title><rect x="14.0271%" y="549" width="0.0566%" height="15" fill="rgb(215,198,30)" fg:x="248" fg:w="1"/><text x="14.2771%" y="559.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.06%)</title><rect x="14.0271%" y="533" width="0.0566%" height="15" fill="rgb(246,142,8)" fg:x="248" fg:w="1"/><text x="14.2771%" y="543.50"></text></g><g><title>isfree (1 samples, 0.06%)</title><rect x="14.0271%" y="517" width="0.0566%" height="15" fill="rgb(243,26,38)" fg:x="248" fg:w="1"/><text x="14.2771%" y="527.50"></text></g><g><title>isdalloct (1 samples, 0.06%)</title><rect x="14.0271%" y="501" width="0.0566%" height="15" fill="rgb(205,133,28)" fg:x="248" fg:w="1"/><text x="14.2771%" y="511.50"></text></g><g><title>arena_sdalloc (1 samples, 0.06%)</title><rect x="14.0271%" y="485" width="0.0566%" height="15" fill="rgb(212,34,0)" fg:x="248" fg:w="1"/><text x="14.2771%" y="495.50"></text></g><g><title>tcache_dalloc_small (1 samples, 0.06%)</title><rect x="14.0271%" y="469" width="0.0566%" height="15" fill="rgb(251,226,22)" fg:x="248" fg:w="1"/><text x="14.2771%" y="479.50"></text></g><g><title>_rjem_je_tcache_bin_flush_small (1 samples, 0.06%)</title><rect x="14.0271%" y="453" width="0.0566%" height="15" fill="rgb(252,119,9)" fg:x="248" fg:w="1"/><text x="14.2771%" y="463.50"></text></g><g><title>tcache_bin_flush_bottom (1 samples, 0.06%)</title><rect x="14.0271%" y="437" width="0.0566%" height="15" fill="rgb(213,150,50)" fg:x="248" fg:w="1"/><text x="14.2771%" y="447.50"></text></g><g><title>tcache_bin_flush_impl (1 samples, 0.06%)</title><rect x="14.0271%" y="421" width="0.0566%" height="15" fill="rgb(212,24,39)" fg:x="248" fg:w="1"/><text x="14.2771%" y="431.50"></text></g><g><title>tcache_bin_flush_edatas_lookup (1 samples, 0.06%)</title><rect x="14.0271%" y="405" width="0.0566%" height="15" fill="rgb(213,46,39)" fg:x="248" fg:w="1"/><text x="14.2771%" y="415.50"></text></g><g><title>emap_edata_lookup_batch (1 samples, 0.06%)</title><rect x="14.0271%" y="389" width="0.0566%" height="15" fill="rgb(239,106,12)" fg:x="248" fg:w="1"/><text x="14.2771%" y="399.50"></text></g><g><title>core::hash::BuildHasher::hash_one (5 samples, 0.28%)</title><rect x="14.0837%" y="549" width="0.2828%" height="15" fill="rgb(249,229,21)" fg:x="249" fg:w="5"/><text x="14.3337%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.23%)</title><rect x="14.1403%" y="533" width="0.2262%" height="15" fill="rgb(212,158,3)" fg:x="250" fg:w="4"/><text x="14.3903%" y="543.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (12 samples, 0.68%)</title><rect x="14.3665%" y="549" width="0.6787%" height="15" fill="rgb(253,26,48)" fg:x="254" fg:w="12"/><text x="14.6165%" y="559.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify.3940 (4 samples, 0.23%)</title><rect x="14.8190%" y="533" width="0.2262%" height="15" fill="rgb(238,178,20)" fg:x="262" fg:w="4"/><text x="15.0690%" y="543.50"></text></g><g><title>expf32x (12 samples, 0.68%)</title><rect x="15.0452%" y="549" width="0.6787%" height="15" fill="rgb(208,86,15)" fg:x="266" fg:w="12"/><text x="15.2952%" y="559.50"></text></g><g><title>sdallocx (2 samples, 0.11%)</title><rect x="15.7240%" y="549" width="0.1131%" height="15" fill="rgb(239,42,53)" fg:x="278" fg:w="2"/><text x="15.9740%" y="559.50"></text></g><g><title>free_fastpath (2 samples, 0.11%)</title><rect x="15.7240%" y="533" width="0.1131%" height="15" fill="rgb(245,226,8)" fg:x="278" fg:w="2"/><text x="15.9740%" y="543.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.06%)</title><rect x="15.8371%" y="549" width="0.0566%" height="15" fill="rgb(216,176,32)" fg:x="280" fg:w="1"/><text x="16.0871%" y="559.50"></text></g><g><title>core::time::Duration::new (1 samples, 0.06%)</title><rect x="15.8371%" y="533" width="0.0566%" height="15" fill="rgb(231,186,21)" fg:x="280" fg:w="1"/><text x="16.0871%" y="543.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.06%)</title><rect x="15.8937%" y="549" width="0.0566%" height="15" fill="rgb(205,95,49)" fg:x="281" fg:w="1"/><text x="16.1437%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (4 samples, 0.23%)</title><rect x="16.4027%" y="533" width="0.2262%" height="15" fill="rgb(217,145,8)" fg:x="290" fg:w="4"/><text x="16.6527%" y="543.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="16.5724%" y="517" width="0.0566%" height="15" fill="rgb(239,144,48)" fg:x="293" fg:w="1"/><text x="16.8224%" y="527.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="16.5724%" y="501" width="0.0566%" height="15" fill="rgb(214,189,23)" fg:x="293" fg:w="1"/><text x="16.8224%" y="511.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="16.5724%" y="485" width="0.0566%" height="15" fill="rgb(229,157,17)" fg:x="293" fg:w="1"/><text x="16.8224%" y="495.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="16.5724%" y="469" width="0.0566%" height="15" fill="rgb(230,5,48)" fg:x="293" fg:w="1"/><text x="16.8224%" y="479.50"></text></g><g><title>store::io::block_cache::BlockCache::add_entry (15 samples, 0.85%)</title><rect x="15.9502%" y="549" width="0.8484%" height="15" fill="rgb(224,156,48)" fg:x="282" fg:w="15"/><text x="16.2002%" y="559.50"></text></g><g><title>malloc (3 samples, 0.17%)</title><rect x="16.6290%" y="533" width="0.1697%" height="15" fill="rgb(223,14,29)" fg:x="294" fg:w="3"/><text x="16.8790%" y="543.50"></text></g><g><title>imalloc_fastpath (3 samples, 0.17%)</title><rect x="16.6290%" y="517" width="0.1697%" height="15" fill="rgb(229,96,36)" fg:x="294" fg:w="3"/><text x="16.8790%" y="527.50"></text></g><g><title>cache_bin_alloc_easy (3 samples, 0.17%)</title><rect x="16.6290%" y="501" width="0.1697%" height="15" fill="rgb(231,102,53)" fg:x="294" fg:w="3"/><text x="16.8790%" y="511.50"></text></g><g><title>cache_bin_alloc_impl (3 samples, 0.17%)</title><rect x="16.6290%" y="485" width="0.1697%" height="15" fill="rgb(210,77,38)" fg:x="294" fg:w="3"/><text x="16.8790%" y="495.50"></text></g><g><title>store::io::uring::try_reclaim_from_wal (10 samples, 0.57%)</title><rect x="16.7986%" y="549" width="0.5656%" height="15" fill="rgb(235,131,6)" fg:x="297" fg:w="10"/><text x="17.0486%" y="559.50"></text></g><g><title>store::io::wal::Wal::segment_file_of (3 samples, 0.17%)</title><rect x="17.3643%" y="549" width="0.1697%" height="15" fill="rgb(252,55,38)" fg:x="307" fg:w="3"/><text x="17.6143%" y="559.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (2 samples, 0.11%)</title><rect x="17.6471%" y="533" width="0.1131%" height="15" fill="rgb(246,38,14)" fg:x="312" fg:w="2"/><text x="17.8971%" y="543.50"></text></g><g><title>IO (321 samples, 18.16%)</title><rect x="0.0000%" y="677" width="18.1561%" height="15" fill="rgb(242,27,5)" fg:x="0" fg:w="321"/><text x="0.2500%" y="687.50">IO</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (321 samples, 18.16%)</title><rect x="0.0000%" y="661" width="18.1561%" height="15" fill="rgb(228,65,35)" fg:x="0" fg:w="321"/><text x="0.2500%" y="671.50">std::sys::unix::thread::Thre..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (321 samples, 18.16%)</title><rect x="0.0000%" y="645" width="18.1561%" height="15" fill="rgb(245,93,11)" fg:x="0" fg:w="321"/><text x="0.2500%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (321 samples, 18.16%)</title><rect x="0.0000%" y="629" width="18.1561%" height="15" fill="rgb(213,1,31)" fg:x="0" fg:w="321"/><text x="0.2500%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as c..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (321 samples, 18.16%)</title><rect x="0.0000%" y="613" width="18.1561%" height="15" fill="rgb(237,205,14)" fg:x="0" fg:w="321"/><text x="0.2500%" y="623.50">core::ops::function::FnOnce:..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (321 samples, 18.16%)</title><rect x="0.0000%" y="597" width="18.1561%" height="15" fill="rgb(232,118,45)" fg:x="0" fg:w="321"/><text x="0.2500%" y="607.50">std::sys_common::backtrace::..</text></g><g><title>store::io::uring::IO::run (321 samples, 18.16%)</title><rect x="0.0000%" y="581" width="18.1561%" height="15" fill="rgb(218,5,6)" fg:x="0" fg:w="321"/><text x="0.2500%" y="591.50">store::io::uring::IO::run</text></g><g><title>store::io::uring::IO::reap_data_tasks (142 samples, 8.03%)</title><rect x="10.1244%" y="565" width="8.0317%" height="15" fill="rgb(251,87,51)" fg:x="179" fg:w="142"/><text x="10.3744%" y="575.50">store::io::..</text></g><g><title>tokio::sync::oneshot::Sender&lt;T&gt;::send (11 samples, 0.62%)</title><rect x="17.5339%" y="549" width="0.6222%" height="15" fill="rgb(207,225,20)" fg:x="310" fg:w="11"/><text x="17.7839%" y="559.50"></text></g><g><title>tokio::task::local::Shared::schedule (7 samples, 0.40%)</title><rect x="17.7602%" y="533" width="0.3959%" height="15" fill="rgb(222,78,54)" fg:x="314" fg:w="7"/><text x="18.0102%" y="543.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.11%)</title><rect x="18.0430%" y="517" width="0.1131%" height="15" fill="rgb(232,85,16)" fg:x="319" fg:w="2"/><text x="18.2930%" y="527.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (2 samples, 0.11%)</title><rect x="18.0430%" y="501" width="0.1131%" height="15" fill="rgb(244,25,33)" fg:x="319" fg:w="2"/><text x="18.2930%" y="511.50"></text></g><g><title>&lt;bytes::bytes_mut::BytesMut as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="19.9661%" y="581" width="0.0566%" height="15" fill="rgb(233,24,36)" fg:x="353" fg:w="1"/><text x="20.2161%" y="591.50"></text></g><g><title>&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as crossbeam_channel::select::SelectHandle&gt;::is_ready (6 samples, 0.34%)</title><rect x="20.0226%" y="581" width="0.3394%" height="15" fill="rgb(253,49,54)" fg:x="354" fg:w="6"/><text x="20.2726%" y="591.50"></text></g><g><title>&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as crossbeam_channel::select::SelectHandle&gt;::unwatch (1 samples, 0.06%)</title><rect x="20.9276%" y="565" width="0.0566%" height="15" fill="rgb(245,12,22)" fg:x="370" fg:w="1"/><text x="21.1776%" y="575.50"></text></g><g><title>&lt;crossbeam_channel::channel::Receiver&lt;T&gt; as crossbeam_channel::select::SelectHandle&gt;::watch (5 samples, 0.28%)</title><rect x="20.9842%" y="565" width="0.2828%" height="15" fill="rgb(253,141,28)" fg:x="371" fg:w="5"/><text x="21.2342%" y="575.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::watch (4 samples, 0.23%)</title><rect x="21.0407%" y="549" width="0.2262%" height="15" fill="rgb(225,207,27)" fg:x="372" fg:w="4"/><text x="21.2907%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::retain (1 samples, 0.06%)</title><rect x="21.4367%" y="549" width="0.0566%" height="15" fill="rgb(220,84,2)" fg:x="379" fg:w="1"/><text x="21.6867%" y="559.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::unwatch (8 samples, 0.45%)</title><rect x="21.2670%" y="565" width="0.4525%" height="15" fill="rgb(224,37,37)" fg:x="376" fg:w="8"/><text x="21.5170%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (4 samples, 0.23%)</title><rect x="21.4932%" y="549" width="0.2262%" height="15" fill="rgb(220,143,18)" fg:x="380" fg:w="4"/><text x="21.7432%" y="559.50"></text></g><g><title>std::sys::unix::futex::futex_wait (4 samples, 0.23%)</title><rect x="21.4932%" y="533" width="0.2262%" height="15" fill="rgb(210,88,33)" fg:x="380" fg:w="4"/><text x="21.7432%" y="543.50"></text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (29 samples, 1.64%)</title><rect x="20.3620%" y="581" width="1.6403%" height="15" fill="rgb(219,87,51)" fg:x="360" fg:w="29"/><text x="20.6120%" y="591.50"></text></g><g><title>std::thread::park (5 samples, 0.28%)</title><rect x="21.7195%" y="565" width="0.2828%" height="15" fill="rgb(211,7,35)" fg:x="384" fg:w="5"/><text x="21.9695%" y="575.50"></text></g><g><title>std::thread::current (5 samples, 0.28%)</title><rect x="21.7195%" y="549" width="0.2828%" height="15" fill="rgb(232,77,2)" fg:x="384" fg:w="5"/><text x="21.9695%" y="559.50"></text></g><g><title>std::sys_common::thread_info::current_thread (1 samples, 0.06%)</title><rect x="21.9457%" y="533" width="0.0566%" height="15" fill="rgb(249,94,25)" fg:x="388" fg:w="1"/><text x="22.1957%" y="543.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with (1 samples, 0.06%)</title><rect x="21.9457%" y="517" width="0.0566%" height="15" fill="rgb(215,112,2)" fg:x="388" fg:w="1"/><text x="22.1957%" y="527.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (1 samples, 0.06%)</title><rect x="21.9457%" y="501" width="0.0566%" height="15" fill="rgb(226,115,48)" fg:x="388" fg:w="1"/><text x="22.1957%" y="511.50"></text></g><g><title>std::sys_common::thread_info::ThreadInfo::with::{{closure}} (1 samples, 0.06%)</title><rect x="21.9457%" y="485" width="0.0566%" height="15" fill="rgb(249,196,10)" fg:x="388" fg:w="1"/><text x="22.1957%" y="495.50"></text></g><g><title>std::sys_common::thread_info::current_thread::{{closure}} (1 samples, 0.06%)</title><rect x="21.9457%" y="469" width="0.0566%" height="15" fill="rgb(237,109,14)" fg:x="388" fg:w="1"/><text x="22.1957%" y="479.50"></text></g><g><title>&lt;std::thread::Thread as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="21.9457%" y="453" width="0.0566%" height="15" fill="rgb(217,103,53)" fg:x="388" fg:w="1"/><text x="22.1957%" y="463.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="21.9457%" y="437" width="0.0566%" height="15" fill="rgb(244,137,9)" fg:x="388" fg:w="1"/><text x="22.1957%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="21.9457%" y="421" width="0.0566%" height="15" fill="rgb(227,201,3)" fg:x="388" fg:w="1"/><text x="22.1957%" y="431.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.06%)</title><rect x="21.9457%" y="405" width="0.0566%" height="15" fill="rgb(243,94,6)" fg:x="388" fg:w="1"/><text x="22.1957%" y="415.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.06%)</title><rect x="21.9457%" y="389" width="0.0566%" height="15" fill="rgb(235,118,5)" fg:x="388" fg:w="1"/><text x="22.1957%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (2 samples, 0.11%)</title><rect x="22.0023%" y="581" width="0.1131%" height="15" fill="rgb(247,10,30)" fg:x="389" fg:w="2"/><text x="22.2523%" y="591.50"></text></g><g><title>malloc (8 samples, 0.45%)</title><rect x="22.1154%" y="581" width="0.4525%" height="15" fill="rgb(205,26,28)" fg:x="391" fg:w="8"/><text x="22.3654%" y="591.50"></text></g><g><title>imalloc_fastpath (8 samples, 0.45%)</title><rect x="22.1154%" y="565" width="0.4525%" height="15" fill="rgb(206,99,35)" fg:x="391" fg:w="8"/><text x="22.3654%" y="575.50"></text></g><g><title>cache_bin_alloc_easy (8 samples, 0.45%)</title><rect x="22.1154%" y="549" width="0.4525%" height="15" fill="rgb(238,130,40)" fg:x="391" fg:w="8"/><text x="22.3654%" y="559.50"></text></g><g><title>cache_bin_alloc_impl (8 samples, 0.45%)</title><rect x="22.1154%" y="533" width="0.4525%" height="15" fill="rgb(224,126,31)" fg:x="391" fg:w="8"/><text x="22.3654%" y="543.50"></text></g><g><title>SaveError (4 samples, 0.23%)</title><rect x="22.8507%" y="565" width="0.2262%" height="15" fill="rgb(254,105,17)" fg:x="404" fg:w="4"/><text x="23.1007%" y="575.50"></text></g><g><title>__tls_get_addr (1 samples, 0.06%)</title><rect x="26.3575%" y="501" width="0.0566%" height="15" fill="rgb(216,87,36)" fg:x="466" fg:w="1"/><text x="26.6075%" y="511.50"></text></g><g><title>__tls_init (7 samples, 0.40%)</title><rect x="26.4140%" y="501" width="0.3959%" height="15" fill="rgb(240,21,12)" fg:x="467" fg:w="7"/><text x="26.6640%" y="511.50"></text></g><g><title>__tls_get_addr (3 samples, 0.17%)</title><rect x="26.6403%" y="485" width="0.1697%" height="15" fill="rgb(245,192,34)" fg:x="471" fg:w="3"/><text x="26.8903%" y="495.50"></text></g><g><title>rocksdb::(anonymous namespace)::PosixClock::NowMicros() (3 samples, 0.17%)</title><rect x="26.8100%" y="501" width="0.1697%" height="15" fill="rgb(226,100,49)" fg:x="474" fg:w="3"/><text x="27.0600%" y="511.50"></text></g><g><title>rocksdb::DBImpl::GetMaxTotalWalSize() const (2 samples, 0.11%)</title><rect x="27.9412%" y="485" width="0.1131%" height="15" fill="rgb(245,188,27)" fg:x="494" fg:w="2"/><text x="28.1912%" y="495.50"></text></g><g><title>rocksdb::InstrumentedMutex::Lock() (8 samples, 0.45%)</title><rect x="28.0543%" y="485" width="0.4525%" height="15" fill="rgb(212,170,8)" fg:x="496" fg:w="8"/><text x="28.3043%" y="495.50"></text></g><g><title>rocksdb::port::Mutex::Lock() (3 samples, 0.17%)</title><rect x="28.3371%" y="469" width="0.1697%" height="15" fill="rgb(217,113,29)" fg:x="501" fg:w="3"/><text x="28.5871%" y="479.50"></text></g><g><title>rocksdb::TrimHistoryScheduler::Empty() (2 samples, 0.11%)</title><rect x="28.5068%" y="485" width="0.1131%" height="15" fill="rgb(237,30,3)" fg:x="504" fg:w="2"/><text x="28.7568%" y="495.50"></text></g><g><title>rocksdb::WriteController::IsStopped() const (3 samples, 0.17%)</title><rect x="28.6199%" y="485" width="0.1697%" height="15" fill="rgb(227,19,28)" fg:x="506" fg:w="3"/><text x="28.8699%" y="495.50"></text></g><g><title>rocksdb::port::Mutex::Unlock() (1 samples, 0.06%)</title><rect x="28.7896%" y="485" width="0.0566%" height="15" fill="rgb(239,172,45)" fg:x="509" fg:w="1"/><text x="29.0396%" y="495.50"></text></g><g><title>rocksdb::DBImpl::PreprocessWrite(rocksdb::WriteOptions const&amp;, rocksdb::DBImpl::LogContext*, rocksdb::DBImpl::WriteContext*) (34 samples, 1.92%)</title><rect x="26.9796%" y="501" width="1.9231%" height="15" fill="rgb(254,55,39)" fg:x="477" fg:w="34"/><text x="27.2296%" y="511.50">r..</text></g><g><title>rocksdb::port::PthreadCall(char const*, int) (1 samples, 0.06%)</title><rect x="28.8462%" y="485" width="0.0566%" height="15" fill="rgb(249,208,12)" fg:x="510" fg:w="1"/><text x="29.0962%" y="495.50"></text></g><g><title>rocksdb::DBImpl::WriteContext::~WriteContext() (4 samples, 0.23%)</title><rect x="28.9027%" y="501" width="0.2262%" height="15" fill="rgb(240,52,13)" fg:x="511" fg:w="4"/><text x="29.1527%" y="511.50"></text></g><g><title>rocksdb::InternalStats::AddDBStats(rocksdb::InternalStats::InternalDBStatsType, unsigned long, bool) (2 samples, 0.11%)</title><rect x="29.1290%" y="501" width="0.1131%" height="15" fill="rgb(252,149,13)" fg:x="515" fg:w="2"/><text x="29.3790%" y="511.50"></text></g><g><title>rocksdb::PerfContext::operator=(rocksdb::PerfContext const&amp;) (2 samples, 0.11%)</title><rect x="29.2421%" y="501" width="0.1131%" height="15" fill="rgb(232,81,48)" fg:x="517" fg:w="2"/><text x="29.4921%" y="511.50"></text></g><g><title>rocksdb::StatisticsImpl::HistEnabledForType(unsigned int) const (1 samples, 0.06%)</title><rect x="29.3552%" y="501" width="0.0566%" height="15" fill="rgb(222,144,2)" fg:x="519" fg:w="1"/><text x="29.6052%" y="511.50"></text></g><g><title>rocksdb::HistogramImpl::Add(unsigned long) (2 samples, 0.11%)</title><rect x="29.5814%" y="485" width="0.1131%" height="15" fill="rgb(216,81,32)" fg:x="523" fg:w="2"/><text x="29.8314%" y="495.50"></text></g><g><title>rocksdb::StatisticsImpl::recordInHistogram(unsigned int, unsigned long) (7 samples, 0.40%)</title><rect x="29.4118%" y="501" width="0.3959%" height="15" fill="rgb(244,78,51)" fg:x="520" fg:w="7"/><text x="29.6618%" y="511.50"></text></g><g><title>rocksdb::HistogramStat::Add(unsigned long) (2 samples, 0.11%)</title><rect x="29.6946%" y="485" width="0.1131%" height="15" fill="rgb(217,66,21)" fg:x="525" fg:w="2"/><text x="29.9446%" y="495.50"></text></g><g><title>rocksdb::HistogramBucketMapper::IndexForValue(unsigned long) const (2 samples, 0.11%)</title><rect x="29.6946%" y="469" width="0.1131%" height="15" fill="rgb(247,101,42)" fg:x="525" fg:w="2"/><text x="29.9446%" y="479.50"></text></g><g><title>rocksdb::StatisticsImpl::recordTick(unsigned int, unsigned long) (2 samples, 0.11%)</title><rect x="29.8077%" y="501" width="0.1131%" height="15" fill="rgb(227,81,39)" fg:x="527" fg:w="2"/><text x="30.0577%" y="511.50"></text></g><g><title>rocksdb::Status::operator=(rocksdb::Status const&amp;) (2 samples, 0.11%)</title><rect x="29.9208%" y="501" width="0.1131%" height="15" fill="rgb(220,223,44)" fg:x="529" fg:w="2"/><text x="30.1708%" y="511.50"></text></g><g><title>rocksdb::Status::operator=(rocksdb::Status&amp;&amp;) (1 samples, 0.06%)</title><rect x="30.0339%" y="501" width="0.0566%" height="15" fill="rgb(205,218,2)" fg:x="531" fg:w="1"/><text x="30.2839%" y="511.50"></text></g><g><title>rocksdb::StopWatch::~StopWatch() (7 samples, 0.40%)</title><rect x="30.0905%" y="501" width="0.3959%" height="15" fill="rgb(212,207,28)" fg:x="532" fg:w="7"/><text x="30.3405%" y="511.50"></text></g><g><title>rocksdb::(anonymous namespace)::PosixClock::NowMicros() (1 samples, 0.06%)</title><rect x="30.4299%" y="485" width="0.0566%" height="15" fill="rgb(224,12,41)" fg:x="538" fg:w="1"/><text x="30.6799%" y="495.50"></text></g><g><title>rocksdb::SuperVersionContext::SuperVersionContext(bool) (3 samples, 0.17%)</title><rect x="30.4864%" y="501" width="0.1697%" height="15" fill="rgb(216,118,12)" fg:x="539" fg:w="3"/><text x="30.7364%" y="511.50"></text></g><g><title>rocksdb::WriteBatch::GetProtectionBytesPerKey() const (1 samples, 0.06%)</title><rect x="30.6561%" y="501" width="0.0566%" height="15" fill="rgb(252,97,46)" fg:x="542" fg:w="1"/><text x="30.9061%" y="511.50"></text></g><g><title>rocksdb::WriteBatchInternal::AppendedByteSize(unsigned long, unsigned long) (1 samples, 0.06%)</title><rect x="30.7127%" y="501" width="0.0566%" height="15" fill="rgb(244,206,19)" fg:x="543" fg:w="1"/><text x="30.9627%" y="511.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::CheckMemtableFull() (4 samples, 0.23%)</title><rect x="32.6357%" y="421" width="0.2262%" height="15" fill="rgb(231,84,31)" fg:x="577" fg:w="4"/><text x="32.8857%" y="431.50"></text></g><g><title>rocksdb::ColumnFamilyMemTablesImpl::current() (1 samples, 0.06%)</title><rect x="32.8054%" y="405" width="0.0566%" height="15" fill="rgb(244,133,0)" fg:x="580" fg:w="1"/><text x="33.0554%" y="415.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::SeekToColumnFamily(unsigned int, rocksdb::Status*) [clone .constprop.0] (5 samples, 0.28%)</title><rect x="32.8620%" y="421" width="0.2828%" height="15" fill="rgb(223,15,50)" fg:x="581" fg:w="5"/><text x="33.1120%" y="431.50"></text></g><g><title>rocksdb::ColumnFamilyMemTablesImpl::Seek(unsigned int) (5 samples, 0.28%)</title><rect x="32.8620%" y="405" width="0.2828%" height="15" fill="rgb(250,118,49)" fg:x="581" fg:w="5"/><text x="33.1120%" y="415.50"></text></g><g><title>rocksdb::ColumnFamilySet::GetColumnFamily(unsigned int) const (4 samples, 0.23%)</title><rect x="32.9186%" y="389" width="0.2262%" height="15" fill="rgb(248,25,38)" fg:x="582" fg:w="4"/><text x="33.1686%" y="399.50"></text></g><g><title>rocksdb::ColumnFamilyMemTablesImpl::GetMemTable() const (2 samples, 0.11%)</title><rect x="33.1448%" y="421" width="0.1131%" height="15" fill="rgb(215,70,14)" fg:x="586" fg:w="2"/><text x="33.3948%" y="431.50"></text></g><g><title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::RecomputeSpliceLevels(rocksdb::Slice const&amp;, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, int) (8 samples, 0.45%)</title><rect x="35.0679%" y="389" width="0.4525%" height="15" fill="rgb(215,28,15)" fg:x="620" fg:w="8"/><text x="35.3179%" y="399.50"></text></g><g><title>__tls_init (1 samples, 0.06%)</title><rect x="35.6335%" y="373" width="0.0566%" height="15" fill="rgb(243,6,28)" fg:x="630" fg:w="1"/><text x="35.8835%" y="383.50"></text></g><g><title>__tls_get_addr (1 samples, 0.06%)</title><rect x="35.6335%" y="357" width="0.0566%" height="15" fill="rgb(222,130,1)" fg:x="630" fg:w="1"/><text x="35.8835%" y="367.50"></text></g><g><title>rocksdb::MemTable::KeyComparator::operator()(char const*, char const*) const (4 samples, 0.23%)</title><rect x="35.5204%" y="389" width="0.2262%" height="15" fill="rgb(236,166,44)" fg:x="628" fg:w="4"/><text x="35.7704%" y="399.50"></text></g><g><title>{virtual override thunk({offset(-32)}, rocksdb::(anonymous namespace)::BytewiseComparatorImpl::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const)} (1 samples, 0.06%)</title><rect x="35.6900%" y="373" width="0.0566%" height="15" fill="rgb(221,108,14)" fg:x="631" fg:w="1"/><text x="35.9400%" y="383.50"></text></g><g><title>rocksdb::PerfContext::operator=(rocksdb::PerfContext const&amp;) (1 samples, 0.06%)</title><rect x="35.8032%" y="373" width="0.0566%" height="15" fill="rgb(252,3,45)" fg:x="633" fg:w="1"/><text x="36.0532%" y="383.50"></text></g><g><title>bool rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Insert&lt;false&gt;(char const*, rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::Splice*, bool) (26 samples, 1.47%)</title><rect x="34.5023%" y="405" width="1.4706%" height="15" fill="rgb(237,68,30)" fg:x="610" fg:w="26"/><text x="34.7523%" y="415.50"></text></g><g><title>rocksdb::MemTable::KeyComparator::operator()(char const*, rocksdb::Slice const&amp;) const (4 samples, 0.23%)</title><rect x="35.7466%" y="389" width="0.2262%" height="15" fill="rgb(211,79,22)" fg:x="632" fg:w="4"/><text x="35.9966%" y="399.50"></text></g><g><title>{virtual override thunk({offset(-32)}, rocksdb::(anonymous namespace)::BytewiseComparatorImpl::Compare(rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) const)} (2 samples, 0.11%)</title><rect x="35.8597%" y="373" width="0.1131%" height="15" fill="rgb(252,185,21)" fg:x="634" fg:w="2"/><text x="36.1097%" y="383.50"></text></g><g><title>rocksdb::InlineSkipList&lt;rocksdb::MemTableRep::KeyComparator const&amp;&gt;::AllocateNode(unsigned long, int) [clone .isra.0] (21 samples, 1.19%)</title><rect x="36.1991%" y="389" width="1.1878%" height="15" fill="rgb(225,189,26)" fg:x="640" fg:w="21"/><text x="36.4491%" y="399.50"></text></g><g><title>rocksdb::ConcurrentArena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (13 samples, 0.74%)</title><rect x="36.6516%" y="373" width="0.7353%" height="15" fill="rgb(241,30,40)" fg:x="648" fg:w="13"/><text x="36.9016%" y="383.50"></text></g><g><title>rocksdb::Arena::AllocateAligned(unsigned long, unsigned long, rocksdb::Logger*) (5 samples, 0.28%)</title><rect x="37.1041%" y="357" width="0.2828%" height="15" fill="rgb(235,215,44)" fg:x="656" fg:w="5"/><text x="37.3541%" y="367.50"></text></g><g><title>rocksdb::(anonymous namespace)::SkipListRep::Allocate(unsigned long, char**) (27 samples, 1.53%)</title><rect x="35.9729%" y="405" width="1.5271%" height="15" fill="rgb(205,8,29)" fg:x="636" fg:w="27"/><text x="36.2229%" y="415.50"></text></g><g><title>rocksdb::Random::GetTLSInstance() (2 samples, 0.11%)</title><rect x="37.3869%" y="389" width="0.1131%" height="15" fill="rgb(241,137,42)" fg:x="661" fg:w="2"/><text x="37.6369%" y="399.50"></text></g><g><title>rocksdb::(anonymous namespace)::SkipListRep::InsertKey(void*) (1 samples, 0.06%)</title><rect x="37.5000%" y="405" width="0.0566%" height="15" fill="rgb(237,155,2)" fg:x="663" fg:w="1"/><text x="37.7500%" y="415.50"></text></g><g><title>rocksdb::Hash(char const*, unsigned long, unsigned int) (2 samples, 0.11%)</title><rect x="37.5566%" y="405" width="0.1131%" height="15" fill="rgb(245,29,42)" fg:x="664" fg:w="2"/><text x="37.8066%" y="415.50"></text></g><g><title>rocksdb::MemTable::UpdateFlushState() (4 samples, 0.23%)</title><rect x="37.6697%" y="405" width="0.2262%" height="15" fill="rgb(234,101,35)" fg:x="666" fg:w="4"/><text x="37.9197%" y="415.50"></text></g><g><title>rocksdb::MemTable::ShouldFlushNow() (2 samples, 0.11%)</title><rect x="37.7828%" y="389" width="0.1131%" height="15" fill="rgb(228,64,37)" fg:x="668" fg:w="2"/><text x="38.0328%" y="399.50"></text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::PutCF(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (104 samples, 5.88%)</title><rect x="32.1267%" y="453" width="5.8824%" height="15" fill="rgb(217,214,36)" fg:x="568" fg:w="104"/><text x="32.3767%" y="463.50">rocksdb..</text></g><g><title>rocksdb::(anonymous namespace)::MemTableInserter::PutCFImpl(unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ValueType, rocksdb::ProtectionInfoKVOS&lt;unsigned long&gt; const*) (101 samples, 5.71%)</title><rect x="32.2964%" y="437" width="5.7127%" height="15" fill="rgb(243,70,3)" fg:x="571" fg:w="101"/><text x="32.5464%" y="447.50">rocksdb..</text></g><g><title>rocksdb::MemTable::Add(unsigned long, rocksdb::ValueType, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;, rocksdb::ProtectionInfoKVOS&lt;unsigned long&gt; const*, bool, rocksdb::MemTablePostProcessInfo*, void**) (84 samples, 4.75%)</title><rect x="33.2579%" y="421" width="4.7511%" height="15" fill="rgb(253,158,52)" fg:x="588" fg:w="84"/><text x="33.5079%" y="431.50">rocksd..</text></g><g><title>rocksdb::MemTable::UpdateOldestKeyTime() (2 samples, 0.11%)</title><rect x="37.8959%" y="405" width="0.1131%" height="15" fill="rgb(234,111,54)" fg:x="670" fg:w="2"/><text x="38.1459%" y="415.50"></text></g><g><title>rocksdb::WriteBatchInternal::InsertInto(rocksdb::WriteThread::WriteGroup&amp;, unsigned long, rocksdb::ColumnFamilyMemTables*, rocksdb::FlushScheduler*, rocksdb::TrimHistoryScheduler*, bool, unsigned long, rocksdb::DB*, bool, bool, bool) (133 samples, 7.52%)</title><rect x="30.7692%" y="501" width="7.5226%" height="15" fill="rgb(217,70,32)" fg:x="544" fg:w="133"/><text x="31.0192%" y="511.50">rocksdb::W..</text></g><g><title>rocksdb::WriteBatch::Iterate(rocksdb::WriteBatch::Handler*) const (123 samples, 6.96%)</title><rect x="31.3348%" y="485" width="6.9570%" height="15" fill="rgb(234,18,33)" fg:x="554" fg:w="123"/><text x="31.5848%" y="495.50">rocksdb::..</text></g><g><title>rocksdb::WriteBatchInternal::Iterate(rocksdb::WriteBatch const*, rocksdb::WriteBatch*::Handler, unsigned long, unsigned long) (117 samples, 6.62%)</title><rect x="31.6742%" y="469" width="6.6176%" height="15" fill="rgb(234,12,49)" fg:x="560" fg:w="117"/><text x="31.9242%" y="479.50">rocksdb::..</text></g><g><title>rocksdb::ReadRecordFromWriteBatch(rocksdb::Slice*, char*, unsigned int*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*, rocksdb::Slice*) (5 samples, 0.28%)</title><rect x="38.0090%" y="453" width="0.2828%" height="15" fill="rgb(236,10,21)" fg:x="672" fg:w="5"/><text x="38.2590%" y="463.50"></text></g><g><title>rocksdb::WriteThread::EnterAsBatchGroupLeader(rocksdb::WriteThread::Writer*, rocksdb::WriteThread::WriteGroup*) (3 samples, 0.17%)</title><rect x="38.2919%" y="501" width="0.1697%" height="15" fill="rgb(248,182,45)" fg:x="677" fg:w="3"/><text x="38.5419%" y="511.50"></text></g><g><title>rocksdb::WriteThread::ExitAsBatchGroupLeader(rocksdb::WriteThread::WriteGroup&amp;, rocksdb::Status&amp;) (6 samples, 0.34%)</title><rect x="38.4615%" y="501" width="0.3394%" height="15" fill="rgb(217,95,36)" fg:x="680" fg:w="6"/><text x="38.7115%" y="511.50"></text></g><g><title>rocksdb::WriteThread::JoinBatchGroup(rocksdb::WriteThread::Writer*) (3 samples, 0.17%)</title><rect x="38.8009%" y="501" width="0.1697%" height="15" fill="rgb(212,110,31)" fg:x="686" fg:w="3"/><text x="39.0509%" y="511.50"></text></g><g><title>rocksdb::WriteThread::LinkOne(rocksdb::WriteThread::Writer*, std::atomic&lt;rocksdb::WriteThread::Writer*&gt;*) (1 samples, 0.06%)</title><rect x="38.9140%" y="485" width="0.0566%" height="15" fill="rgb(206,32,53)" fg:x="688" fg:w="1"/><text x="39.1640%" y="495.50"></text></g><g><title>rocksdb::DBImpl::Write(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*) (265 samples, 14.99%)</title><rect x="24.0385%" y="533" width="14.9887%" height="15" fill="rgb(246,141,37)" fg:x="425" fg:w="265"/><text x="24.2885%" y="543.50">rocksdb::DBImpl::Write(..</text></g><g><title>rocksdb::DBImpl::WriteImpl(rocksdb::WriteOptions const&amp;, rocksdb::WriteBatch*, rocksdb::WriteCallback*, unsigned long*, unsigned long, bool, unsigned long*, unsigned long, rocksdb::PreReleaseCallback*, rocksdb::PostMemTableCallback*) (264 samples, 14.93%)</title><rect x="24.0950%" y="517" width="14.9321%" height="15" fill="rgb(219,16,7)" fg:x="426" fg:w="264"/><text x="24.3450%" y="527.50">rocksdb::DBImpl::WriteI..</text></g><g><title>rocksdb::WriteThread::Writer::FinalStatus() (1 samples, 0.06%)</title><rect x="38.9706%" y="501" width="0.0566%" height="15" fill="rgb(230,205,45)" fg:x="689" fg:w="1"/><text x="39.2206%" y="511.50"></text></g><g><title>rocksdb::WriteBatchInternal::GetColumnFamilyIdAndTimestampSize(rocksdb::WriteBatch*, rocksdb::ColumnFamilyHandle*) (6 samples, 0.34%)</title><rect x="39.3100%" y="517" width="0.3394%" height="15" fill="rgb(231,43,49)" fg:x="695" fg:w="6"/><text x="39.5600%" y="527.50"></text></g><g><title>rocksdb::ColumnFamilyHandleImpl::GetID() const (2 samples, 0.11%)</title><rect x="39.5362%" y="501" width="0.1131%" height="15" fill="rgb(212,106,34)" fg:x="699" fg:w="2"/><text x="39.7862%" y="511.50"></text></g><g><title>rocksdb::EncodeVarint32(char*, unsigned int) (1 samples, 0.06%)</title><rect x="40.3846%" y="501" width="0.0566%" height="15" fill="rgb(206,83,17)" fg:x="714" fg:w="1"/><text x="40.6346%" y="511.50"></text></g><g><title>rocksdb::LocalSavePoint::commit() (2 samples, 0.11%)</title><rect x="40.4412%" y="501" width="0.1131%" height="15" fill="rgb(244,154,49)" fg:x="715" fg:w="2"/><text x="40.6912%" y="511.50"></text></g><g><title>rocksdb::SharedCleanablePtr::Impl::UnrefWrapper(void*, void*) (1 samples, 0.06%)</title><rect x="40.5543%" y="501" width="0.0566%" height="15" fill="rgb(244,149,49)" fg:x="717" fg:w="1"/><text x="40.8043%" y="511.50"></text></g><g><title>rocksdb::WriteBatch::Put(rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (32 samples, 1.81%)</title><rect x="39.0271%" y="533" width="1.8100%" height="15" fill="rgb(227,134,18)" fg:x="690" fg:w="32"/><text x="39.2771%" y="543.50">r..</text></g><g><title>rocksdb::WriteBatchInternal::Put(rocksdb::WriteBatch*, unsigned int, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (21 samples, 1.19%)</title><rect x="39.6493%" y="517" width="1.1878%" height="15" fill="rgb(237,116,36)" fg:x="701" fg:w="21"/><text x="39.8993%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_append(char const*, unsigned long) (4 samples, 0.23%)</title><rect x="40.6109%" y="501" width="0.2262%" height="15" fill="rgb(205,129,40)" fg:x="718" fg:w="4"/><text x="40.8609%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_replace_aux(unsigned long, unsigned long, unsigned long, char) (2 samples, 0.11%)</title><rect x="41.2330%" y="517" width="0.1131%" height="15" fill="rgb(236,178,4)" fg:x="729" fg:w="2"/><text x="41.4830%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::pop_back() (3 samples, 0.17%)</title><rect x="41.3462%" y="517" width="0.1697%" height="15" fill="rgb(251,76,53)" fg:x="731" fg:w="3"/><text x="41.5962%" y="527.50"></text></g><g><title>operator new(unsigned long) (4 samples, 0.23%)</title><rect x="42.1380%" y="501" width="0.2262%" height="15" fill="rgb(242,92,40)" fg:x="745" fg:w="4"/><text x="42.3880%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="42.3077%" y="485" width="0.0566%" height="15" fill="rgb(209,45,30)" fg:x="748" fg:w="1"/><text x="42.5577%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="42.3077%" y="469" width="0.0566%" height="15" fill="rgb(218,157,36)" fg:x="748" fg:w="1"/><text x="42.5577%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="42.3077%" y="453" width="0.0566%" height="15" fill="rgb(222,186,16)" fg:x="748" fg:w="1"/><text x="42.5577%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="42.3077%" y="437" width="0.0566%" height="15" fill="rgb(254,72,35)" fg:x="748" fg:w="1"/><text x="42.5577%" y="447.50"></text></g><g><title>rocksdb::WriteBatch::WriteBatch(unsigned long, unsigned long, unsigned long, unsigned long) (30 samples, 1.70%)</title><rect x="40.8371%" y="533" width="1.6968%" height="15" fill="rgb(224,25,35)" fg:x="722" fg:w="30"/><text x="41.0871%" y="543.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::reserve(unsigned long) (18 samples, 1.02%)</title><rect x="41.5158%" y="517" width="1.0181%" height="15" fill="rgb(206,135,52)" fg:x="734" fg:w="18"/><text x="41.7658%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_create(unsigned long&amp;, unsigned long) (3 samples, 0.17%)</title><rect x="42.3643%" y="501" width="0.1697%" height="15" fill="rgb(229,174,47)" fg:x="749" fg:w="3"/><text x="42.6143%" y="511.50"></text></g><g><title>_rjem_je_free_default (1 samples, 0.06%)</title><rect x="42.6471%" y="517" width="0.0566%" height="15" fill="rgb(242,184,21)" fg:x="754" fg:w="1"/><text x="42.8971%" y="527.50"></text></g><g><title>free (4 samples, 0.23%)</title><rect x="42.7036%" y="517" width="0.2262%" height="15" fill="rgb(213,22,45)" fg:x="755" fg:w="4"/><text x="42.9536%" y="527.50"></text></g><g><title>free_fastpath (4 samples, 0.23%)</title><rect x="42.7036%" y="501" width="0.2262%" height="15" fill="rgb(237,81,54)" fg:x="755" fg:w="4"/><text x="42.9536%" y="511.50"></text></g><g><title>emap_alloc_ctx_try_lookup_fast (4 samples, 0.23%)</title><rect x="42.7036%" y="485" width="0.2262%" height="15" fill="rgb(248,177,18)" fg:x="755" fg:w="4"/><text x="42.9536%" y="495.50"></text></g><g><title>rtree_metadata_try_read_fast (4 samples, 0.23%)</title><rect x="42.7036%" y="469" width="0.2262%" height="15" fill="rgb(254,31,16)" fg:x="755" fg:w="4"/><text x="42.9536%" y="479.50"></text></g><g><title>rtree_leaf_elm_lookup_fast (4 samples, 0.23%)</title><rect x="42.7036%" y="453" width="0.2262%" height="15" fill="rgb(235,20,31)" fg:x="755" fg:w="4"/><text x="42.9536%" y="463.50"></text></g><g><title>rocksdb::DB::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (342 samples, 19.34%)</title><rect x="23.6425%" y="549" width="19.3439%" height="15" fill="rgb(240,56,43)" fg:x="418" fg:w="342"/><text x="23.8925%" y="559.50">rocksdb::DB::Put(rocksdb::Writ..</text></g><g><title>rocksdb::WriteBatch::~WriteBatch() (8 samples, 0.45%)</title><rect x="42.5339%" y="533" width="0.4525%" height="15" fill="rgb(237,197,51)" fg:x="752" fg:w="8"/><text x="42.7839%" y="543.50"></text></g><g><title>operator delete(void*) (1 samples, 0.06%)</title><rect x="42.9299%" y="517" width="0.0566%" height="15" fill="rgb(241,162,44)" fg:x="759" fg:w="1"/><text x="43.1799%" y="527.50"></text></g><g><title>IndexDriver (447 samples, 25.28%)</title><rect x="18.1561%" y="677" width="25.2828%" height="15" fill="rgb(224,23,20)" fg:x="321" fg:w="447"/><text x="18.4061%" y="687.50">IndexDriver</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (447 samples, 25.28%)</title><rect x="18.1561%" y="661" width="25.2828%" height="15" fill="rgb(250,109,34)" fg:x="321" fg:w="447"/><text x="18.4061%" y="671.50">std::sys::unix::thread::Thread::new::thr..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (447 samples, 25.28%)</title><rect x="18.1561%" y="645" width="25.2828%" height="15" fill="rgb(214,175,50)" fg:x="321" fg:w="447"/><text x="18.4061%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::fu..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (447 samples, 25.28%)</title><rect x="18.1561%" y="629" width="25.2828%" height="15" fill="rgb(213,182,5)" fg:x="321" fg:w="447"/><text x="18.4061%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::fu..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (447 samples, 25.28%)</title><rect x="18.1561%" y="613" width="25.2828%" height="15" fill="rgb(209,199,19)" fg:x="321" fg:w="447"/><text x="18.4061%" y="623.50">core::ops::function::FnOnce::call_once{{..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (447 samples, 25.28%)</title><rect x="18.1561%" y="597" width="25.2828%" height="15" fill="rgb(236,224,42)" fg:x="321" fg:w="447"/><text x="18.4061%" y="607.50">std::sys_common::backtrace::__rust_begin..</text></g><g><title>rocksdb_put_cf (369 samples, 20.87%)</title><rect x="22.5679%" y="581" width="20.8710%" height="15" fill="rgb(246,226,29)" fg:x="399" fg:w="369"/><text x="22.8179%" y="591.50">rocksdb_put_cf</text></g><g><title>rocksdb::DBImpl::Put(rocksdb::WriteOptions const&amp;, rocksdb::ColumnFamilyHandle*, rocksdb::Slice const&amp;, rocksdb::Slice const&amp;) (360 samples, 20.36%)</title><rect x="23.0769%" y="565" width="20.3620%" height="15" fill="rgb(227,223,11)" fg:x="408" fg:w="360"/><text x="23.3269%" y="575.50">rocksdb::DBImpl::Put(rocksdb::Wr..</text></g><g><title>rocksdb::DBImpl::FailIfCfHasTs(rocksdb::ColumnFamilyHandle const*) const (8 samples, 0.45%)</title><rect x="42.9864%" y="549" width="0.4525%" height="15" fill="rgb(219,7,51)" fg:x="760" fg:w="8"/><text x="43.2364%" y="559.50"></text></g><g><title>rocksdb::ColumnFamilyHandleImpl::GetComparator() const (5 samples, 0.28%)</title><rect x="43.1561%" y="533" width="0.2828%" height="15" fill="rgb(245,167,10)" fg:x="763" fg:w="5"/><text x="43.4061%" y="543.50"></text></g><g><title>rocksdb::ColumnFamilyHandleImpl::cfd() const (2 samples, 0.11%)</title><rect x="43.3258%" y="517" width="0.1131%" height="15" fill="rgb(237,224,16)" fg:x="766" fg:w="2"/><text x="43.5758%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::handle::Handle&gt; (1 samples, 0.06%)</title><rect x="44.3439%" y="565" width="0.0566%" height="15" fill="rgb(226,132,13)" fg:x="784" fg:w="1"/><text x="44.5939%" y="575.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.06%)</title><rect x="44.5701%" y="549" width="0.0566%" height="15" fill="rgb(214,140,3)" fg:x="788" fg:w="1"/><text x="44.8201%" y="559.50"></text></g><g><title>tokio::runtime::task::raw::schedule (1 samples, 0.06%)</title><rect x="44.5701%" y="533" width="0.0566%" height="15" fill="rgb(221,177,4)" fg:x="788" fg:w="1"/><text x="44.8201%" y="543.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (7 samples, 0.40%)</title><rect x="44.4005%" y="565" width="0.3959%" height="15" fill="rgb(238,139,3)" fg:x="785" fg:w="7"/><text x="44.6505%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (3 samples, 0.17%)</title><rect x="44.6267%" y="549" width="0.1697%" height="15" fill="rgb(216,17,39)" fg:x="789" fg:w="3"/><text x="44.8767%" y="559.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (1 samples, 0.06%)</title><rect x="44.8529%" y="549" width="0.0566%" height="15" fill="rgb(238,120,9)" fg:x="793" fg:w="1"/><text x="45.1029%" y="559.50"></text></g><g><title>tokio::runtime::io::Driver::turn (3 samples, 0.17%)</title><rect x="44.9095%" y="549" width="0.1697%" height="15" fill="rgb(244,92,53)" fg:x="794" fg:w="3"/><text x="45.1595%" y="559.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (6 samples, 0.34%)</title><rect x="44.7964%" y="565" width="0.3394%" height="15" fill="rgb(224,148,33)" fg:x="792" fg:w="6"/><text x="45.0464%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (1 samples, 0.06%)</title><rect x="45.0792%" y="549" width="0.0566%" height="15" fill="rgb(243,6,36)" fg:x="797" fg:w="1"/><text x="45.3292%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (28 samples, 1.58%)</title><rect x="43.8914%" y="581" width="1.5837%" height="15" fill="rgb(230,102,11)" fg:x="776" fg:w="28"/><text x="44.1414%" y="591.50"></text></g><g><title>tokio_uring::runtime::Runtime::new::{{closure}} (6 samples, 0.34%)</title><rect x="45.1357%" y="565" width="0.3394%" height="15" fill="rgb(234,148,36)" fg:x="798" fg:w="6"/><text x="45.3857%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (1 samples, 0.06%)</title><rect x="45.4751%" y="581" width="0.0566%" height="15" fill="rgb(251,153,25)" fg:x="804" fg:w="1"/><text x="45.7251%" y="591.50"></text></g><g><title>tokio::runtime::coop::poll_proceed.1391 (2 samples, 0.11%)</title><rect x="46.4932%" y="549" width="0.1131%" height="15" fill="rgb(215,129,8)" fg:x="822" fg:w="2"/><text x="46.7432%" y="559.50"></text></g><g><title>object_storage::object_storage::AsyncObjectStorage::new::{{closure}}::{{closure}} (17 samples, 0.96%)</title><rect x="45.8145%" y="565" width="0.9615%" height="15" fill="rgb(224,128,35)" fg:x="810" fg:w="17"/><text x="46.0645%" y="575.50"></text></g><g><title>tokio::sync::mpsc::list::Rx&lt;T&gt;::pop (3 samples, 0.17%)</title><rect x="46.6063%" y="549" width="0.1697%" height="15" fill="rgb(237,56,52)" fg:x="824" fg:w="3"/><text x="46.8563%" y="559.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="46.8891%" y="533" width="0.0566%" height="15" fill="rgb(234,213,19)" fg:x="829" fg:w="1"/><text x="47.1391%" y="543.50"></text></g><g><title>ObjectStorage (64 samples, 3.62%)</title><rect x="43.4389%" y="677" width="3.6199%" height="15" fill="rgb(252,82,23)" fg:x="768" fg:w="64"/><text x="43.6889%" y="687.50">Obje..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (64 samples, 3.62%)</title><rect x="43.4389%" y="661" width="3.6199%" height="15" fill="rgb(254,201,21)" fg:x="768" fg:w="64"/><text x="43.6889%" y="671.50">std:..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (64 samples, 3.62%)</title><rect x="43.4389%" y="645" width="3.6199%" height="15" fill="rgb(250,186,11)" fg:x="768" fg:w="64"/><text x="43.6889%" y="655.50">&lt;all..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (64 samples, 3.62%)</title><rect x="43.4389%" y="629" width="3.6199%" height="15" fill="rgb(211,174,5)" fg:x="768" fg:w="64"/><text x="43.6889%" y="639.50">&lt;all..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (64 samples, 3.62%)</title><rect x="43.4389%" y="613" width="3.6199%" height="15" fill="rgb(214,121,10)" fg:x="768" fg:w="64"/><text x="43.6889%" y="623.50">core..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (64 samples, 3.62%)</title><rect x="43.4389%" y="597" width="3.6199%" height="15" fill="rgb(241,66,2)" fg:x="768" fg:w="64"/><text x="43.6889%" y="607.50">std:..</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (27 samples, 1.53%)</title><rect x="45.5317%" y="581" width="1.5271%" height="15" fill="rgb(220,167,19)" fg:x="805" fg:w="27"/><text x="45.7817%" y="591.50"></text></g><g><title>tokio::task::local::LocalSet::tick (5 samples, 0.28%)</title><rect x="46.7760%" y="565" width="0.2828%" height="15" fill="rgb(231,54,50)" fg:x="827" fg:w="5"/><text x="47.0260%" y="575.50"></text></g><g><title>tokio::runtime::task::raw::poll (3 samples, 0.17%)</title><rect x="46.8891%" y="549" width="0.1697%" height="15" fill="rgb(239,217,53)" fg:x="829" fg:w="3"/><text x="47.1391%" y="559.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv::{{closure}} (2 samples, 0.11%)</title><rect x="46.9457%" y="533" width="0.1131%" height="15" fill="rgb(248,8,0)" fg:x="830" fg:w="2"/><text x="47.1957%" y="543.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (2 samples, 0.11%)</title><rect x="46.9457%" y="517" width="0.1131%" height="15" fill="rgb(229,118,37)" fg:x="830" fg:w="2"/><text x="47.1957%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.06%)</title><rect x="49.1516%" y="549" width="0.0566%" height="15" fill="rgb(253,223,43)" fg:x="869" fg:w="1"/><text x="49.4016%" y="559.50"></text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.06%)</title><rect x="49.1516%" y="533" width="0.0566%" height="15" fill="rgb(211,77,36)" fg:x="869" fg:w="1"/><text x="49.4016%" y="543.50"></text></g><g><title>tokio::runtime::time::&lt;impl tokio::runtime::time::handle::Handle&gt;::process_at_time (16 samples, 0.90%)</title><rect x="48.5294%" y="565" width="0.9050%" height="15" fill="rgb(219,3,53)" fg:x="858" fg:w="16"/><text x="48.7794%" y="575.50"></text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (4 samples, 0.23%)</title><rect x="49.2081%" y="549" width="0.2262%" height="15" fill="rgb(244,45,42)" fg:x="870" fg:w="4"/><text x="49.4581%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (3 samples, 0.17%)</title><rect x="50.2828%" y="549" width="0.1697%" height="15" fill="rgb(225,95,27)" fg:x="889" fg:w="3"/><text x="50.5328%" y="559.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (5 samples, 0.28%)</title><rect x="50.4525%" y="549" width="0.2828%" height="15" fill="rgb(207,74,8)" fg:x="892" fg:w="5"/><text x="50.7025%" y="559.50"></text></g><g><title>tokio::process::imp::GlobalOrphanQueue::reap_orphans (5 samples, 0.28%)</title><rect x="50.7353%" y="549" width="0.2828%" height="15" fill="rgb(243,63,36)" fg:x="897" fg:w="5"/><text x="50.9853%" y="559.50"></text></g><g><title>std::sys::unix::decode_error_kind (4 samples, 0.23%)</title><rect x="51.9796%" y="533" width="0.2262%" height="15" fill="rgb(211,180,12)" fg:x="919" fg:w="4"/><text x="52.2296%" y="543.50"></text></g><g><title>tokio::runtime::task::raw::schedule (2 samples, 0.11%)</title><rect x="52.7149%" y="501" width="0.1131%" height="15" fill="rgb(254,166,49)" fg:x="932" fg:w="2"/><text x="52.9649%" y="511.50"></text></g><g><title>tokio::runtime::io::Driver::turn (47 samples, 2.66%)</title><rect x="51.0181%" y="549" width="2.6584%" height="15" fill="rgb(205,19,0)" fg:x="902" fg:w="47"/><text x="51.2681%" y="559.50">to..</text></g><g><title>tokio::runtime::io::scheduled_io::ScheduledIo::wake (26 samples, 1.47%)</title><rect x="52.2059%" y="533" width="1.4706%" height="15" fill="rgb(224,172,32)" fg:x="923" fg:w="26"/><text x="52.4559%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (20 samples, 1.13%)</title><rect x="52.5452%" y="517" width="1.1312%" height="15" fill="rgb(254,136,30)" fg:x="929" fg:w="20"/><text x="52.7952%" y="527.50"></text></g><g><title>tokio::task::local::Shared::schedule (15 samples, 0.85%)</title><rect x="52.8281%" y="501" width="0.8484%" height="15" fill="rgb(246,19,35)" fg:x="934" fg:w="15"/><text x="53.0781%" y="511.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (4 samples, 0.23%)</title><rect x="53.4502%" y="485" width="0.2262%" height="15" fill="rgb(219,24,36)" fg:x="945" fg:w="4"/><text x="53.7002%" y="495.50"></text></g><g><title>mio::sys::unix::waker::eventfd::Waker::wake (1 samples, 0.06%)</title><rect x="53.6199%" y="469" width="0.0566%" height="15" fill="rgb(251,55,1)" fg:x="948" fg:w="1"/><text x="53.8699%" y="479.50"></text></g><g><title>tokio::runtime::signal::Driver::process (1 samples, 0.06%)</title><rect x="53.6765%" y="549" width="0.0566%" height="15" fill="rgb(218,117,39)" fg:x="949" fg:w="1"/><text x="53.9265%" y="559.50"></text></g><g><title>tokio::runtime::time::Driver::park_internal (78 samples, 4.41%)</title><rect x="49.4344%" y="565" width="4.4118%" height="15" fill="rgb(248,169,11)" fg:x="874" fg:w="78"/><text x="49.6844%" y="575.50">tokio..</text></g><g><title>tokio::runtime::time::wheel::Wheel::next_expiration (2 samples, 0.11%)</title><rect x="53.7330%" y="549" width="0.1131%" height="15" fill="rgb(244,40,44)" fg:x="950" fg:w="2"/><text x="53.9830%" y="559.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Context::park (132 samples, 7.47%)</title><rect x="47.6810%" y="581" width="7.4661%" height="15" fill="rgb(234,62,37)" fg:x="843" fg:w="132"/><text x="47.9310%" y="591.50">tokio::run..</text></g><g><title>tokio_uring::runtime::Runtime::new::{{closure}} (23 samples, 1.30%)</title><rect x="53.8462%" y="565" width="1.3009%" height="15" fill="rgb(207,117,42)" fg:x="952" fg:w="23"/><text x="54.0962%" y="575.50"></text></g><g><title>tokio::runtime::scheduler::current_thread::Core::next_task (2 samples, 0.11%)</title><rect x="55.1471%" y="581" width="0.1131%" height="15" fill="rgb(213,43,2)" fg:x="975" fg:w="2"/><text x="55.3971%" y="591.50"></text></g><g><title>client::session_manager::SessionManager::get_composite_session::{{closure}} (1 samples, 0.06%)</title><rect x="56.5045%" y="549" width="0.0566%" height="15" fill="rgb(244,202,51)" fg:x="999" fg:w="1"/><text x="56.7545%" y="559.50"></text></g><g><title>client::composite_session::CompositeSession::refresh_placement_driver_cluster::{{closure}} (1 samples, 0.06%)</title><rect x="56.5045%" y="533" width="0.0566%" height="15" fill="rgb(253,174,46)" fg:x="999" fg:w="1"/><text x="56.7545%" y="543.50"></text></g><g><title>client::session::Session::write::{{closure}} (1 samples, 0.06%)</title><rect x="56.5045%" y="517" width="0.0566%" height="15" fill="rgb(251,23,1)" fg:x="999" fg:w="1"/><text x="56.7545%" y="527.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv::{{closure}} (9 samples, 0.51%)</title><rect x="56.5611%" y="549" width="0.5090%" height="15" fill="rgb(253,26,1)" fg:x="1000" fg:w="9"/><text x="56.8111%" y="559.50"></text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (7 samples, 0.40%)</title><rect x="56.6742%" y="533" width="0.3959%" height="15" fill="rgb(216,89,31)" fg:x="1002" fg:w="7"/><text x="56.9242%" y="543.50"></text></g><g><title>range_server::worker::Worker&lt;S,M&gt;::serve::{{closure}} (36 samples, 2.04%)</title><rect x="55.8258%" y="565" width="2.0362%" height="15" fill="rgb(209,109,5)" fg:x="987" fg:w="36"/><text x="56.0758%" y="575.50">r..</text></g><g><title>tokio_uring::net::tcp::listener::TcpListener::accept::{{closure}} (14 samples, 0.79%)</title><rect x="57.0701%" y="549" width="0.7919%" height="15" fill="rgb(229,63,13)" fg:x="1009" fg:w="14"/><text x="57.3201%" y="559.50"></text></g><g><title>&lt;observation::metrics::store_metrics::STORE_FAILED_APPEND_COUNT as core::ops::deref::Deref&gt;::deref (3 samples, 0.17%)</title><rect x="63.1222%" y="533" width="0.1697%" height="15" fill="rgb(238,137,54)" fg:x="1116" fg:w="3"/><text x="63.3722%" y="543.50"></text></g><g><title>&lt;range_server::metrics::APPEND_LATENCY as core::ops::deref::Deref&gt;::deref (3 samples, 0.17%)</title><rect x="63.2919%" y="533" width="0.1697%" height="15" fill="rgb(228,1,9)" fg:x="1119" fg:w="3"/><text x="63.5419%" y="543.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="63.4615%" y="533" width="0.0566%" height="15" fill="rgb(249,120,48)" fg:x="1122" fg:w="1"/><text x="63.7115%" y="543.50"></text></g><g><title>&lt;std::path::Components as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (1 samples, 0.06%)</title><rect x="63.9140%" y="501" width="0.0566%" height="15" fill="rgb(209,72,36)" fg:x="1130" fg:w="1"/><text x="64.1640%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.11%)</title><rect x="63.9706%" y="501" width="0.1131%" height="15" fill="rgb(247,98,49)" fg:x="1131" fg:w="2"/><text x="64.2206%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.11%)</title><rect x="63.9706%" y="485" width="0.1131%" height="15" fill="rgb(233,75,36)" fg:x="1131" fg:w="2"/><text x="64.2206%" y="495.50"></text></g><g><title>do_rallocx (1 samples, 0.06%)</title><rect x="64.0271%" y="469" width="0.0566%" height="15" fill="rgb(225,14,24)" fg:x="1132" fg:w="1"/><text x="64.2771%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.11%)</title><rect x="64.2534%" y="485" width="0.1131%" height="15" fill="rgb(237,193,20)" fg:x="1136" fg:w="2"/><text x="64.5034%" y="495.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="64.3100%" y="469" width="0.0566%" height="15" fill="rgb(239,122,19)" fg:x="1137" fg:w="1"/><text x="64.5600%" y="479.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="64.3100%" y="453" width="0.0566%" height="15" fill="rgb(231,220,10)" fg:x="1137" fg:w="1"/><text x="64.5600%" y="463.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="64.3100%" y="437" width="0.0566%" height="15" fill="rgb(220,66,15)" fg:x="1137" fg:w="1"/><text x="64.5600%" y="447.50"></text></g><g><title>core::str::pattern::StrSearcher::new (6 samples, 0.34%)</title><rect x="64.3665%" y="485" width="0.3394%" height="15" fill="rgb(215,171,52)" fg:x="1138" fg:w="6"/><text x="64.6165%" y="495.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (6 samples, 0.34%)</title><rect x="64.3665%" y="469" width="0.3394%" height="15" fill="rgb(241,169,50)" fg:x="1138" fg:w="6"/><text x="64.6165%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (6 samples, 0.34%)</title><rect x="64.3665%" y="453" width="0.3394%" height="15" fill="rgb(236,189,0)" fg:x="1138" fg:w="6"/><text x="64.6165%" y="463.50"></text></g><g><title>alloc::str::&lt;impl str&gt;::replace (12 samples, 0.68%)</title><rect x="64.0837%" y="501" width="0.6787%" height="15" fill="rgb(217,147,20)" fg:x="1133" fg:w="12"/><text x="64.3337%" y="511.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::next (1 samples, 0.06%)</title><rect x="64.7059%" y="485" width="0.0566%" height="15" fill="rgb(206,188,39)" fg:x="1144" fg:w="1"/><text x="64.9559%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (5 samples, 0.28%)</title><rect x="64.7624%" y="501" width="0.2828%" height="15" fill="rgb(227,118,25)" fg:x="1145" fg:w="5"/><text x="65.0124%" y="511.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.06%)</title><rect x="65.0452%" y="485" width="0.0566%" height="15" fill="rgb(248,171,40)" fg:x="1150" fg:w="1"/><text x="65.2952%" y="495.50"></text></g><g><title>isfree (1 samples, 0.06%)</title><rect x="65.0452%" y="469" width="0.0566%" height="15" fill="rgb(251,90,54)" fg:x="1150" fg:w="1"/><text x="65.2952%" y="479.50"></text></g><g><title>thread_dalloc_event (1 samples, 0.06%)</title><rect x="65.0452%" y="453" width="0.0566%" height="15" fill="rgb(234,11,46)" fg:x="1150" fg:w="1"/><text x="65.2952%" y="463.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="65.0452%" y="437" width="0.0566%" height="15" fill="rgb(229,134,13)" fg:x="1150" fg:w="1"/><text x="65.2952%" y="447.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="65.0452%" y="421" width="0.0566%" height="15" fill="rgb(223,129,3)" fg:x="1150" fg:w="1"/><text x="65.2952%" y="431.50"></text></g><g><title>core::num::from_str_radix (1 samples, 0.06%)</title><rect x="65.1018%" y="485" width="0.0566%" height="15" fill="rgb(221,124,13)" fg:x="1151" fg:w="1"/><text x="65.3518%" y="495.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="65.1584%" y="485" width="0.0566%" height="15" fill="rgb(234,3,18)" fg:x="1152" fg:w="1"/><text x="65.4084%" y="495.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.06%)</title><rect x="65.1584%" y="469" width="0.0566%" height="15" fill="rgb(249,199,20)" fg:x="1152" fg:w="1"/><text x="65.4084%" y="479.50"></text></g><g><title>core::str::pattern::StrSearcher::new (1 samples, 0.06%)</title><rect x="65.2149%" y="485" width="0.0566%" height="15" fill="rgb(224,134,6)" fg:x="1153" fg:w="1"/><text x="65.4649%" y="495.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::new (1 samples, 0.06%)</title><rect x="65.2149%" y="469" width="0.0566%" height="15" fill="rgb(254,83,26)" fg:x="1153" fg:w="1"/><text x="65.4649%" y="479.50"></text></g><g><title>core::str::pattern::TwoWaySearcher::maximal_suffix (1 samples, 0.06%)</title><rect x="65.2149%" y="453" width="0.0566%" height="15" fill="rgb(217,88,9)" fg:x="1153" fg:w="1"/><text x="65.4649%" y="463.50"></text></g><g><title>std::path::Path::_join (2 samples, 0.11%)</title><rect x="65.2715%" y="485" width="0.1131%" height="15" fill="rgb(225,73,2)" fg:x="1154" fg:w="2"/><text x="65.5215%" y="495.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 0.06%)</title><rect x="65.3281%" y="469" width="0.0566%" height="15" fill="rgb(226,44,39)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="479.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.06%)</title><rect x="65.3281%" y="453" width="0.0566%" height="15" fill="rgb(228,53,17)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="463.50"></text></g><g><title>std::ffi::os_str::OsString::push (1 samples, 0.06%)</title><rect x="65.3281%" y="437" width="0.0566%" height="15" fill="rgb(212,27,27)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="447.50"></text></g><g><title>std::sys::unix::os_str::Buf::push_slice (1 samples, 0.06%)</title><rect x="65.3281%" y="421" width="0.0566%" height="15" fill="rgb(241,50,6)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.06%)</title><rect x="65.3281%" y="405" width="0.0566%" height="15" fill="rgb(225,28,51)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.06%)</title><rect x="65.3281%" y="389" width="0.0566%" height="15" fill="rgb(215,33,16)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.06%)</title><rect x="65.3281%" y="373" width="0.0566%" height="15" fill="rgb(243,40,39)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="65.3281%" y="357" width="0.0566%" height="15" fill="rgb(225,11,42)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.06%)</title><rect x="65.3281%" y="341" width="0.0566%" height="15" fill="rgb(241,220,38)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="65.3281%" y="325" width="0.0566%" height="15" fill="rgb(244,52,35)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.06%)</title><rect x="65.3281%" y="309" width="0.0566%" height="15" fill="rgb(246,42,46)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="319.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (1 samples, 0.06%)</title><rect x="65.3281%" y="293" width="0.0566%" height="15" fill="rgb(205,184,13)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="303.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (1 samples, 0.06%)</title><rect x="65.3281%" y="277" width="0.0566%" height="15" fill="rgb(209,48,36)" fg:x="1155" fg:w="1"/><text x="65.5781%" y="287.50"></text></g><g><title>std::io::error::Error::kind (1 samples, 0.06%)</title><rect x="65.4412%" y="437" width="0.0566%" height="15" fill="rgb(244,34,51)" fg:x="1157" fg:w="1"/><text x="65.6912%" y="447.50"></text></g><g><title>std::sys::unix::decode_error_kind (1 samples, 0.06%)</title><rect x="65.4412%" y="421" width="0.0566%" height="15" fill="rgb(221,107,33)" fg:x="1157" fg:w="1"/><text x="65.6912%" y="431.50"></text></g><g><title>std::sys::unix::fs::File::open_c (2 samples, 0.11%)</title><rect x="65.4412%" y="469" width="0.1131%" height="15" fill="rgb(224,203,12)" fg:x="1157" fg:w="2"/><text x="65.6912%" y="479.50"></text></g><g><title>std::sys::unix::cvt_r (2 samples, 0.11%)</title><rect x="65.4412%" y="453" width="0.1131%" height="15" fill="rgb(230,215,18)" fg:x="1157" fg:w="2"/><text x="65.6912%" y="463.50"></text></g><g><title>std::sys::unix::cvt (1 samples, 0.06%)</title><rect x="65.4977%" y="437" width="0.0566%" height="15" fill="rgb(206,185,35)" fg:x="1158" fg:w="1"/><text x="65.7477%" y="447.50"></text></g><g><title>_rjem_je_emap_update_edata_state (2 samples, 0.11%)</title><rect x="65.6109%" y="69" width="0.1131%" height="15" fill="rgb(228,140,34)" fg:x="1160" fg:w="2"/><text x="65.8609%" y="79.50"></text></g><g><title>rtree_leaf_elm_lookup (2 samples, 0.11%)</title><rect x="65.6109%" y="53" width="0.1131%" height="15" fill="rgb(208,93,13)" fg:x="1160" fg:w="2"/><text x="65.8609%" y="63.50"></text></g><g><title>rtree_cache_direct_map (2 samples, 0.11%)</title><rect x="65.6109%" y="37" width="0.1131%" height="15" fill="rgb(221,193,39)" fg:x="1160" fg:w="2"/><text x="65.8609%" y="47.50"></text></g><g><title>iralloct (4 samples, 0.23%)</title><rect x="65.5543%" y="325" width="0.2262%" height="15" fill="rgb(241,132,34)" fg:x="1159" fg:w="4"/><text x="65.8043%" y="335.50"></text></g><g><title>_rjem_je_arena_ralloc (4 samples, 0.23%)</title><rect x="65.5543%" y="309" width="0.2262%" height="15" fill="rgb(221,141,10)" fg:x="1159" fg:w="4"/><text x="65.8043%" y="319.50"></text></g><g><title>arena_ralloc_move_helper (3 samples, 0.17%)</title><rect x="65.6109%" y="293" width="0.1697%" height="15" fill="rgb(226,90,31)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="303.50"></text></g><g><title>arena_malloc (3 samples, 0.17%)</title><rect x="65.6109%" y="277" width="0.1697%" height="15" fill="rgb(243,75,5)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="287.50"></text></g><g><title>tcache_alloc_small (3 samples, 0.17%)</title><rect x="65.6109%" y="261" width="0.1697%" height="15" fill="rgb(227,156,21)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="271.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (3 samples, 0.17%)</title><rect x="65.6109%" y="245" width="0.1697%" height="15" fill="rgb(250,195,8)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="255.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (3 samples, 0.17%)</title><rect x="65.6109%" y="229" width="0.1697%" height="15" fill="rgb(220,134,5)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="239.50"></text></g><g><title>arena_slab_alloc (3 samples, 0.17%)</title><rect x="65.6109%" y="213" width="0.1697%" height="15" fill="rgb(246,106,34)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="223.50"></text></g><g><title>_rjem_je_pa_alloc (3 samples, 0.17%)</title><rect x="65.6109%" y="197" width="0.1697%" height="15" fill="rgb(205,1,4)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="207.50"></text></g><g><title>pai_alloc (3 samples, 0.17%)</title><rect x="65.6109%" y="181" width="0.1697%" height="15" fill="rgb(224,151,29)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="191.50"></text></g><g><title>pac_alloc_impl (3 samples, 0.17%)</title><rect x="65.6109%" y="165" width="0.1697%" height="15" fill="rgb(251,196,0)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="175.50"></text></g><g><title>pac_alloc_real (3 samples, 0.17%)</title><rect x="65.6109%" y="149" width="0.1697%" height="15" fill="rgb(212,127,0)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="159.50"></text></g><g><title>_rjem_je_ecache_alloc (3 samples, 0.17%)</title><rect x="65.6109%" y="133" width="0.1697%" height="15" fill="rgb(236,71,53)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="143.50"></text></g><g><title>extent_recycle (3 samples, 0.17%)</title><rect x="65.6109%" y="117" width="0.1697%" height="15" fill="rgb(227,99,0)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="127.50"></text></g><g><title>extent_recycle_extract (3 samples, 0.17%)</title><rect x="65.6109%" y="101" width="0.1697%" height="15" fill="rgb(239,89,21)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="111.50"></text></g><g><title>extent_activate_locked (3 samples, 0.17%)</title><rect x="65.6109%" y="85" width="0.1697%" height="15" fill="rgb(243,122,19)" fg:x="1160" fg:w="3"/><text x="65.8609%" y="95.50"></text></g><g><title>_rjem_je_eset_remove (1 samples, 0.06%)</title><rect x="65.7240%" y="69" width="0.0566%" height="15" fill="rgb(229,192,45)" fg:x="1162" fg:w="1"/><text x="65.9740%" y="79.50"></text></g><g><title>eset_stats_sub (1 samples, 0.06%)</title><rect x="65.7240%" y="53" width="0.0566%" height="15" fill="rgb(235,165,35)" fg:x="1162" fg:w="1"/><text x="65.9740%" y="63.50"></text></g><g><title>atomic_load_zu (1 samples, 0.06%)</title><rect x="65.7240%" y="37" width="0.0566%" height="15" fill="rgb(253,202,0)" fg:x="1162" fg:w="1"/><text x="65.9740%" y="47.50"></text></g><g><title>alloc::string::String::reserve (5 samples, 0.28%)</title><rect x="65.5543%" y="437" width="0.2828%" height="15" fill="rgb(235,51,20)" fg:x="1159" fg:w="5"/><text x="65.8043%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.28%)</title><rect x="65.5543%" y="421" width="0.2828%" height="15" fill="rgb(218,95,46)" fg:x="1159" fg:w="5"/><text x="65.8043%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.28%)</title><rect x="65.5543%" y="405" width="0.2828%" height="15" fill="rgb(212,81,10)" fg:x="1159" fg:w="5"/><text x="65.8043%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.28%)</title><rect x="65.5543%" y="389" width="0.2828%" height="15" fill="rgb(240,59,0)" fg:x="1159" fg:w="5"/><text x="65.8043%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.28%)</title><rect x="65.5543%" y="373" width="0.2828%" height="15" fill="rgb(212,191,42)" fg:x="1159" fg:w="5"/><text x="65.8043%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.28%)</title><rect x="65.5543%" y="357" width="0.2828%" height="15" fill="rgb(233,140,3)" fg:x="1159" fg:w="5"/><text x="65.8043%" y="367.50"></text></g><g><title>do_rallocx (5 samples, 0.28%)</title><rect x="65.5543%" y="341" width="0.2828%" height="15" fill="rgb(215,69,23)" fg:x="1159" fg:w="5"/><text x="65.8043%" y="351.50"></text></g><g><title>thread_alloc_event (1 samples, 0.06%)</title><rect x="65.7805%" y="325" width="0.0566%" height="15" fill="rgb(240,202,20)" fg:x="1163" fg:w="1"/><text x="66.0305%" y="335.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="65.7805%" y="309" width="0.0566%" height="15" fill="rgb(209,146,50)" fg:x="1163" fg:w="1"/><text x="66.0305%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (39 samples, 2.21%)</title><rect x="63.6878%" y="517" width="2.2059%" height="15" fill="rgb(253,102,54)" fg:x="1126" fg:w="39"/><text x="63.9378%" y="527.50">&lt;..</text></g><g><title>sysinfo::linux::disk::find_type_for_device_name (15 samples, 0.85%)</title><rect x="65.0452%" y="501" width="0.8484%" height="15" fill="rgb(250,173,47)" fg:x="1150" fg:w="15"/><text x="65.2952%" y="511.50"></text></g><g><title>sysinfo::linux::utils::get_all_data (9 samples, 0.51%)</title><rect x="65.3846%" y="485" width="0.5090%" height="15" fill="rgb(232,142,7)" fg:x="1156" fg:w="9"/><text x="65.6346%" y="495.50"></text></g><g><title>sysinfo::linux::utils::get_all_data_from_file (6 samples, 0.34%)</title><rect x="65.5543%" y="469" width="0.3394%" height="15" fill="rgb(230,157,47)" fg:x="1159" fg:w="6"/><text x="65.8043%" y="479.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (6 samples, 0.34%)</title><rect x="65.5543%" y="453" width="0.3394%" height="15" fill="rgb(214,177,35)" fg:x="1159" fg:w="6"/><text x="65.8043%" y="463.50"></text></g><g><title>std::fs::buffer_capacity_required (1 samples, 0.06%)</title><rect x="65.8371%" y="437" width="0.0566%" height="15" fill="rgb(234,119,46)" fg:x="1164" fg:w="1"/><text x="66.0871%" y="447.50"></text></g><g><title>_rjem_je_edata_cache_put (1 samples, 0.06%)</title><rect x="65.9502%" y="261" width="0.0566%" height="15" fill="rgb(241,180,50)" fg:x="1166" fg:w="1"/><text x="66.2002%" y="271.50"></text></g><g><title>_rjem_je_edata_avail_insert (1 samples, 0.06%)</title><rect x="65.9502%" y="245" width="0.0566%" height="15" fill="rgb(221,54,25)" fg:x="1166" fg:w="1"/><text x="66.2002%" y="255.50"></text></g><g><title>ph_insert (1 samples, 0.06%)</title><rect x="65.9502%" y="229" width="0.0566%" height="15" fill="rgb(209,157,44)" fg:x="1166" fg:w="1"/><text x="66.2002%" y="239.50"></text></g><g><title>ph_try_aux_merge_pair (1 samples, 0.06%)</title><rect x="65.9502%" y="213" width="0.0566%" height="15" fill="rgb(246,115,41)" fg:x="1166" fg:w="1"/><text x="66.2002%" y="223.50"></text></g><g><title>phn_merge (1 samples, 0.06%)</title><rect x="65.9502%" y="197" width="0.0566%" height="15" fill="rgb(229,86,1)" fg:x="1166" fg:w="1"/><text x="66.2002%" y="207.50"></text></g><g><title>large_dalloc_finish_impl (2 samples, 0.11%)</title><rect x="65.9502%" y="373" width="0.1131%" height="15" fill="rgb(240,108,53)" fg:x="1166" fg:w="2"/><text x="66.2002%" y="383.50"></text></g><g><title>pac_dalloc_impl (2 samples, 0.11%)</title><rect x="65.9502%" y="357" width="0.1131%" height="15" fill="rgb(227,134,2)" fg:x="1166" fg:w="2"/><text x="66.2002%" y="367.50"></text></g><g><title>_rjem_je_extent_record (2 samples, 0.11%)</title><rect x="65.9502%" y="341" width="0.1131%" height="15" fill="rgb(213,129,25)" fg:x="1166" fg:w="2"/><text x="66.2002%" y="351.50"></text></g><g><title>extent_try_coalesce_large (2 samples, 0.11%)</title><rect x="65.9502%" y="325" width="0.1131%" height="15" fill="rgb(226,35,21)" fg:x="1166" fg:w="2"/><text x="66.2002%" y="335.50"></text></g><g><title>extent_try_coalesce_impl (2 samples, 0.11%)</title><rect x="65.9502%" y="309" width="0.1131%" height="15" fill="rgb(208,129,26)" fg:x="1166" fg:w="2"/><text x="66.2002%" y="319.50"></text></g><g><title>extent_coalesce (2 samples, 0.11%)</title><rect x="65.9502%" y="293" width="0.1131%" height="15" fill="rgb(224,83,6)" fg:x="1166" fg:w="2"/><text x="66.2002%" y="303.50"></text></g><g><title>extent_merge_impl (2 samples, 0.11%)</title><rect x="65.9502%" y="277" width="0.1131%" height="15" fill="rgb(227,52,39)" fg:x="1166" fg:w="2"/><text x="66.2002%" y="287.50"></text></g><g><title>ehooks_merge (1 samples, 0.06%)</title><rect x="66.0068%" y="261" width="0.0566%" height="15" fill="rgb(241,30,17)" fg:x="1167" fg:w="1"/><text x="66.2568%" y="271.50"></text></g><g><title>_rjem_je_ehooks_default_merge_impl (1 samples, 0.06%)</title><rect x="66.0068%" y="245" width="0.0566%" height="15" fill="rgb(246,186,42)" fg:x="1167" fg:w="1"/><text x="66.2568%" y="255.50"></text></g><g><title>_rjem_je_extent_dss_mergeable (1 samples, 0.06%)</title><rect x="66.0068%" y="229" width="0.0566%" height="15" fill="rgb(221,169,15)" fg:x="1167" fg:w="1"/><text x="66.2568%" y="239.50"></text></g><g><title>atomic_load_p (1 samples, 0.06%)</title><rect x="66.0068%" y="213" width="0.0566%" height="15" fill="rgb(235,108,21)" fg:x="1167" fg:w="1"/><text x="66.2568%" y="223.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (4 samples, 0.23%)</title><rect x="65.8937%" y="517" width="0.2262%" height="15" fill="rgb(219,148,30)" fg:x="1165" fg:w="4"/><text x="66.1437%" y="527.50"></text></g><g><title>&lt;std::sys::unix::fs::Dir as core::ops::drop::Drop&gt;::drop (4 samples, 0.23%)</title><rect x="65.8937%" y="501" width="0.2262%" height="15" fill="rgb(220,109,5)" fg:x="1165" fg:w="4"/><text x="66.1437%" y="511.50"></text></g><g><title>closedir (4 samples, 0.23%)</title><rect x="65.8937%" y="485" width="0.2262%" height="15" fill="rgb(213,203,48)" fg:x="1165" fg:w="4"/><text x="66.1437%" y="495.50"></text></g><g><title>_rjem_je_free_default (4 samples, 0.23%)</title><rect x="65.8937%" y="469" width="0.2262%" height="15" fill="rgb(244,71,33)" fg:x="1165" fg:w="4"/><text x="66.1437%" y="479.50"></text></g><g><title>ifree (3 samples, 0.17%)</title><rect x="65.9502%" y="453" width="0.1697%" height="15" fill="rgb(209,23,2)" fg:x="1166" fg:w="3"/><text x="66.2002%" y="463.50"></text></g><g><title>idalloctm (3 samples, 0.17%)</title><rect x="65.9502%" y="437" width="0.1697%" height="15" fill="rgb(219,97,7)" fg:x="1166" fg:w="3"/><text x="66.2002%" y="447.50"></text></g><g><title>arena_dalloc (3 samples, 0.17%)</title><rect x="65.9502%" y="421" width="0.1697%" height="15" fill="rgb(216,161,23)" fg:x="1166" fg:w="3"/><text x="66.2002%" y="431.50"></text></g><g><title>arena_dalloc_large (3 samples, 0.17%)</title><rect x="65.9502%" y="405" width="0.1697%" height="15" fill="rgb(207,45,42)" fg:x="1166" fg:w="3"/><text x="66.2002%" y="415.50"></text></g><g><title>_rjem_je_large_dalloc (3 samples, 0.17%)</title><rect x="65.9502%" y="389" width="0.1697%" height="15" fill="rgb(241,61,4)" fg:x="1166" fg:w="3"/><text x="66.2002%" y="399.50"></text></g><g><title>large_dalloc_prep_impl (1 samples, 0.06%)</title><rect x="66.0633%" y="373" width="0.0566%" height="15" fill="rgb(236,170,1)" fg:x="1168" fg:w="1"/><text x="66.3133%" y="383.50"></text></g><g><title>std::sys::unix::fs::File::open_c (1 samples, 0.06%)</title><rect x="66.1199%" y="517" width="0.0566%" height="15" fill="rgb(239,72,5)" fg:x="1169" fg:w="1"/><text x="66.3699%" y="527.50"></text></g><g><title>std::path::Path::to_path_buf (1 samples, 0.06%)</title><rect x="66.1765%" y="501" width="0.0566%" height="15" fill="rgb(214,13,50)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="511.50"></text></g><g><title>std::ffi::os_str::OsStr::to_os_string (1 samples, 0.06%)</title><rect x="66.1765%" y="485" width="0.0566%" height="15" fill="rgb(224,88,9)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="495.50"></text></g><g><title>std::sys::unix::os_str::Slice::to_owned (1 samples, 0.06%)</title><rect x="66.1765%" y="469" width="0.0566%" height="15" fill="rgb(238,192,34)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (1 samples, 0.06%)</title><rect x="66.1765%" y="453" width="0.0566%" height="15" fill="rgb(217,203,50)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="463.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.06%)</title><rect x="66.1765%" y="437" width="0.0566%" height="15" fill="rgb(241,123,32)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="447.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.06%)</title><rect x="66.1765%" y="421" width="0.0566%" height="15" fill="rgb(248,151,39)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="431.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.06%)</title><rect x="66.1765%" y="405" width="0.0566%" height="15" fill="rgb(208,89,6)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="66.1765%" y="389" width="0.0566%" height="15" fill="rgb(254,43,26)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.06%)</title><rect x="66.1765%" y="373" width="0.0566%" height="15" fill="rgb(216,158,13)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.06%)</title><rect x="66.1765%" y="357" width="0.0566%" height="15" fill="rgb(212,47,37)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.06%)</title><rect x="66.1765%" y="341" width="0.0566%" height="15" fill="rgb(254,16,10)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.06%)</title><rect x="66.1765%" y="325" width="0.0566%" height="15" fill="rgb(223,228,16)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.06%)</title><rect x="66.1765%" y="309" width="0.0566%" height="15" fill="rgb(249,108,50)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="319.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="66.1765%" y="293" width="0.0566%" height="15" fill="rgb(208,220,5)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="303.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="66.1765%" y="277" width="0.0566%" height="15" fill="rgb(217,89,48)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="287.50"></text></g><g><title>sz_size2index_usize_fastpath (1 samples, 0.06%)</title><rect x="66.1765%" y="261" width="0.0566%" height="15" fill="rgb(212,113,41)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="271.50"></text></g><g><title>sz_index2size_lookup_impl (1 samples, 0.06%)</title><rect x="66.1765%" y="245" width="0.0566%" height="15" fill="rgb(231,127,5)" fg:x="1170" fg:w="1"/><text x="66.4265%" y="255.50"></text></g><g><title>_rjem_je_arena_malloc_hard (1 samples, 0.06%)</title><rect x="66.2896%" y="341" width="0.0566%" height="15" fill="rgb(217,141,17)" fg:x="1172" fg:w="1"/><text x="66.5396%" y="351.50"></text></g><g><title>extent_recycle_extract (2 samples, 0.11%)</title><rect x="66.4027%" y="213" width="0.1131%" height="15" fill="rgb(245,125,54)" fg:x="1174" fg:w="2"/><text x="66.6527%" y="223.50"></text></g><g><title>_rjem_je_eset_fit (2 samples, 0.11%)</title><rect x="66.4027%" y="197" width="0.1131%" height="15" fill="rgb(248,125,3)" fg:x="1174" fg:w="2"/><text x="66.6527%" y="207.50"></text></g><g><title>eset_first_fit (1 samples, 0.06%)</title><rect x="66.4593%" y="181" width="0.0566%" height="15" fill="rgb(236,119,51)" fg:x="1175" fg:w="1"/><text x="66.7093%" y="191.50"></text></g><g><title>_rjem_je_sz_psz_quantize_ceil (1 samples, 0.06%)</title><rect x="66.4593%" y="165" width="0.0566%" height="15" fill="rgb(239,99,8)" fg:x="1175" fg:w="1"/><text x="66.7093%" y="175.50"></text></g><g><title>extent_deactivate_locked (1 samples, 0.06%)</title><rect x="66.5158%" y="197" width="0.0566%" height="15" fill="rgb(224,228,4)" fg:x="1176" fg:w="1"/><text x="66.7658%" y="207.50"></text></g><g><title>extent_deactivate_locked_impl (1 samples, 0.06%)</title><rect x="66.5158%" y="181" width="0.0566%" height="15" fill="rgb(220,131,45)" fg:x="1176" fg:w="1"/><text x="66.7658%" y="191.50"></text></g><g><title>_rjem_je_eset_insert (1 samples, 0.06%)</title><rect x="66.5158%" y="165" width="0.0566%" height="15" fill="rgb(215,62,5)" fg:x="1176" fg:w="1"/><text x="66.7658%" y="175.50"></text></g><g><title>eset_stats_add (1 samples, 0.06%)</title><rect x="66.5158%" y="149" width="0.0566%" height="15" fill="rgb(253,12,24)" fg:x="1176" fg:w="1"/><text x="66.7658%" y="159.50"></text></g><g><title>atomic_load_zu (1 samples, 0.06%)</title><rect x="66.5158%" y="133" width="0.0566%" height="15" fill="rgb(248,120,50)" fg:x="1176" fg:w="1"/><text x="66.7658%" y="143.50"></text></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.06%)</title><rect x="66.5724%" y="165" width="0.0566%" height="15" fill="rgb(245,194,10)" fg:x="1177" fg:w="1"/><text x="66.8224%" y="175.50"></text></g><g><title>_rjem_je_ecache_alloc (6 samples, 0.34%)</title><rect x="66.3462%" y="245" width="0.3394%" height="15" fill="rgb(241,149,38)" fg:x="1173" fg:w="6"/><text x="66.5962%" y="255.50"></text></g><g><title>extent_recycle (6 samples, 0.34%)</title><rect x="66.3462%" y="229" width="0.3394%" height="15" fill="rgb(219,215,7)" fg:x="1173" fg:w="6"/><text x="66.5962%" y="239.50"></text></g><g><title>extent_recycle_split (3 samples, 0.17%)</title><rect x="66.5158%" y="213" width="0.1697%" height="15" fill="rgb(208,120,31)" fg:x="1176" fg:w="3"/><text x="66.7658%" y="223.50"></text></g><g><title>extent_split_interior (2 samples, 0.11%)</title><rect x="66.5724%" y="197" width="0.1131%" height="15" fill="rgb(244,30,8)" fg:x="1177" fg:w="2"/><text x="66.8224%" y="207.50"></text></g><g><title>extent_split_impl (2 samples, 0.11%)</title><rect x="66.5724%" y="181" width="0.1131%" height="15" fill="rgb(238,35,44)" fg:x="1177" fg:w="2"/><text x="66.8224%" y="191.50"></text></g><g><title>ehooks_split_will_fail (1 samples, 0.06%)</title><rect x="66.6290%" y="165" width="0.0566%" height="15" fill="rgb(243,218,37)" fg:x="1178" fg:w="1"/><text x="66.8790%" y="175.50"></text></g><g><title>ehooks_get_extent_hooks_ptr (1 samples, 0.06%)</title><rect x="66.6290%" y="149" width="0.0566%" height="15" fill="rgb(218,169,10)" fg:x="1178" fg:w="1"/><text x="66.8790%" y="159.50"></text></g><g><title>atomic_load_p (1 samples, 0.06%)</title><rect x="66.6290%" y="133" width="0.0566%" height="15" fill="rgb(221,144,10)" fg:x="1178" fg:w="1"/><text x="66.8790%" y="143.50"></text></g><g><title>_rjem_je_edata_cache_get (1 samples, 0.06%)</title><rect x="66.6855%" y="149" width="0.0566%" height="15" fill="rgb(226,41,38)" fg:x="1179" fg:w="1"/><text x="66.9355%" y="159.50"></text></g><g><title>_rjem_je_pa_alloc (8 samples, 0.45%)</title><rect x="66.3462%" y="309" width="0.4525%" height="15" fill="rgb(228,3,1)" fg:x="1173" fg:w="8"/><text x="66.5962%" y="319.50"></text></g><g><title>pai_alloc (8 samples, 0.45%)</title><rect x="66.3462%" y="293" width="0.4525%" height="15" fill="rgb(209,129,12)" fg:x="1173" fg:w="8"/><text x="66.5962%" y="303.50"></text></g><g><title>pac_alloc_impl (8 samples, 0.45%)</title><rect x="66.3462%" y="277" width="0.4525%" height="15" fill="rgb(213,136,33)" fg:x="1173" fg:w="8"/><text x="66.5962%" y="287.50"></text></g><g><title>pac_alloc_real (8 samples, 0.45%)</title><rect x="66.3462%" y="261" width="0.4525%" height="15" fill="rgb(209,181,29)" fg:x="1173" fg:w="8"/><text x="66.5962%" y="271.50"></text></g><g><title>_rjem_je_ecache_alloc_grow (2 samples, 0.11%)</title><rect x="66.6855%" y="245" width="0.1131%" height="15" fill="rgb(234,173,18)" fg:x="1179" fg:w="2"/><text x="66.9355%" y="255.50"></text></g><g><title>extent_alloc_retained (2 samples, 0.11%)</title><rect x="66.6855%" y="229" width="0.1131%" height="15" fill="rgb(227,73,47)" fg:x="1179" fg:w="2"/><text x="66.9355%" y="239.50"></text></g><g><title>extent_recycle (2 samples, 0.11%)</title><rect x="66.6855%" y="213" width="0.1131%" height="15" fill="rgb(234,9,34)" fg:x="1179" fg:w="2"/><text x="66.9355%" y="223.50"></text></g><g><title>extent_recycle_split (2 samples, 0.11%)</title><rect x="66.6855%" y="197" width="0.1131%" height="15" fill="rgb(235,172,15)" fg:x="1179" fg:w="2"/><text x="66.9355%" y="207.50"></text></g><g><title>extent_split_interior (2 samples, 0.11%)</title><rect x="66.6855%" y="181" width="0.1131%" height="15" fill="rgb(245,61,2)" fg:x="1179" fg:w="2"/><text x="66.9355%" y="191.50"></text></g><g><title>extent_split_impl (2 samples, 0.11%)</title><rect x="66.6855%" y="165" width="0.1131%" height="15" fill="rgb(238,39,47)" fg:x="1179" fg:w="2"/><text x="66.9355%" y="175.50"></text></g><g><title>ehooks_split (1 samples, 0.06%)</title><rect x="66.7421%" y="149" width="0.0566%" height="15" fill="rgb(234,37,24)" fg:x="1180" fg:w="1"/><text x="66.9921%" y="159.50"></text></g><g><title>imalloc_body (10 samples, 0.57%)</title><rect x="66.2896%" y="405" width="0.5656%" height="15" fill="rgb(248,223,24)" fg:x="1172" fg:w="10"/><text x="66.5396%" y="415.50"></text></g><g><title>imalloc_no_sample (10 samples, 0.57%)</title><rect x="66.2896%" y="389" width="0.5656%" height="15" fill="rgb(223,12,15)" fg:x="1172" fg:w="10"/><text x="66.5396%" y="399.50"></text></g><g><title>iallocztm (10 samples, 0.57%)</title><rect x="66.2896%" y="373" width="0.5656%" height="15" fill="rgb(249,6,3)" fg:x="1172" fg:w="10"/><text x="66.5396%" y="383.50"></text></g><g><title>arena_malloc (10 samples, 0.57%)</title><rect x="66.2896%" y="357" width="0.5656%" height="15" fill="rgb(237,105,33)" fg:x="1172" fg:w="10"/><text x="66.5396%" y="367.50"></text></g><g><title>_rjem_je_large_palloc (9 samples, 0.51%)</title><rect x="66.3462%" y="341" width="0.5090%" height="15" fill="rgb(252,208,35)" fg:x="1173" fg:w="9"/><text x="66.5962%" y="351.50"></text></g><g><title>_rjem_je_arena_extent_alloc_large (9 samples, 0.51%)</title><rect x="66.3462%" y="325" width="0.5090%" height="15" fill="rgb(215,181,35)" fg:x="1173" fg:w="9"/><text x="66.5962%" y="335.50"></text></g><g><title>san_large_extent_decide_guard (1 samples, 0.06%)</title><rect x="66.7986%" y="309" width="0.0566%" height="15" fill="rgb(246,212,3)" fg:x="1181" fg:w="1"/><text x="67.0486%" y="319.50"></text></g><g><title>std::sys::unix::fs::readdir (13 samples, 0.74%)</title><rect x="66.1765%" y="517" width="0.7353%" height="15" fill="rgb(247,156,24)" fg:x="1170" fg:w="13"/><text x="66.4265%" y="527.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (12 samples, 0.68%)</title><rect x="66.2330%" y="501" width="0.6787%" height="15" fill="rgb(248,9,31)" fg:x="1171" fg:w="12"/><text x="66.4830%" y="511.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (12 samples, 0.68%)</title><rect x="66.2330%" y="485" width="0.6787%" height="15" fill="rgb(234,26,45)" fg:x="1171" fg:w="12"/><text x="66.4830%" y="495.50"></text></g><g><title>std::sys::unix::fs::readdir::{{closure}} (12 samples, 0.68%)</title><rect x="66.2330%" y="469" width="0.6787%" height="15" fill="rgb(249,11,32)" fg:x="1171" fg:w="12"/><text x="66.4830%" y="479.50"></text></g><g><title>opendir (12 samples, 0.68%)</title><rect x="66.2330%" y="453" width="0.6787%" height="15" fill="rgb(249,162,33)" fg:x="1171" fg:w="12"/><text x="66.4830%" y="463.50"></text></g><g><title>_rjem_je_malloc_default (11 samples, 0.62%)</title><rect x="66.2896%" y="437" width="0.6222%" height="15" fill="rgb(232,4,32)" fg:x="1172" fg:w="11"/><text x="66.5396%" y="447.50"></text></g><g><title>imalloc (11 samples, 0.62%)</title><rect x="66.2896%" y="421" width="0.6222%" height="15" fill="rgb(212,5,45)" fg:x="1172" fg:w="11"/><text x="66.5396%" y="431.50"></text></g><g><title>tsd_fetch (1 samples, 0.06%)</title><rect x="66.8552%" y="405" width="0.0566%" height="15" fill="rgb(227,95,13)" fg:x="1182" fg:w="1"/><text x="67.1052%" y="415.50"></text></g><g><title>tsd_fetch_impl (1 samples, 0.06%)</title><rect x="66.8552%" y="389" width="0.0566%" height="15" fill="rgb(223,205,10)" fg:x="1182" fg:w="1"/><text x="67.1052%" y="399.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_string (2 samples, 0.11%)</title><rect x="66.9118%" y="501" width="0.1131%" height="15" fill="rgb(222,178,8)" fg:x="1183" fg:w="2"/><text x="67.1618%" y="511.50"></text></g><g><title>std::io::default_read_to_string (2 samples, 0.11%)</title><rect x="66.9118%" y="485" width="0.1131%" height="15" fill="rgb(216,13,22)" fg:x="1183" fg:w="2"/><text x="67.1618%" y="495.50"></text></g><g><title>std::io::append_to_string (2 samples, 0.11%)</title><rect x="66.9118%" y="469" width="0.1131%" height="15" fill="rgb(240,167,12)" fg:x="1183" fg:w="2"/><text x="67.1618%" y="479.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="66.9683%" y="453" width="0.0566%" height="15" fill="rgb(235,68,35)" fg:x="1184" fg:w="1"/><text x="67.2183%" y="463.50"></text></g><g><title>core::str::validations::run_utf8_validation (1 samples, 0.06%)</title><rect x="66.9683%" y="437" width="0.0566%" height="15" fill="rgb(253,40,27)" fg:x="1184" fg:w="1"/><text x="67.2183%" y="447.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="67.0249%" y="421" width="0.0566%" height="15" fill="rgb(214,19,28)" fg:x="1185" fg:w="1"/><text x="67.2749%" y="431.50"></text></g><g><title>tcache_event (1 samples, 0.06%)</title><rect x="67.0249%" y="405" width="0.0566%" height="15" fill="rgb(210,167,45)" fg:x="1185" fg:w="1"/><text x="67.2749%" y="415.50"></text></g><g><title>_rjem_je_malloc_default (2 samples, 0.11%)</title><rect x="67.0249%" y="501" width="0.1131%" height="15" fill="rgb(232,97,40)" fg:x="1185" fg:w="2"/><text x="67.2749%" y="511.50"></text></g><g><title>imalloc (2 samples, 0.11%)</title><rect x="67.0249%" y="485" width="0.1131%" height="15" fill="rgb(250,35,23)" fg:x="1185" fg:w="2"/><text x="67.2749%" y="495.50"></text></g><g><title>imalloc_body (2 samples, 0.11%)</title><rect x="67.0249%" y="469" width="0.1131%" height="15" fill="rgb(248,47,53)" fg:x="1185" fg:w="2"/><text x="67.2749%" y="479.50"></text></g><g><title>thread_alloc_event (2 samples, 0.11%)</title><rect x="67.0249%" y="453" width="0.1131%" height="15" fill="rgb(226,58,50)" fg:x="1185" fg:w="2"/><text x="67.2749%" y="463.50"></text></g><g><title>te_event_advance (2 samples, 0.11%)</title><rect x="67.0249%" y="437" width="0.1131%" height="15" fill="rgb(217,105,26)" fg:x="1185" fg:w="2"/><text x="67.2749%" y="447.50"></text></g><g><title>te_init (1 samples, 0.06%)</title><rect x="67.0814%" y="421" width="0.0566%" height="15" fill="rgb(208,64,1)" fg:x="1186" fg:w="1"/><text x="67.3314%" y="431.50"></text></g><g><title>&lt;sysinfo::linux::system::System as sysinfo::traits::SystemExt&gt;::refresh_disks_list (65 samples, 3.68%)</title><rect x="63.5181%" y="533" width="3.6765%" height="15" fill="rgb(214,80,1)" fg:x="1123" fg:w="65"/><text x="63.7681%" y="543.50">&lt;sys..</text></g><g><title>sysinfo::linux::utils::get_all_data_from_file (5 samples, 0.28%)</title><rect x="66.9118%" y="517" width="0.2828%" height="15" fill="rgb(206,175,26)" fg:x="1183" fg:w="5"/><text x="67.1618%" y="527.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="67.1380%" y="501" width="0.0566%" height="15" fill="rgb(235,156,37)" fg:x="1187" fg:w="1"/><text x="67.3880%" y="511.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (2 samples, 0.11%)</title><rect x="67.3077%" y="517" width="0.1131%" height="15" fill="rgb(213,100,9)" fg:x="1190" fg:w="2"/><text x="67.5577%" y="527.50"></text></g><g><title>&lt;sysinfo::linux::system::System as sysinfo::traits::SystemExt&gt;::refresh_memory (5 samples, 0.28%)</title><rect x="67.1946%" y="533" width="0.2828%" height="15" fill="rgb(241,15,13)" fg:x="1188" fg:w="5"/><text x="67.4446%" y="543.50"></text></g><g><title>sysinfo::linux::utils::get_all_data_from_file (1 samples, 0.06%)</title><rect x="67.4208%" y="517" width="0.0566%" height="15" fill="rgb(205,97,43)" fg:x="1192" fg:w="1"/><text x="67.6708%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.17%)</title><rect x="67.4774%" y="533" width="0.1697%" height="15" fill="rgb(216,106,32)" fg:x="1193" fg:w="3"/><text x="67.7274%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="67.5905%" y="517" width="0.0566%" height="15" fill="rgb(226,200,8)" fg:x="1195" fg:w="1"/><text x="67.8405%" y="527.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="67.5905%" y="501" width="0.0566%" height="15" fill="rgb(244,54,29)" fg:x="1195" fg:w="1"/><text x="67.8405%" y="511.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="67.5905%" y="485" width="0.0566%" height="15" fill="rgb(252,169,12)" fg:x="1195" fg:w="1"/><text x="67.8405%" y="495.50"></text></g><g><title>bytes::bytes::promotable_even_drop (2 samples, 0.11%)</title><rect x="67.6471%" y="533" width="0.1131%" height="15" fill="rgb(231,199,11)" fg:x="1196" fg:w="2"/><text x="67.8971%" y="543.50"></text></g><g><title>bytes::bytes::shared_drop (1 samples, 0.06%)</title><rect x="67.7602%" y="533" width="0.0566%" height="15" fill="rgb(233,191,18)" fg:x="1198" fg:w="1"/><text x="68.0102%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (1 samples, 0.06%)</title><rect x="67.8167%" y="533" width="0.0566%" height="15" fill="rgb(215,83,47)" fg:x="1199" fg:w="1"/><text x="68.0667%" y="543.50"></text></g><g><title>&lt;client::request::Request as core::clone::Clone&gt;::clone (1 samples, 0.06%)</title><rect x="68.1561%" y="517" width="0.0566%" height="15" fill="rgb(251,67,19)" fg:x="1205" fg:w="1"/><text x="68.4061%" y="527.50"></text></g><g><title>&lt;str as std::net::socket_addr::ToSocketAddrs&gt;::to_socket_addrs (1 samples, 0.06%)</title><rect x="68.2127%" y="517" width="0.0566%" height="15" fill="rgb(240,7,20)" fg:x="1206" fg:w="1"/><text x="68.4627%" y="527.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (1 samples, 0.06%)</title><rect x="68.2692%" y="517" width="0.0566%" height="15" fill="rgb(210,150,26)" fg:x="1207" fg:w="1"/><text x="68.5192%" y="527.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.06%)</title><rect x="68.2692%" y="501" width="0.0566%" height="15" fill="rgb(228,75,42)" fg:x="1207" fg:w="1"/><text x="68.5192%" y="511.50"></text></g><g><title>tokio::runtime::time::wheel::level::Level::add_entry (1 samples, 0.06%)</title><rect x="68.2692%" y="485" width="0.0566%" height="15" fill="rgb(237,134,48)" fg:x="1207" fg:w="1"/><text x="68.5192%" y="495.50"></text></g><g><title>client::composite_session::CompositeSession::refresh_sessions::{{closure}} (2 samples, 0.11%)</title><rect x="68.3258%" y="517" width="0.1131%" height="15" fill="rgb(205,80,50)" fg:x="1208" fg:w="2"/><text x="68.5758%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::contains_key (2 samples, 0.11%)</title><rect x="68.3258%" y="501" width="0.1131%" height="15" fill="rgb(217,74,48)" fg:x="1208" fg:w="2"/><text x="68.5758%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.11%)</title><rect x="68.3258%" y="485" width="0.1131%" height="15" fill="rgb(205,82,50)" fg:x="1208" fg:w="2"/><text x="68.5758%" y="495.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="68.3824%" y="469" width="0.0566%" height="15" fill="rgb(228,1,33)" fg:x="1209" fg:w="1"/><text x="68.6324%" y="479.50"></text></g><g><title>iralloct (3 samples, 0.17%)</title><rect x="68.5520%" y="405" width="0.1697%" height="15" fill="rgb(214,50,23)" fg:x="1212" fg:w="3"/><text x="68.8020%" y="415.50"></text></g><g><title>_rjem_je_arena_ralloc (3 samples, 0.17%)</title><rect x="68.5520%" y="389" width="0.1697%" height="15" fill="rgb(210,62,9)" fg:x="1212" fg:w="3"/><text x="68.8020%" y="399.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::create_byte_string (5 samples, 0.28%)</title><rect x="68.5520%" y="485" width="0.2828%" height="15" fill="rgb(210,104,37)" fg:x="1212" fg:w="5"/><text x="68.8020%" y="495.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.1731 (5 samples, 0.28%)</title><rect x="68.5520%" y="469" width="0.2828%" height="15" fill="rgb(232,104,43)" fg:x="1212" fg:w="5"/><text x="68.8020%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.28%)</title><rect x="68.5520%" y="453" width="0.2828%" height="15" fill="rgb(244,52,6)" fg:x="1212" fg:w="5"/><text x="68.8020%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.28%)</title><rect x="68.5520%" y="437" width="0.2828%" height="15" fill="rgb(211,174,52)" fg:x="1212" fg:w="5"/><text x="68.8020%" y="447.50"></text></g><g><title>do_rallocx (5 samples, 0.28%)</title><rect x="68.5520%" y="421" width="0.2828%" height="15" fill="rgb(229,48,4)" fg:x="1212" fg:w="5"/><text x="68.8020%" y="431.50"></text></g><g><title>zero_get (2 samples, 0.11%)</title><rect x="68.7217%" y="405" width="0.1131%" height="15" fill="rgb(205,155,16)" fg:x="1215" fg:w="2"/><text x="68.9717%" y="415.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (1 samples, 0.06%)</title><rect x="68.8348%" y="485" width="0.0566%" height="15" fill="rgb(211,141,53)" fg:x="1217" fg:w="1"/><text x="69.0848%" y="495.50"></text></g><g><title>model::range_server::&lt;impl core::convert::From&lt;&amp;model::range_server::RangeServer&gt; for protocol::rpc::header::RangeServerT&gt;::from (2 samples, 0.11%)</title><rect x="68.8914%" y="485" width="0.1131%" height="15" fill="rgb(240,148,11)" fg:x="1218" fg:w="2"/><text x="69.1414%" y="495.50"></text></g><g><title>protocol::rpc::header::RangeServer::create (3 samples, 0.17%)</title><rect x="69.0045%" y="485" width="0.1697%" height="15" fill="rgb(214,45,23)" fg:x="1220" fg:w="3"/><text x="69.2545%" y="495.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (3 samples, 0.17%)</title><rect x="69.0045%" y="469" width="0.1697%" height="15" fill="rgb(248,74,26)" fg:x="1220" fg:w="3"/><text x="69.2545%" y="479.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.676 (2 samples, 0.11%)</title><rect x="69.0611%" y="453" width="0.1131%" height="15" fill="rgb(218,121,16)" fg:x="1221" fg:w="2"/><text x="69.3111%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="69.1176%" y="437" width="0.0566%" height="15" fill="rgb(218,10,47)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="447.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="69.1176%" y="421" width="0.0566%" height="15" fill="rgb(227,99,14)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="431.50"></text></g><g><title>do_rallocx (1 samples, 0.06%)</title><rect x="69.1176%" y="405" width="0.0566%" height="15" fill="rgb(229,83,46)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="415.50"></text></g><g><title>iralloct (1 samples, 0.06%)</title><rect x="69.1176%" y="389" width="0.0566%" height="15" fill="rgb(228,25,1)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="399.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.06%)</title><rect x="69.1176%" y="373" width="0.0566%" height="15" fill="rgb(252,190,15)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="383.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.06%)</title><rect x="69.1176%" y="357" width="0.0566%" height="15" fill="rgb(213,103,51)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="367.50"></text></g><g><title>sz_s2u (1 samples, 0.06%)</title><rect x="69.1176%" y="341" width="0.0566%" height="15" fill="rgb(220,38,44)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="351.50"></text></g><g><title>sz_s2u_lookup (1 samples, 0.06%)</title><rect x="69.1176%" y="325" width="0.0566%" height="15" fill="rgb(210,45,26)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="335.50"></text></g><g><title>sz_size2index_lookup (1 samples, 0.06%)</title><rect x="69.1176%" y="309" width="0.0566%" height="15" fill="rgb(205,95,48)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="319.50"></text></g><g><title>sz_size2index_lookup_impl (1 samples, 0.06%)</title><rect x="69.1176%" y="293" width="0.0566%" height="15" fill="rgb(225,179,37)" fg:x="1222" fg:w="1"/><text x="69.3676%" y="303.50"></text></g><g><title>client::request::&lt;impl core::convert::From&lt;&amp;client::request::Request&gt; for bytes::bytes::Bytes&gt;::from (14 samples, 0.79%)</title><rect x="68.4955%" y="501" width="0.7919%" height="15" fill="rgb(230,209,3)" fg:x="1211" fg:w="14"/><text x="68.7455%" y="511.50"></text></g><g><title>sdallocx (2 samples, 0.11%)</title><rect x="69.1742%" y="485" width="0.1131%" height="15" fill="rgb(248,12,46)" fg:x="1223" fg:w="2"/><text x="69.4242%" y="495.50"></text></g><g><title>free_fastpath (1 samples, 0.06%)</title><rect x="69.2308%" y="469" width="0.0566%" height="15" fill="rgb(234,18,0)" fg:x="1224" fg:w="1"/><text x="69.4808%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="69.2873%" y="501" width="0.0566%" height="15" fill="rgb(238,197,14)" fg:x="1225" fg:w="1"/><text x="69.5373%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="69.3439%" y="485" width="0.0566%" height="15" fill="rgb(251,162,48)" fg:x="1226" fg:w="1"/><text x="69.5939%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="69.3439%" y="469" width="0.0566%" height="15" fill="rgb(237,73,42)" fg:x="1226" fg:w="1"/><text x="69.5939%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="69.3439%" y="453" width="0.0566%" height="15" fill="rgb(211,108,8)" fg:x="1226" fg:w="1"/><text x="69.5939%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="69.3439%" y="437" width="0.0566%" height="15" fill="rgb(213,45,22)" fg:x="1226" fg:w="1"/><text x="69.5939%" y="447.50"></text></g><g><title>client::session::Session::write::{{closure}} (18 samples, 1.02%)</title><rect x="68.4389%" y="517" width="1.0181%" height="15" fill="rgb(252,154,5)" fg:x="1210" fg:w="18"/><text x="68.6889%" y="527.50"></text></g><g><title>transport::connection::Connection::write_frame::{{closure}} (2 samples, 0.11%)</title><rect x="69.3439%" y="501" width="0.1131%" height="15" fill="rgb(221,79,52)" fg:x="1226" fg:w="2"/><text x="69.5939%" y="511.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.06%)</title><rect x="69.4005%" y="485" width="0.0566%" height="15" fill="rgb(229,220,36)" fg:x="1227" fg:w="1"/><text x="69.6505%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="69.4570%" y="517" width="0.0566%" height="15" fill="rgb(211,17,16)" fg:x="1228" fg:w="1"/><text x="69.7070%" y="527.50"></text></g><g><title>client::composite_session::CompositeSession::refresh_placement_driver_cluster::{{closure}} (32 samples, 1.81%)</title><rect x="67.8733%" y="533" width="1.8100%" height="15" fill="rgb(222,55,31)" fg:x="1200" fg:w="32"/><text x="68.1233%" y="543.50">c..</text></g><g><title>malloc (3 samples, 0.17%)</title><rect x="69.5136%" y="517" width="0.1697%" height="15" fill="rgb(221,221,31)" fg:x="1229" fg:w="3"/><text x="69.7636%" y="527.50"></text></g><g><title>imalloc_fastpath (3 samples, 0.17%)</title><rect x="69.5136%" y="501" width="0.1697%" height="15" fill="rgb(227,168,26)" fg:x="1229" fg:w="3"/><text x="69.7636%" y="511.50"></text></g><g><title>client::composite_session::CompositeSession::try_reconnect::{{closure}} (1 samples, 0.06%)</title><rect x="69.6833%" y="533" width="0.0566%" height="15" fill="rgb(224,139,9)" fg:x="1232" fg:w="1"/><text x="69.9333%" y="543.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push_slot (2 samples, 0.11%)</title><rect x="69.7398%" y="501" width="0.1131%" height="15" fill="rgb(254,172,0)" fg:x="1233" fg:w="2"/><text x="69.9898%" y="511.50"></text></g><g><title>client::request::&lt;impl core::convert::From&lt;&amp;client::request::Request&gt; for bytes::bytes::Bytes&gt;::from (3 samples, 0.17%)</title><rect x="69.7398%" y="517" width="0.1697%" height="15" fill="rgb(235,203,1)" fg:x="1233" fg:w="3"/><text x="69.9898%" y="527.50"></text></g><g><title>protocol::rpc::header::RangeServer::create (1 samples, 0.06%)</title><rect x="69.8529%" y="501" width="0.0566%" height="15" fill="rgb(216,205,24)" fg:x="1235" fg:w="1"/><text x="70.1029%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (1 samples, 0.06%)</title><rect x="69.8529%" y="485" width="0.0566%" height="15" fill="rgb(233,24,6)" fg:x="1235" fg:w="1"/><text x="70.1029%" y="495.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.676 (1 samples, 0.06%)</title><rect x="69.8529%" y="469" width="0.0566%" height="15" fill="rgb(244,110,9)" fg:x="1235" fg:w="1"/><text x="70.1029%" y="479.50"></text></g><g><title>client::session::Session::write::{{closure}} (4 samples, 0.23%)</title><rect x="69.7398%" y="533" width="0.2262%" height="15" fill="rgb(239,222,42)" fg:x="1233" fg:w="4"/><text x="69.9898%" y="543.50"></text></g><g><title>transport::connection::Connection::write_frame::{{closure}} (1 samples, 0.06%)</title><rect x="69.9095%" y="517" width="0.0566%" height="15" fill="rgb(218,145,13)" fg:x="1236" fg:w="1"/><text x="70.1595%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (1 samples, 0.06%)</title><rect x="69.9095%" y="501" width="0.0566%" height="15" fill="rgb(207,69,11)" fg:x="1236" fg:w="1"/><text x="70.1595%" y="511.50"></text></g><g><title>client::session_manager::SessionManager::get_composite_session::{{closure}} (1 samples, 0.06%)</title><rect x="69.9661%" y="533" width="0.0566%" height="15" fill="rgb(220,223,22)" fg:x="1237" fg:w="1"/><text x="70.2161%" y="543.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="69.9661%" y="517" width="0.0566%" height="15" fill="rgb(245,102,5)" fg:x="1237" fg:w="1"/><text x="70.2161%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.06%)</title><rect x="70.0226%" y="533" width="0.0566%" height="15" fill="rgb(211,148,2)" fg:x="1238" fg:w="1"/><text x="70.2726%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;range_server::handler::ServerCall&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="70.0792%" y="533" width="0.0566%" height="15" fill="rgb(241,13,44)" fg:x="1239" fg:w="1"/><text x="70.3292%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;range_server::handler::cmd::Command::apply&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;::{{closure}}&gt; (1 samples, 0.06%)</title><rect x="70.1357%" y="533" width="0.0566%" height="15" fill="rgb(219,137,21)" fg:x="1240" fg:w="1"/><text x="70.3857%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::op::Op&lt;tokio_uring::io::writev::Writev&lt;bytes::bytes::Bytes&gt;&gt;&gt; (2 samples, 0.11%)</title><rect x="70.1923%" y="533" width="0.1131%" height="15" fill="rgb(242,206,5)" fg:x="1241" fg:w="2"/><text x="70.4423%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;transport::connection::Connection::write_frame::{{closure}}&gt; (2 samples, 0.11%)</title><rect x="70.3054%" y="533" width="0.1131%" height="15" fill="rgb(217,114,22)" fg:x="1243" fg:w="2"/><text x="70.5554%" y="543.50"></text></g><g><title>local_sync::mpsc::block::Queue&lt;T&gt;::pop_unchecked (3 samples, 0.17%)</title><rect x="70.4186%" y="533" width="0.1697%" height="15" fill="rgb(253,206,42)" fg:x="1245" fg:w="3"/><text x="70.6686%" y="543.50"></text></g><g><title>local_sync::mpsc::chan::Tx&lt;T,S&gt;::send (9 samples, 0.51%)</title><rect x="70.5882%" y="533" width="0.5090%" height="15" fill="rgb(236,102,18)" fg:x="1248" fg:w="9"/><text x="70.8382%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (4 samples, 0.23%)</title><rect x="70.8710%" y="517" width="0.2262%" height="15" fill="rgb(208,59,49)" fg:x="1253" fg:w="4"/><text x="71.1210%" y="527.50"></text></g><g><title>local_sync::mpsc::unbounded::Rx&lt;T&gt;::recv::{{closure}} (2 samples, 0.11%)</title><rect x="71.0973%" y="533" width="0.1131%" height="15" fill="rgb(215,194,28)" fg:x="1257" fg:w="2"/><text x="71.3473%" y="543.50"></text></g><g><title>local_sync::mpsc::block::Queue&lt;T&gt;::pop_unchecked (1 samples, 0.06%)</title><rect x="71.1538%" y="517" width="0.0566%" height="15" fill="rgb(243,207,11)" fg:x="1258" fg:w="1"/><text x="71.4038%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_ref (1 samples, 0.06%)</title><rect x="71.2104%" y="517" width="0.0566%" height="15" fill="rgb(254,179,35)" fg:x="1259" fg:w="1"/><text x="71.4604%" y="527.50"></text></g><g><title>local_sync::oneshot::Sender&lt;T&gt;::send (2 samples, 0.11%)</title><rect x="71.2104%" y="533" width="0.1131%" height="15" fill="rgb(235,97,3)" fg:x="1259" fg:w="2"/><text x="71.4604%" y="543.50"></text></g><g><title>tokio::task::local::Shared::schedule (1 samples, 0.06%)</title><rect x="71.2670%" y="517" width="0.0566%" height="15" fill="rgb(215,155,33)" fg:x="1260" fg:w="1"/><text x="71.5170%" y="527.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="71.3235%" y="533" width="0.0566%" height="15" fill="rgb(223,128,12)" fg:x="1261" fg:w="1"/><text x="71.5735%" y="543.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="71.3235%" y="517" width="0.0566%" height="15" fill="rgb(208,157,18)" fg:x="1261" fg:w="1"/><text x="71.5735%" y="527.50"></text></g><g><title>arena_slab_alloc (1 samples, 0.06%)</title><rect x="71.6063%" y="357" width="0.0566%" height="15" fill="rgb(249,70,54)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="367.50"></text></g><g><title>_rjem_je_pa_alloc (1 samples, 0.06%)</title><rect x="71.6063%" y="341" width="0.0566%" height="15" fill="rgb(244,118,24)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="351.50"></text></g><g><title>pai_alloc (1 samples, 0.06%)</title><rect x="71.6063%" y="325" width="0.0566%" height="15" fill="rgb(211,54,0)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="335.50"></text></g><g><title>pac_alloc_impl (1 samples, 0.06%)</title><rect x="71.6063%" y="309" width="0.0566%" height="15" fill="rgb(245,137,45)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="319.50"></text></g><g><title>pac_alloc_real (1 samples, 0.06%)</title><rect x="71.6063%" y="293" width="0.0566%" height="15" fill="rgb(232,154,31)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="303.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.06%)</title><rect x="71.6063%" y="277" width="0.0566%" height="15" fill="rgb(253,6,39)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="287.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="71.6063%" y="261" width="0.0566%" height="15" fill="rgb(234,183,24)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="271.50"></text></g><g><title>extent_recycle_extract (1 samples, 0.06%)</title><rect x="71.6063%" y="245" width="0.0566%" height="15" fill="rgb(252,84,40)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="255.50"></text></g><g><title>_rjem_je_eset_fit (1 samples, 0.06%)</title><rect x="71.6063%" y="229" width="0.0566%" height="15" fill="rgb(224,65,2)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="239.50"></text></g><g><title>eset_first_fit (1 samples, 0.06%)</title><rect x="71.6063%" y="213" width="0.0566%" height="15" fill="rgb(229,38,24)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="223.50"></text></g><g><title>_rjem_je_edata_heap_first (1 samples, 0.06%)</title><rect x="71.6063%" y="197" width="0.0566%" height="15" fill="rgb(218,131,50)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="207.50"></text></g><g><title>ph_first (1 samples, 0.06%)</title><rect x="71.6063%" y="181" width="0.0566%" height="15" fill="rgb(233,106,18)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="191.50"></text></g><g><title>ph_merge_aux (1 samples, 0.06%)</title><rect x="71.6063%" y="165" width="0.0566%" height="15" fill="rgb(220,216,11)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="175.50"></text></g><g><title>phn_next_get (1 samples, 0.06%)</title><rect x="71.6063%" y="149" width="0.0566%" height="15" fill="rgb(251,100,45)" fg:x="1266" fg:w="1"/><text x="71.8563%" y="159.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (3 samples, 0.17%)</title><rect x="71.6063%" y="389" width="0.1697%" height="15" fill="rgb(235,143,32)" fg:x="1266" fg:w="3"/><text x="71.8563%" y="399.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (3 samples, 0.17%)</title><rect x="71.6063%" y="373" width="0.1697%" height="15" fill="rgb(248,124,34)" fg:x="1266" fg:w="3"/><text x="71.8563%" y="383.50"></text></g><g><title>edata_nfree_get (2 samples, 0.11%)</title><rect x="71.6629%" y="357" width="0.1131%" height="15" fill="rgb(225,221,4)" fg:x="1267" fg:w="2"/><text x="71.9129%" y="367.50"></text></g><g><title>imalloc_no_sample (7 samples, 0.40%)</title><rect x="71.6063%" y="485" width="0.3959%" height="15" fill="rgb(242,27,43)" fg:x="1266" fg:w="7"/><text x="71.8563%" y="495.50"></text></g><g><title>ipalloct (7 samples, 0.40%)</title><rect x="71.6063%" y="469" width="0.3959%" height="15" fill="rgb(227,54,8)" fg:x="1266" fg:w="7"/><text x="71.8563%" y="479.50"></text></g><g><title>ipallocztm (7 samples, 0.40%)</title><rect x="71.6063%" y="453" width="0.3959%" height="15" fill="rgb(253,139,49)" fg:x="1266" fg:w="7"/><text x="71.8563%" y="463.50"></text></g><g><title>_rjem_je_arena_palloc (7 samples, 0.40%)</title><rect x="71.6063%" y="437" width="0.3959%" height="15" fill="rgb(231,26,43)" fg:x="1266" fg:w="7"/><text x="71.8563%" y="447.50"></text></g><g><title>arena_malloc (7 samples, 0.40%)</title><rect x="71.6063%" y="421" width="0.3959%" height="15" fill="rgb(207,121,39)" fg:x="1266" fg:w="7"/><text x="71.8563%" y="431.50"></text></g><g><title>tcache_alloc_small (7 samples, 0.40%)</title><rect x="71.6063%" y="405" width="0.3959%" height="15" fill="rgb(223,101,35)" fg:x="1266" fg:w="7"/><text x="71.8563%" y="415.50"></text></g><g><title>cache_bin_alloc (4 samples, 0.23%)</title><rect x="71.7760%" y="389" width="0.2262%" height="15" fill="rgb(232,87,23)" fg:x="1269" fg:w="4"/><text x="72.0260%" y="399.50"></text></g><g><title>cache_bin_alloc_impl (4 samples, 0.23%)</title><rect x="71.7760%" y="373" width="0.2262%" height="15" fill="rgb(225,180,29)" fg:x="1269" fg:w="4"/><text x="72.0260%" y="383.50"></text></g><g><title>mallocx (12 samples, 0.68%)</title><rect x="71.3801%" y="533" width="0.6787%" height="15" fill="rgb(225,25,17)" fg:x="1262" fg:w="12"/><text x="71.6301%" y="543.50"></text></g><g><title>imalloc (8 samples, 0.45%)</title><rect x="71.6063%" y="517" width="0.4525%" height="15" fill="rgb(223,8,52)" fg:x="1266" fg:w="8"/><text x="71.8563%" y="527.50"></text></g><g><title>imalloc_body (8 samples, 0.45%)</title><rect x="71.6063%" y="501" width="0.4525%" height="15" fill="rgb(246,42,21)" fg:x="1266" fg:w="8"/><text x="71.8563%" y="511.50"></text></g><g><title>thread_alloc_event (1 samples, 0.06%)</title><rect x="72.0023%" y="485" width="0.0566%" height="15" fill="rgb(205,64,43)" fg:x="1273" fg:w="1"/><text x="72.2523%" y="495.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="72.0023%" y="469" width="0.0566%" height="15" fill="rgb(221,160,13)" fg:x="1273" fg:w="1"/><text x="72.2523%" y="479.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="72.0023%" y="453" width="0.0566%" height="15" fill="rgb(239,58,35)" fg:x="1273" fg:w="1"/><text x="72.2523%" y="463.50"></text></g><g><title>te_adjust_thresholds_helper (1 samples, 0.06%)</title><rect x="72.0023%" y="437" width="0.0566%" height="15" fill="rgb(251,26,40)" fg:x="1273" fg:w="1"/><text x="72.2523%" y="447.50"></text></g><g><title>te_ctx_next_event_set (1 samples, 0.06%)</title><rect x="72.0023%" y="421" width="0.0566%" height="15" fill="rgb(247,0,4)" fg:x="1273" fg:w="1"/><text x="72.2523%" y="431.50"></text></g><g><title>_rjem_je_te_recompute_fast_threshold (1 samples, 0.06%)</title><rect x="72.0023%" y="405" width="0.0566%" height="15" fill="rgb(218,130,10)" fg:x="1273" fg:w="1"/><text x="72.2523%" y="415.50"></text></g><g><title>_rjem_je_te_recompute_fast_threshold (1 samples, 0.06%)</title><rect x="72.0023%" y="389" width="0.0566%" height="15" fill="rgb(239,32,7)" fg:x="1273" fg:w="1"/><text x="72.2523%" y="399.50"></text></g><g><title>atomic_fence (1 samples, 0.06%)</title><rect x="72.0023%" y="373" width="0.0566%" height="15" fill="rgb(210,192,24)" fg:x="1273" fg:w="1"/><text x="72.2523%" y="383.50"></text></g><g><title>ordered_multimap::list_ordered_multimap::hash_key (1 samples, 0.06%)</title><rect x="72.0588%" y="533" width="0.0566%" height="15" fill="rgb(226,212,17)" fg:x="1274" fg:w="1"/><text x="72.3088%" y="543.50"></text></g><g><title>range_server::connection_tracker::ConnectionTracker::remove (1 samples, 0.06%)</title><rect x="72.1154%" y="533" width="0.0566%" height="15" fill="rgb(219,201,28)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="543.50"></text></g><g><title>&lt;log4rs::Logger as log::Log&gt;::log (1 samples, 0.06%)</title><rect x="72.1154%" y="517" width="0.0566%" height="15" fill="rgb(235,207,41)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="527.50"></text></g><g><title>&lt;log4rs::append::rolling_file::RollingFileAppender as log4rs::append::Append&gt;::append (1 samples, 0.06%)</title><rect x="72.1154%" y="501" width="0.0566%" height="15" fill="rgb(241,95,54)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="511.50"></text></g><g><title>&lt;log4rs::encode::pattern::PatternEncoder as log4rs::encode::Encode&gt;::encode (1 samples, 0.06%)</title><rect x="72.1154%" y="485" width="0.0566%" height="15" fill="rgb(248,12,23)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="495.50"></text></g><g><title>log4rs::encode::pattern::FormattedChunk::encode (1 samples, 0.06%)</title><rect x="72.1154%" y="469" width="0.0566%" height="15" fill="rgb(228,173,4)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="479.50"></text></g><g><title>std::io::Write::write_fmt (1 samples, 0.06%)</title><rect x="72.1154%" y="453" width="0.0566%" height="15" fill="rgb(254,99,5)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="463.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="72.1154%" y="437" width="0.0566%" height="15" fill="rgb(212,184,17)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="447.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.06%)</title><rect x="72.1154%" y="421" width="0.0566%" height="15" fill="rgb(252,174,1)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="431.50"></text></g><g><title>&lt;chrono::format::DelayedFormat&lt;I&gt; as core::fmt::Display&gt;::fmt (1 samples, 0.06%)</title><rect x="72.1154%" y="405" width="0.0566%" height="15" fill="rgb(241,118,51)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="415.50"></text></g><g><title>chrono::format::format_inner (1 samples, 0.06%)</title><rect x="72.1154%" y="389" width="0.0566%" height="15" fill="rgb(227,94,47)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="399.50"></text></g><g><title>chrono::format::format_inner::{{closure}} (1 samples, 0.06%)</title><rect x="72.1154%" y="373" width="0.0566%" height="15" fill="rgb(229,104,2)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="383.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="72.1154%" y="357" width="0.0566%" height="15" fill="rgb(219,28,31)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="367.50"></text></g><g><title>core::fmt::run (1 samples, 0.06%)</title><rect x="72.1154%" y="341" width="0.0566%" height="15" fill="rgb(233,109,36)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="351.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.06%)</title><rect x="72.1154%" y="325" width="0.0566%" height="15" fill="rgb(246,88,11)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="335.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u32&gt;::fmt (1 samples, 0.06%)</title><rect x="72.1154%" y="309" width="0.0566%" height="15" fill="rgb(209,212,17)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="319.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.06%)</title><rect x="72.1154%" y="293" width="0.0566%" height="15" fill="rgb(243,59,29)" fg:x="1275" fg:w="1"/><text x="72.3654%" y="303.50"></text></g><g><title>&lt;observation::metrics::store_metrics::START_TIME as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="75.9615%" y="469" width="0.0566%" height="15" fill="rgb(244,205,48)" fg:x="1343" fg:w="1"/><text x="76.2115%" y="479.50"></text></g><g><title>&lt;observation::metrics::store_metrics::STORE_APPEND_COUNT as core::ops::deref::Deref&gt;::deref (1 samples, 0.06%)</title><rect x="76.0181%" y="469" width="0.0566%" height="15" fill="rgb(227,30,6)" fg:x="1344" fg:w="1"/><text x="76.2681%" y="479.50"></text></g><g><title>__floattidf (1 samples, 0.06%)</title><rect x="76.0747%" y="469" width="0.0566%" height="15" fill="rgb(220,205,48)" fg:x="1345" fg:w="1"/><text x="76.3247%" y="479.50"></text></g><g><title>compiler_builtins::float::conv::__floattidf (1 samples, 0.06%)</title><rect x="76.0747%" y="453" width="0.0566%" height="15" fill="rgb(250,94,14)" fg:x="1345" fg:w="1"/><text x="76.3247%" y="463.50"></text></g><g><title>compiler_builtins::float::conv::int_to_float::u128_to_f64_bits (1 samples, 0.06%)</title><rect x="76.0747%" y="437" width="0.0566%" height="15" fill="rgb(216,119,42)" fg:x="1345" fg:w="1"/><text x="76.3247%" y="447.50"></text></g><g><title>core::num::&lt;impl u128&gt;::wrapping_shl (1 samples, 0.06%)</title><rect x="76.0747%" y="421" width="0.0566%" height="15" fill="rgb(232,155,0)" fg:x="1345" fg:w="1"/><text x="76.3247%" y="431.50"></text></g><g><title>core::num::&lt;impl u128&gt;::unchecked_shl (1 samples, 0.06%)</title><rect x="76.0747%" y="405" width="0.0566%" height="15" fill="rgb(212,24,32)" fg:x="1345" fg:w="1"/><text x="76.3247%" y="415.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify.3940 (6 samples, 0.34%)</title><rect x="76.1312%" y="469" width="0.3394%" height="15" fill="rgb(216,69,20)" fg:x="1346" fg:w="6"/><text x="76.3812%" y="479.50"></text></g><g><title>sdallocx (2 samples, 0.11%)</title><rect x="76.4706%" y="469" width="0.1131%" height="15" fill="rgb(229,73,31)" fg:x="1352" fg:w="2"/><text x="76.7206%" y="479.50"></text></g><g><title>free_fastpath (2 samples, 0.11%)</title><rect x="76.4706%" y="453" width="0.1131%" height="15" fill="rgb(224,219,20)" fg:x="1352" fg:w="2"/><text x="76.7206%" y="463.50"></text></g><g><title>tokio::runtime::coop::poll_proceed.1391 (2 samples, 0.11%)</title><rect x="76.5837%" y="469" width="0.1131%" height="15" fill="rgb(215,146,41)" fg:x="1354" fg:w="2"/><text x="76.8337%" y="479.50"></text></g><g><title>&lt;store::store::elastic_store::ElasticStore as store::Store&gt;::append::{{closure}} (32 samples, 1.81%)</title><rect x="74.9434%" y="485" width="1.8100%" height="15" fill="rgb(244,71,31)" fg:x="1325" fg:w="32"/><text x="75.1934%" y="495.50">&lt;..</text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.06%)</title><rect x="76.6968%" y="469" width="0.0566%" height="15" fill="rgb(224,24,11)" fg:x="1356" fg:w="1"/><text x="76.9468%" y="479.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="76.7534%" y="485" width="0.0566%" height="15" fill="rgb(229,76,15)" fg:x="1357" fg:w="1"/><text x="77.0034%" y="495.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.06%)</title><rect x="76.7534%" y="469" width="0.0566%" height="15" fill="rgb(209,93,2)" fg:x="1357" fg:w="1"/><text x="77.0034%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::join_all::JoinAll&lt;&lt;store::store::elastic_store::ElasticStore as store::Store&gt;::append::{{closure}}&gt;&gt; (2 samples, 0.11%)</title><rect x="76.8100%" y="485" width="0.1131%" height="15" fill="rgb(216,200,50)" fg:x="1358" fg:w="2"/><text x="77.0600%" y="495.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="76.9231%" y="485" width="0.0566%" height="15" fill="rgb(211,67,34)" fg:x="1360" fg:w="1"/><text x="77.1731%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="76.9231%" y="469" width="0.0566%" height="15" fill="rgb(225,87,47)" fg:x="1360" fg:w="1"/><text x="77.1731%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="76.9231%" y="453" width="0.0566%" height="15" fill="rgb(217,185,16)" fg:x="1360" fg:w="1"/><text x="77.1731%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="76.9231%" y="437" width="0.0566%" height="15" fill="rgb(205,0,0)" fg:x="1360" fg:w="1"/><text x="77.1731%" y="447.50"></text></g><g><title>sdallocx (1 samples, 0.06%)</title><rect x="76.9796%" y="485" width="0.0566%" height="15" fill="rgb(207,116,45)" fg:x="1361" fg:w="1"/><text x="77.2296%" y="495.50"></text></g><g><title>free_fastpath (1 samples, 0.06%)</title><rect x="76.9796%" y="469" width="0.0566%" height="15" fill="rgb(221,156,26)" fg:x="1361" fg:w="1"/><text x="77.2296%" y="479.50"></text></g><g><title>&lt;store::store::buffer::store::BufferedStore&lt;S&gt; as store::Store&gt;::append::{{closure}} (61 samples, 3.45%)</title><rect x="74.1516%" y="501" width="3.4502%" height="15" fill="rgb(213,140,4)" fg:x="1311" fg:w="61"/><text x="74.4016%" y="511.50">&lt;st..</text></g><g><title>store::store::buffer::store::StoreBuffer::stream_buffer (10 samples, 0.57%)</title><rect x="77.0362%" y="485" width="0.5656%" height="15" fill="rgb(231,224,15)" fg:x="1362" fg:w="10"/><text x="77.2862%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (7 samples, 0.40%)</title><rect x="77.2059%" y="469" width="0.3959%" height="15" fill="rgb(244,76,20)" fg:x="1365" fg:w="7"/><text x="77.4559%" y="479.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.23%)</title><rect x="77.3756%" y="453" width="0.2262%" height="15" fill="rgb(238,117,7)" fg:x="1368" fg:w="4"/><text x="77.6256%" y="463.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.23%)</title><rect x="77.6018%" y="501" width="0.2262%" height="15" fill="rgb(235,1,10)" fg:x="1372" fg:w="4"/><text x="77.8518%" y="511.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.11%)</title><rect x="77.7149%" y="485" width="0.1131%" height="15" fill="rgb(216,165,6)" fg:x="1374" fg:w="2"/><text x="77.9649%" y="495.50"></text></g><g><title>&lt;core::pin::Pin&lt;P&gt; as core::future::future::Future&gt;::poll (83 samples, 4.69%)</title><rect x="73.4163%" y="517" width="4.6946%" height="15" fill="rgb(246,91,35)" fg:x="1298" fg:w="83"/><text x="73.6663%" y="527.50">&lt;core..</text></g><g><title>range_server::range_manager::window::Window::check_barrier (5 samples, 0.28%)</title><rect x="77.8281%" y="501" width="0.2828%" height="15" fill="rgb(228,96,24)" fg:x="1376" fg:w="5"/><text x="78.0781%" y="511.50"></text></g><g><title>&lt;object_storage::object_storage::AsyncObjectStorage as object_storage::ObjectStorage&gt;::new_commit (6 samples, 0.34%)</title><rect x="78.1109%" y="517" width="0.3394%" height="15" fill="rgb(254,217,53)" fg:x="1381" fg:w="6"/><text x="78.3609%" y="527.50"></text></g><g><title>tokio::util::wake::wake_arc_raw (2 samples, 0.11%)</title><rect x="78.3371%" y="501" width="0.1131%" height="15" fill="rgb(209,60,0)" fg:x="1385" fg:w="2"/><text x="78.5871%" y="511.50"></text></g><g><title>&lt;store::store::buffer::store::BufferedStore&lt;S&gt; as store::Store&gt;::seal::{{closure}} (1 samples, 0.06%)</title><rect x="78.4502%" y="517" width="0.0566%" height="15" fill="rgb(250,93,26)" fg:x="1387" fg:w="1"/><text x="78.7002%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.40%)</title><rect x="78.5068%" y="517" width="0.3959%" height="15" fill="rgb(211,9,40)" fg:x="1388" fg:w="7"/><text x="78.7568%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="78.8462%" y="501" width="0.0566%" height="15" fill="rgb(242,57,20)" fg:x="1394" fg:w="1"/><text x="79.0962%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="78.8462%" y="485" width="0.0566%" height="15" fill="rgb(248,85,48)" fg:x="1394" fg:w="1"/><text x="79.0962%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="78.8462%" y="469" width="0.0566%" height="15" fill="rgb(212,117,2)" fg:x="1394" fg:w="1"/><text x="79.0962%" y="479.50"></text></g><g><title>calloc (2 samples, 0.11%)</title><rect x="78.9027%" y="517" width="0.1131%" height="15" fill="rgb(243,19,3)" fg:x="1395" fg:w="2"/><text x="79.1527%" y="527.50"></text></g><g><title>chrono::offset::utc::Utc::now (5 samples, 0.28%)</title><rect x="79.0158%" y="517" width="0.2828%" height="15" fill="rgb(232,217,24)" fg:x="1397" fg:w="5"/><text x="79.2658%" y="527.50"></text></g><g><title>chrono::naive::internals::cycle_to_yo (1 samples, 0.06%)</title><rect x="79.2421%" y="501" width="0.0566%" height="15" fill="rgb(224,175,40)" fg:x="1401" fg:w="1"/><text x="79.4921%" y="511.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.06%)</title><rect x="79.2986%" y="517" width="0.0566%" height="15" fill="rgb(212,162,32)" fg:x="1402" fg:w="1"/><text x="79.5486%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::rc::Rc&lt;core::cell::UnsafeCell&lt;range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;&gt;&gt; (2 samples, 0.11%)</title><rect x="79.3552%" y="517" width="0.1131%" height="15" fill="rgb(215,9,4)" fg:x="1403" fg:w="2"/><text x="79.6052%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;flatbuffers::builder::FlatBufferBuilder&gt; (1 samples, 0.06%)</title><rect x="79.4683%" y="517" width="0.0566%" height="15" fill="rgb(242,42,7)" fg:x="1405" fg:w="1"/><text x="79.7183%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;futures_util::future::join_all::JoinAll&lt;core::pin::Pin&lt;alloc::boxed::Box&lt;range_server::handler::append::Append::apply&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::manager::DefaultRangeManager&lt;store::store::buffer::store::BufferedStore&lt;store::store::elastic_store::ElasticStore&gt;,range_server::range_manager::fetcher::PlacementClient,object_storage::object_storage::AsyncObjectStorage&gt;&gt;::{{closure}}::{{closure}}::{{closure}}&gt;&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="79.5249%" y="517" width="0.0566%" height="15" fill="rgb(242,184,45)" fg:x="1406" fg:w="1"/><text x="79.7749%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::create_vector (4 samples, 0.23%)</title><rect x="79.5814%" y="517" width="0.2262%" height="15" fill="rgb(228,111,51)" fg:x="1407" fg:w="4"/><text x="79.8314%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.2049 (2 samples, 0.11%)</title><rect x="79.6946%" y="501" width="0.1131%" height="15" fill="rgb(236,147,17)" fg:x="1409" fg:w="2"/><text x="79.9446%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.2049 (1 samples, 0.06%)</title><rect x="79.8077%" y="517" width="0.0566%" height="15" fill="rgb(210,75,22)" fg:x="1411" fg:w="1"/><text x="80.0577%" y="527.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="79.8643%" y="517" width="0.0566%" height="15" fill="rgb(217,159,45)" fg:x="1412" fg:w="1"/><text x="80.1143%" y="527.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="79.8643%" y="501" width="0.0566%" height="15" fill="rgb(245,165,53)" fg:x="1412" fg:w="1"/><text x="80.1143%" y="511.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="79.8643%" y="485" width="0.0566%" height="15" fill="rgb(251,190,50)" fg:x="1412" fg:w="1"/><text x="80.1143%" y="495.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="79.8643%" y="469" width="0.0566%" height="15" fill="rgb(208,203,29)" fg:x="1412" fg:w="1"/><text x="80.1143%" y="479.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push_slot (1 samples, 0.06%)</title><rect x="79.9208%" y="501" width="0.0566%" height="15" fill="rgb(207,209,35)" fg:x="1413" fg:w="1"/><text x="80.1708%" y="511.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (2 samples, 0.11%)</title><rect x="80.5995%" y="389" width="0.1131%" height="15" fill="rgb(230,144,49)" fg:x="1425" fg:w="2"/><text x="80.8495%" y="399.50"></text></g><g><title>protocol::rpc::header::AppendResponse::create (16 samples, 0.90%)</title><rect x="79.9208%" y="517" width="0.9050%" height="15" fill="rgb(229,31,6)" fg:x="1413" fg:w="16"/><text x="80.1708%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (15 samples, 0.85%)</title><rect x="79.9774%" y="501" width="0.8484%" height="15" fill="rgb(251,129,24)" fg:x="1414" fg:w="15"/><text x="80.2274%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::ensure_capacity.676 (15 samples, 0.85%)</title><rect x="79.9774%" y="485" width="0.8484%" height="15" fill="rgb(235,105,15)" fg:x="1414" fg:w="15"/><text x="80.2274%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (13 samples, 0.74%)</title><rect x="80.0905%" y="469" width="0.7353%" height="15" fill="rgb(216,52,43)" fg:x="1416" fg:w="13"/><text x="80.3405%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.62%)</title><rect x="80.2036%" y="453" width="0.6222%" height="15" fill="rgb(238,144,41)" fg:x="1418" fg:w="11"/><text x="80.4536%" y="463.50"></text></g><g><title>do_rallocx (10 samples, 0.57%)</title><rect x="80.2602%" y="437" width="0.5656%" height="15" fill="rgb(243,63,9)" fg:x="1419" fg:w="10"/><text x="80.5102%" y="447.50"></text></g><g><title>iralloct (5 samples, 0.28%)</title><rect x="80.5430%" y="421" width="0.2828%" height="15" fill="rgb(246,208,1)" fg:x="1424" fg:w="5"/><text x="80.7930%" y="431.50"></text></g><g><title>_rjem_je_arena_ralloc (5 samples, 0.28%)</title><rect x="80.5430%" y="405" width="0.2828%" height="15" fill="rgb(233,182,18)" fg:x="1424" fg:w="5"/><text x="80.7930%" y="415.50"></text></g><g><title>_rjem_je_hook_invoke_alloc (2 samples, 0.11%)</title><rect x="80.7127%" y="389" width="0.1131%" height="15" fill="rgb(242,224,8)" fg:x="1427" fg:w="2"/><text x="80.9627%" y="399.50"></text></g><g><title>atomic_load_u (2 samples, 0.11%)</title><rect x="80.7127%" y="373" width="0.1131%" height="15" fill="rgb(243,54,37)" fg:x="1427" fg:w="2"/><text x="80.9627%" y="383.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push (2 samples, 0.11%)</title><rect x="80.9389%" y="501" width="0.1131%" height="15" fill="rgb(233,192,12)" fg:x="1431" fg:w="2"/><text x="81.1889%" y="511.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::push_slot (1 samples, 0.06%)</title><rect x="81.0520%" y="501" width="0.0566%" height="15" fill="rgb(251,192,53)" fg:x="1433" fg:w="1"/><text x="81.3020%" y="511.50"></text></g><g><title>protocol::rpc::header::AppendResultEntry::create (7 samples, 0.40%)</title><rect x="80.8258%" y="517" width="0.3959%" height="15" fill="rgb(246,141,26)" fg:x="1429" fg:w="7"/><text x="81.0758%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::required (2 samples, 0.11%)</title><rect x="81.1086%" y="501" width="0.1131%" height="15" fill="rgb(239,195,19)" fg:x="1434" fg:w="2"/><text x="81.3586%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.06%)</title><rect x="81.2217%" y="501" width="0.0566%" height="15" fill="rgb(241,16,39)" fg:x="1436" fg:w="1"/><text x="81.4717%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="81.2217%" y="485" width="0.0566%" height="15" fill="rgb(223,13,53)" fg:x="1436" fg:w="1"/><text x="81.4717%" y="495.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="81.2217%" y="469" width="0.0566%" height="15" fill="rgb(214,227,0)" fg:x="1436" fg:w="1"/><text x="81.4717%" y="479.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="81.2217%" y="453" width="0.0566%" height="15" fill="rgb(228,103,26)" fg:x="1436" fg:w="1"/><text x="81.4717%" y="463.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="81.2217%" y="437" width="0.0566%" height="15" fill="rgb(254,177,53)" fg:x="1436" fg:w="1"/><text x="81.4717%" y="447.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="81.2217%" y="421" width="0.0566%" height="15" fill="rgb(208,201,34)" fg:x="1436" fg:w="1"/><text x="81.4717%" y="431.50"></text></g><g><title>protocol::rpc::header::Status::create (7 samples, 0.40%)</title><rect x="81.2217%" y="517" width="0.3959%" height="15" fill="rgb(212,39,5)" fg:x="1436" fg:w="7"/><text x="81.4717%" y="527.50"></text></g><g><title>flatbuffers::builder::FlatBufferBuilder::write_vtable (6 samples, 0.34%)</title><rect x="81.2783%" y="501" width="0.3394%" height="15" fill="rgb(246,117,3)" fg:x="1437" fg:w="6"/><text x="81.5283%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (7 samples, 0.40%)</title><rect x="81.9570%" y="501" width="0.3959%" height="15" fill="rgb(244,118,39)" fg:x="1449" fg:w="7"/><text x="82.2070%" y="511.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.23%)</title><rect x="82.1267%" y="485" width="0.2262%" height="15" fill="rgb(241,64,10)" fg:x="1452" fg:w="4"/><text x="82.3767%" y="495.50"></text></g><g><title>malloc (2 samples, 0.11%)</title><rect x="82.2398%" y="469" width="0.1131%" height="15" fill="rgb(229,39,44)" fg:x="1454" fg:w="2"/><text x="82.4898%" y="479.50"></text></g><g><title>imalloc_fastpath (2 samples, 0.11%)</title><rect x="82.2398%" y="453" width="0.1131%" height="15" fill="rgb(230,226,3)" fg:x="1454" fg:w="2"/><text x="82.4898%" y="463.50"></text></g><g><title>range_server::handler::append::Append::build_store_requests (14 samples, 0.79%)</title><rect x="81.6176%" y="517" width="0.7919%" height="15" fill="rgb(222,13,42)" fg:x="1443" fg:w="14"/><text x="81.8676%" y="527.50"></text></g><g><title>model::payload::Payload::parse_append_entry (1 samples, 0.06%)</title><rect x="82.3529%" y="501" width="0.0566%" height="15" fill="rgb(247,180,54)" fg:x="1456" fg:w="1"/><text x="82.6029%" y="511.50"></text></g><g><title>flatbuffers::verifier::Verifier::visit_table.1164 (1 samples, 0.06%)</title><rect x="82.3529%" y="485" width="0.0566%" height="15" fill="rgb(205,96,16)" fg:x="1456" fg:w="1"/><text x="82.6029%" y="495.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_i32 (4 samples, 0.23%)</title><rect x="82.6357%" y="485" width="0.2262%" height="15" fill="rgb(205,100,21)" fg:x="1461" fg:w="4"/><text x="82.8857%" y="495.50"></text></g><g><title>flatbuffers::table::Table::get (2 samples, 0.11%)</title><rect x="82.8620%" y="485" width="0.1131%" height="15" fill="rgb(248,51,4)" fg:x="1465" fg:w="2"/><text x="83.1120%" y="495.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (2 samples, 0.11%)</title><rect x="82.9751%" y="485" width="0.1131%" height="15" fill="rgb(217,197,30)" fg:x="1467" fg:w="2"/><text x="83.2251%" y="495.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::deref (1 samples, 0.06%)</title><rect x="83.0317%" y="469" width="0.0566%" height="15" fill="rgb(240,179,40)" fg:x="1468" fg:w="1"/><text x="83.2817%" y="479.50"></text></g><g><title>range_server::handler::append::Append::replicated (15 samples, 0.85%)</title><rect x="82.4095%" y="517" width="0.8484%" height="15" fill="rgb(212,185,35)" fg:x="1457" fg:w="15"/><text x="82.6595%" y="527.50"></text></g><g><title>model::payload::Payload::parse_append_entry (14 samples, 0.79%)</title><rect x="82.4661%" y="501" width="0.7919%" height="15" fill="rgb(251,222,31)" fg:x="1458" fg:w="14"/><text x="82.7161%" y="511.50"></text></g><g><title>flatbuffers::verifier::Verifier::visit_table.1164 (3 samples, 0.17%)</title><rect x="83.0882%" y="485" width="0.1697%" height="15" fill="rgb(208,140,36)" fg:x="1469" fg:w="3"/><text x="83.3382%" y="495.50"></text></g><g><title>range_server::range_manager::range::Range::commit::{{closure}} (4 samples, 0.23%)</title><rect x="83.2579%" y="517" width="0.2262%" height="15" fill="rgb(220,148,1)" fg:x="1472" fg:w="4"/><text x="83.5079%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::pop_first (1 samples, 0.06%)</title><rect x="83.4276%" y="501" width="0.0566%" height="15" fill="rgb(254,4,28)" fg:x="1475" fg:w="1"/><text x="83.6776%" y="511.50"></text></g><g><title>range_server::range_manager::stream::Stream::create_range (1 samples, 0.06%)</title><rect x="83.4842%" y="517" width="0.0566%" height="15" fill="rgb(222,185,44)" fg:x="1476" fg:w="1"/><text x="83.7342%" y="527.50"></text></g><g><title>range_server::handler::cmd::Command::apply::{{closure}} (202 samples, 11.43%)</title><rect x="72.1719%" y="533" width="11.4253%" height="15" fill="rgb(215,74,39)" fg:x="1276" fg:w="202"/><text x="72.4219%" y="543.50">range_server::han..</text></g><g><title>range_server::range_manager::stream::Stream::seal (1 samples, 0.06%)</title><rect x="83.5407%" y="517" width="0.0566%" height="15" fill="rgb(247,86,4)" fg:x="1477" fg:w="1"/><text x="83.7907%" y="527.50"></text></g><g><title>&lt;log4rs::Logger as log::Log&gt;::log (1 samples, 0.06%)</title><rect x="83.5407%" y="501" width="0.0566%" height="15" fill="rgb(231,105,32)" fg:x="1477" fg:w="1"/><text x="83.7907%" y="511.50"></text></g><g><title>&lt;log4rs::append::rolling_file::RollingFileAppender as log4rs::append::Append&gt;::append (1 samples, 0.06%)</title><rect x="83.5407%" y="485" width="0.0566%" height="15" fill="rgb(222,65,35)" fg:x="1477" fg:w="1"/><text x="83.7907%" y="495.50"></text></g><g><title>&lt;log4rs::encode::pattern::PatternEncoder as log4rs::encode::Encode&gt;::encode (1 samples, 0.06%)</title><rect x="83.5407%" y="469" width="0.0566%" height="15" fill="rgb(218,145,35)" fg:x="1477" fg:w="1"/><text x="83.7907%" y="479.50"></text></g><g><title>log4rs::encode::pattern::Chunk::encode (1 samples, 0.06%)</title><rect x="83.5407%" y="453" width="0.0566%" height="15" fill="rgb(208,7,15)" fg:x="1477" fg:w="1"/><text x="83.7907%" y="463.50"></text></g><g><title>range_server::handler::cmd::Command::from_frame (9 samples, 0.51%)</title><rect x="83.5973%" y="533" width="0.5090%" height="15" fill="rgb(209,83,13)" fg:x="1478" fg:w="9"/><text x="83.8473%" y="543.50"></text></g><g><title>bytes::bytes::promotable_even_clone (5 samples, 0.28%)</title><rect x="83.8235%" y="517" width="0.2828%" height="15" fill="rgb(218,3,10)" fg:x="1482" fg:w="5"/><text x="84.0735%" y="527.50"></text></g><g><title>bytes::bytes::shallow_clone_vec (3 samples, 0.17%)</title><rect x="83.9367%" y="501" width="0.1697%" height="15" fill="rgb(211,219,4)" fg:x="1484" fg:w="3"/><text x="84.1867%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="84.0498%" y="485" width="0.0566%" height="15" fill="rgb(228,194,12)" fg:x="1486" fg:w="1"/><text x="84.2998%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="84.0498%" y="469" width="0.0566%" height="15" fill="rgb(210,175,7)" fg:x="1486" fg:w="1"/><text x="84.2998%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="84.0498%" y="453" width="0.0566%" height="15" fill="rgb(243,132,6)" fg:x="1486" fg:w="1"/><text x="84.2998%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="84.0498%" y="437" width="0.0566%" height="15" fill="rgb(207,72,18)" fg:x="1486" fg:w="1"/><text x="84.2998%" y="447.50"></text></g><g><title>alloc::ffi::c_str::CString::_from_vec_unchecked (1 samples, 0.06%)</title><rect x="84.2195%" y="517" width="0.0566%" height="15" fill="rgb(236,1,18)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::into_boxed_slice (1 samples, 0.06%)</title><rect x="84.2195%" y="501" width="0.0566%" height="15" fill="rgb(227,0,18)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.06%)</title><rect x="84.2195%" y="485" width="0.0566%" height="15" fill="rgb(247,37,5)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (1 samples, 0.06%)</title><rect x="84.2195%" y="469" width="0.0566%" height="15" fill="rgb(237,179,24)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (1 samples, 0.06%)</title><rect x="84.2195%" y="453" width="0.0566%" height="15" fill="rgb(226,53,20)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::shrink (1 samples, 0.06%)</title><rect x="84.2195%" y="437" width="0.0566%" height="15" fill="rgb(247,75,7)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="447.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.06%)</title><rect x="84.2195%" y="421" width="0.0566%" height="15" fill="rgb(233,96,12)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="431.50"></text></g><g><title>do_rallocx (1 samples, 0.06%)</title><rect x="84.2195%" y="405" width="0.0566%" height="15" fill="rgb(224,125,0)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="415.50"></text></g><g><title>iralloct (1 samples, 0.06%)</title><rect x="84.2195%" y="389" width="0.0566%" height="15" fill="rgb(224,92,25)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="399.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.06%)</title><rect x="84.2195%" y="373" width="0.0566%" height="15" fill="rgb(224,42,24)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="383.50"></text></g><g><title>_rjem_je_arena_ralloc_no_move (1 samples, 0.06%)</title><rect x="84.2195%" y="357" width="0.0566%" height="15" fill="rgb(234,132,49)" fg:x="1489" fg:w="1"/><text x="84.4695%" y="367.50"></text></g><g><title>rustix::fs::at::_readlinkat (4 samples, 0.23%)</title><rect x="84.1063%" y="533" width="0.2262%" height="15" fill="rgb(248,100,35)" fg:x="1487" fg:w="4"/><text x="84.3563%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.06%)</title><rect x="84.2760%" y="517" width="0.0566%" height="15" fill="rgb(239,94,40)" fg:x="1490" fg:w="1"/><text x="84.5260%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.06%)</title><rect x="84.2760%" y="501" width="0.0566%" height="15" fill="rgb(235,139,28)" fg:x="1490" fg:w="1"/><text x="84.5260%" y="511.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="84.2760%" y="485" width="0.0566%" height="15" fill="rgb(217,144,7)" fg:x="1490" fg:w="1"/><text x="84.5260%" y="495.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="84.2760%" y="469" width="0.0566%" height="15" fill="rgb(227,55,4)" fg:x="1490" fg:w="1"/><text x="84.5260%" y="479.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="84.2760%" y="453" width="0.0566%" height="15" fill="rgb(252,82,54)" fg:x="1490" fg:w="1"/><text x="84.5260%" y="463.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="84.2760%" y="437" width="0.0566%" height="15" fill="rgb(245,172,4)" fg:x="1490" fg:w="1"/><text x="84.5260%" y="447.50"></text></g><g><title>sdallocx (2 samples, 0.11%)</title><rect x="84.3326%" y="533" width="0.1131%" height="15" fill="rgb(207,26,27)" fg:x="1491" fg:w="2"/><text x="84.5826%" y="543.50"></text></g><g><title>free_fastpath (2 samples, 0.11%)</title><rect x="84.3326%" y="517" width="0.1131%" height="15" fill="rgb(252,98,18)" fg:x="1491" fg:w="2"/><text x="84.5826%" y="527.50"></text></g><g><title>sz_index2size (2 samples, 0.11%)</title><rect x="84.3326%" y="501" width="0.1131%" height="15" fill="rgb(244,8,26)" fg:x="1491" fg:w="2"/><text x="84.5826%" y="511.50"></text></g><g><title>sz_index2size_lookup (2 samples, 0.11%)</title><rect x="84.3326%" y="485" width="0.1131%" height="15" fill="rgb(237,173,45)" fg:x="1491" fg:w="2"/><text x="84.5826%" y="495.50"></text></g><g><title>sz_index2size_lookup_impl (2 samples, 0.11%)</title><rect x="84.3326%" y="469" width="0.1131%" height="15" fill="rgb(208,213,49)" fg:x="1491" fg:w="2"/><text x="84.5826%" y="479.50"></text></g><g><title>std::path::Path::_join (1 samples, 0.06%)</title><rect x="84.4457%" y="533" width="0.0566%" height="15" fill="rgb(212,122,37)" fg:x="1493" fg:w="1"/><text x="84.6957%" y="543.50"></text></g><g><title>std::path::PathBuf::push (1 samples, 0.06%)</title><rect x="84.4457%" y="517" width="0.0566%" height="15" fill="rgb(213,80,17)" fg:x="1493" fg:w="1"/><text x="84.6957%" y="527.50"></text></g><g><title>std::path::PathBuf::_push (1 samples, 0.06%)</title><rect x="84.4457%" y="501" width="0.0566%" height="15" fill="rgb(206,210,43)" fg:x="1493" fg:w="1"/><text x="84.6957%" y="511.50"></text></g><g><title>std::path::Path::is_absolute (1 samples, 0.06%)</title><rect x="84.4457%" y="485" width="0.0566%" height="15" fill="rgb(229,214,3)" fg:x="1493" fg:w="1"/><text x="84.6957%" y="495.50"></text></g><g><title>std::path::Path::has_root (1 samples, 0.06%)</title><rect x="84.4457%" y="469" width="0.0566%" height="15" fill="rgb(235,213,29)" fg:x="1493" fg:w="1"/><text x="84.6957%" y="479.50"></text></g><g><title>std::path::Path::components (1 samples, 0.06%)</title><rect x="84.4457%" y="453" width="0.0566%" height="15" fill="rgb(248,135,26)" fg:x="1493" fg:w="1"/><text x="84.6957%" y="463.50"></text></g><g><title>std::path::has_physical_root (1 samples, 0.06%)</title><rect x="84.4457%" y="437" width="0.0566%" height="15" fill="rgb(242,188,12)" fg:x="1493" fg:w="1"/><text x="84.6957%" y="447.50"></text></g><g><title>std::sys::unix::path::is_sep_byte (1 samples, 0.06%)</title><rect x="84.4457%" y="421" width="0.0566%" height="15" fill="rgb(245,38,12)" fg:x="1493" fg:w="1"/><text x="84.6957%" y="431.50"></text></g><g><title>std::sys::unix::time::inner::&lt;impl std::sys::unix::time::Timespec&gt;::now (1 samples, 0.06%)</title><rect x="84.5023%" y="533" width="0.0566%" height="15" fill="rgb(218,42,13)" fg:x="1494" fg:w="1"/><text x="84.7523%" y="543.50"></text></g><g><title>&lt;flatbuffers::primitives::ForwardsUOffset&lt;T&gt; as flatbuffers::verifier::Verifiable&gt;::run_verifier (1 samples, 0.06%)</title><rect x="84.7851%" y="501" width="0.0566%" height="15" fill="rgb(238,132,49)" fg:x="1499" fg:w="1"/><text x="85.0351%" y="511.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (1 samples, 0.06%)</title><rect x="84.7851%" y="485" width="0.0566%" height="15" fill="rgb(209,196,19)" fg:x="1499" fg:w="1"/><text x="85.0351%" y="495.50"></text></g><g><title>flatbuffers::verifier::Verifier::get_uoffset (1 samples, 0.06%)</title><rect x="84.7851%" y="469" width="0.0566%" height="15" fill="rgb(244,131,22)" fg:x="1499" fg:w="1"/><text x="85.0351%" y="479.50"></text></g><g><title>client::response::Response::on_describe_placement_driver (2 samples, 0.11%)</title><rect x="84.7851%" y="517" width="0.1131%" height="15" fill="rgb(223,18,34)" fg:x="1499" fg:w="2"/><text x="85.0351%" y="527.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (1 samples, 0.06%)</title><rect x="84.8416%" y="501" width="0.0566%" height="15" fill="rgb(252,124,54)" fg:x="1500" fg:w="1"/><text x="85.0916%" y="511.50"></text></g><g><title>flatbuffers::verifier::Verifier::get_uoffset (1 samples, 0.06%)</title><rect x="84.8416%" y="485" width="0.0566%" height="15" fill="rgb(229,106,42)" fg:x="1500" fg:w="1"/><text x="85.0916%" y="495.50"></text></g><g><title>client::response::Response::on_report_metrics (1 samples, 0.06%)</title><rect x="84.8982%" y="517" width="0.0566%" height="15" fill="rgb(221,129,1)" fg:x="1501" fg:w="1"/><text x="85.1482%" y="527.50"></text></g><g><title>flatbuffers::verifier::TableVerifier::visit_field (1 samples, 0.06%)</title><rect x="84.8982%" y="501" width="0.0566%" height="15" fill="rgb(229,74,15)" fg:x="1501" fg:w="1"/><text x="85.1482%" y="511.50"></text></g><g><title>&lt;flatbuffers::primitives::ForwardsUOffset&lt;T&gt; as flatbuffers::verifier::Verifiable&gt;::run_verifier (1 samples, 0.06%)</title><rect x="84.8982%" y="485" width="0.0566%" height="15" fill="rgb(210,206,50)" fg:x="1501" fg:w="1"/><text x="85.1482%" y="495.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (8 samples, 0.45%)</title><rect x="84.5588%" y="533" width="0.4525%" height="15" fill="rgb(251,114,31)" fg:x="1495" fg:w="8"/><text x="84.8088%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::op::Op&lt;tokio_uring::io::read::Read&lt;bytes::bytes_mut::BytesMut&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="84.9548%" y="517" width="0.0566%" height="15" fill="rgb(215,225,28)" fg:x="1502" fg:w="1"/><text x="85.2048%" y="527.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::complete (2 samples, 0.11%)</title><rect x="85.0113%" y="533" width="0.1131%" height="15" fill="rgb(237,109,14)" fg:x="1503" fg:w="2"/><text x="85.2613%" y="543.50"></text></g><g><title>tokio::task::local::Shared::schedule (2 samples, 0.11%)</title><rect x="85.1244%" y="533" width="0.1131%" height="15" fill="rgb(230,13,37)" fg:x="1505" fg:w="2"/><text x="85.3744%" y="543.50"></text></g><g><title>&lt;tokio::time::sleep::Sleep as core::future::future::Future&gt;::poll (2 samples, 0.11%)</title><rect x="85.2376%" y="517" width="0.1131%" height="15" fill="rgb(231,40,28)" fg:x="1507" fg:w="2"/><text x="85.4876%" y="527.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.06%)</title><rect x="85.2941%" y="501" width="0.0566%" height="15" fill="rgb(231,202,18)" fg:x="1508" fg:w="1"/><text x="85.5441%" y="511.50"></text></g><g><title>tokio::time::interval::Interval::poll_tick (3 samples, 0.17%)</title><rect x="85.2376%" y="533" width="0.1697%" height="15" fill="rgb(225,33,18)" fg:x="1507" fg:w="3"/><text x="85.4876%" y="543.50"></text></g><g><title>tokio::runtime::time::entry::TimerEntry::reset (1 samples, 0.06%)</title><rect x="85.3507%" y="517" width="0.0566%" height="15" fill="rgb(223,64,47)" fg:x="1509" fg:w="1"/><text x="85.6007%" y="527.50"></text></g><g><title>tokio_uring::runtime::driver::Driver::dispatch_completions (4 samples, 0.23%)</title><rect x="85.4072%" y="533" width="0.2262%" height="15" fill="rgb(234,114,13)" fg:x="1510" fg:w="4"/><text x="85.6572%" y="543.50"></text></g><g><title>tokio_uring::runtime::driver::Ops::remove (1 samples, 0.06%)</title><rect x="85.6335%" y="533" width="0.0566%" height="15" fill="rgb(248,56,40)" fg:x="1514" fg:w="1"/><text x="85.8835%" y="543.50"></text></g><g><title>bytes::bytes_mut::BytesMut::split_off (1 samples, 0.06%)</title><rect x="86.0294%" y="517" width="0.0566%" height="15" fill="rgb(221,194,21)" fg:x="1521" fg:w="1"/><text x="86.2794%" y="527.50"></text></g><g><title>bytes::bytes_mut::BytesMut::unsplit (3 samples, 0.17%)</title><rect x="86.0860%" y="517" width="0.1697%" height="15" fill="rgb(242,108,46)" fg:x="1522" fg:w="3"/><text x="86.3360%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;tokio_uring::io::read::Read&lt;bytes::bytes_mut::BytesMut&gt;&gt;&gt; (2 samples, 0.11%)</title><rect x="86.2557%" y="517" width="0.1131%" height="15" fill="rgb(220,106,10)" fg:x="1525" fg:w="2"/><text x="86.5057%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio_uring::runtime::driver::op::Op&lt;tokio_uring::io::read::Read&lt;bytes::bytes_mut::BytesMut&gt;&gt;&gt; (1 samples, 0.06%)</title><rect x="86.3688%" y="517" width="0.0566%" height="15" fill="rgb(211,88,4)" fg:x="1527" fg:w="1"/><text x="86.6188%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::clone_waker (1 samples, 0.06%)</title><rect x="86.4253%" y="517" width="0.0566%" height="15" fill="rgb(214,95,34)" fg:x="1528" fg:w="1"/><text x="86.6753%" y="527.50"></text></g><g><title>tokio_uring::runtime::driver::Ops::insert (2 samples, 0.11%)</title><rect x="86.4819%" y="517" width="0.1131%" height="15" fill="rgb(250,160,33)" fg:x="1529" fg:w="2"/><text x="86.7319%" y="527.50"></text></g><g><title>tokio_uring::runtime::driver::Ops::remove (2 samples, 0.11%)</title><rect x="86.5950%" y="517" width="0.1131%" height="15" fill="rgb(225,29,10)" fg:x="1531" fg:w="2"/><text x="86.8450%" y="527.50"></text></g><g><title>_rjem_je_sdallocx_default (1 samples, 0.06%)</title><rect x="87.3303%" y="501" width="0.0566%" height="15" fill="rgb(224,28,30)" fg:x="1544" fg:w="1"/><text x="87.5803%" y="511.50"></text></g><g><title>isfree (1 samples, 0.06%)</title><rect x="87.3303%" y="485" width="0.0566%" height="15" fill="rgb(231,77,4)" fg:x="1544" fg:w="1"/><text x="87.5803%" y="495.50"></text></g><g><title>thread_dalloc_event (1 samples, 0.06%)</title><rect x="87.3303%" y="469" width="0.0566%" height="15" fill="rgb(209,63,21)" fg:x="1544" fg:w="1"/><text x="87.5803%" y="479.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="87.3303%" y="453" width="0.0566%" height="15" fill="rgb(226,22,11)" fg:x="1544" fg:w="1"/><text x="87.5803%" y="463.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="87.3303%" y="437" width="0.0566%" height="15" fill="rgb(216,82,30)" fg:x="1544" fg:w="1"/><text x="87.5803%" y="447.50"></text></g><g><title>te_adjust_thresholds_helper (1 samples, 0.06%)</title><rect x="87.3303%" y="421" width="0.0566%" height="15" fill="rgb(246,227,38)" fg:x="1544" fg:w="1"/><text x="87.5803%" y="431.50"></text></g><g><title>te_ctx_next_event_set (1 samples, 0.06%)</title><rect x="87.3303%" y="405" width="0.0566%" height="15" fill="rgb(251,203,53)" fg:x="1544" fg:w="1"/><text x="87.5803%" y="415.50"></text></g><g><title>_rjem_je_tcache_postfork_child (1 samples, 0.06%)</title><rect x="87.3303%" y="389" width="0.0566%" height="15" fill="rgb(254,101,1)" fg:x="1544" fg:w="1"/><text x="87.5803%" y="399.50"></text></g><g><title>_rjem_je_malloc_default (1 samples, 0.06%)</title><rect x="87.6131%" y="485" width="0.0566%" height="15" fill="rgb(241,180,5)" fg:x="1549" fg:w="1"/><text x="87.8631%" y="495.50"></text></g><g><title>imalloc (1 samples, 0.06%)</title><rect x="87.6131%" y="469" width="0.0566%" height="15" fill="rgb(218,168,4)" fg:x="1549" fg:w="1"/><text x="87.8631%" y="479.50"></text></g><g><title>imalloc_body (1 samples, 0.06%)</title><rect x="87.6131%" y="453" width="0.0566%" height="15" fill="rgb(224,223,32)" fg:x="1549" fg:w="1"/><text x="87.8631%" y="463.50"></text></g><g><title>thread_alloc_event (1 samples, 0.06%)</title><rect x="87.6131%" y="437" width="0.0566%" height="15" fill="rgb(236,106,22)" fg:x="1549" fg:w="1"/><text x="87.8631%" y="447.50"></text></g><g><title>te_event_advance (1 samples, 0.06%)</title><rect x="87.6131%" y="421" width="0.0566%" height="15" fill="rgb(206,121,5)" fg:x="1549" fg:w="1"/><text x="87.8631%" y="431.50"></text></g><g><title>_rjem_je_te_event_trigger (1 samples, 0.06%)</title><rect x="87.6131%" y="405" width="0.0566%" height="15" fill="rgb(233,87,28)" fg:x="1549" fg:w="1"/><text x="87.8631%" y="415.50"></text></g><g><title>_rjem_je_tcache_gc_event_handler (1 samples, 0.06%)</title><rect x="87.6131%" y="389" width="0.0566%" height="15" fill="rgb(236,137,17)" fg:x="1549" fg:w="1"/><text x="87.8631%" y="399.50"></text></g><g><title>bytes::bytes_mut::BytesMut::extend_from_slice (1 samples, 0.06%)</title><rect x="87.6697%" y="485" width="0.0566%" height="15" fill="rgb(209,183,38)" fg:x="1550" fg:w="1"/><text x="87.9197%" y="495.50"></text></g><g><title>bytes::buf::buf_impl::Buf::copy_to_bytes (13 samples, 0.74%)</title><rect x="87.3869%" y="501" width="0.7353%" height="15" fill="rgb(206,162,44)" fg:x="1545" fg:w="13"/><text x="87.6369%" y="511.50"></text></g><g><title>malloc (7 samples, 0.40%)</title><rect x="87.7262%" y="485" width="0.3959%" height="15" fill="rgb(237,70,39)" fg:x="1551" fg:w="7"/><text x="87.9762%" y="495.50"></text></g><g><title>bytes::buf::buf_impl::Buf::get_u32 (2 samples, 0.11%)</title><rect x="88.1222%" y="501" width="0.1131%" height="15" fill="rgb(212,176,5)" fg:x="1558" fg:w="2"/><text x="88.3722%" y="511.50"></text></g><g><title>crc32fast::baseline::update_fast_16 (20 samples, 1.13%)</title><rect x="88.2353%" y="501" width="1.1312%" height="15" fill="rgb(232,95,16)" fg:x="1560" fg:w="20"/><text x="88.4853%" y="511.50"></text></g><g><title>crc32fast::hash (3 samples, 0.17%)</title><rect x="89.3665%" y="501" width="0.1697%" height="15" fill="rgb(219,115,35)" fg:x="1580" fg:w="3"/><text x="89.6165%" y="511.50"></text></g><g><title>transport::connection::Connection::read_frame::{{closure}} (69 samples, 3.90%)</title><rect x="85.6900%" y="533" width="3.9027%" height="15" fill="rgb(251,67,27)" fg:x="1515" fg:w="69"/><text x="85.9400%" y="543.50">tran..</text></g><g><title>transport::connection::Connection::parse_frame (51 samples, 2.88%)</title><rect x="86.7081%" y="517" width="2.8846%" height="15" fill="rgb(222,95,40)" fg:x="1533" fg:w="51"/><text x="86.9581%" y="527.50">tr..</text></g><g><title>sdallocx (1 samples, 0.06%)</title><rect x="89.5362%" y="501" width="0.0566%" height="15" fill="rgb(250,35,16)" fg:x="1583" fg:w="1"/><text x="89.7862%" y="511.50"></text></g><g><title>free_fastpath (1 samples, 0.06%)</title><rect x="89.5362%" y="485" width="0.0566%" height="15" fill="rgb(224,86,44)" fg:x="1583" fg:w="1"/><text x="89.7862%" y="495.50"></text></g><g><title>cache_bin_dalloc_easy (1 samples, 0.06%)</title><rect x="89.5362%" y="469" width="0.0566%" height="15" fill="rgb(237,53,53)" fg:x="1583" fg:w="1"/><text x="89.7862%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::rc::Rc&lt;local_sync::oneshot::Inner&lt;core::result::Result&lt;(),transport::error::ConnectionError&gt;&gt;&gt;&gt;&gt; (5 samples, 0.28%)</title><rect x="89.9321%" y="517" width="0.2828%" height="15" fill="rgb(208,171,33)" fg:x="1590" fg:w="5"/><text x="90.1821%" y="527.50"></text></g><g><title>tokio::runtime::task::waker::drop_waker (3 samples, 0.17%)</title><rect x="90.0452%" y="501" width="0.1697%" height="15" fill="rgb(222,64,27)" fg:x="1592" fg:w="3"/><text x="90.2952%" y="511.50"></text></g><g><title>RangeServer[Pri (765 samples, 43.27%)</title><rect x="47.0588%" y="677" width="43.2692%" height="15" fill="rgb(221,121,35)" fg:x="832" fg:w="765"/><text x="47.3088%" y="687.50">RangeServer[Pri</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (765 samples, 43.27%)</title><rect x="47.0588%" y="661" width="43.2692%" height="15" fill="rgb(228,137,42)" fg:x="832" fg:w="765"/><text x="47.3088%" y="671.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (765 samples, 43.27%)</title><rect x="47.0588%" y="645" width="43.2692%" height="15" fill="rgb(227,54,21)" fg:x="832" fg:w="765"/><text x="47.3088%" y="655.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (765 samples, 43.27%)</title><rect x="47.0588%" y="629" width="43.2692%" height="15" fill="rgb(240,168,33)" fg:x="832" fg:w="765"/><text x="47.3088%" y="639.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (765 samples, 43.27%)</title><rect x="47.0588%" y="613" width="43.2692%" height="15" fill="rgb(243,159,6)" fg:x="832" fg:w="765"/><text x="47.3088%" y="623.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (765 samples, 43.27%)</title><rect x="47.0588%" y="597" width="43.2692%" height="15" fill="rgb(205,211,41)" fg:x="832" fg:w="765"/><text x="47.3088%" y="607.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>tokio::task::local::LocalSet::run_until::{{closure}} (620 samples, 35.07%)</title><rect x="55.2602%" y="581" width="35.0679%" height="15" fill="rgb(253,30,1)" fg:x="977" fg:w="620"/><text x="55.5102%" y="591.50">tokio::task::local::LocalSet::run_until::{{closure}}</text></g><g><title>tokio::task::local::LocalSet::tick (574 samples, 32.47%)</title><rect x="57.8620%" y="565" width="32.4661%" height="15" fill="rgb(226,80,18)" fg:x="1023" fg:w="574"/><text x="58.1120%" y="575.50">tokio::task::local::LocalSet::tick</text></g><g><title>tokio::runtime::task::raw::poll (563 samples, 31.84%)</title><rect x="58.4842%" y="549" width="31.8439%" height="15" fill="rgb(253,156,46)" fg:x="1034" fg:w="563"/><text x="58.7342%" y="559.50">tokio::runtime::task::raw::poll</text></g><g><title>transport::connection::Connection::write_frame::{{closure}} (13 samples, 0.74%)</title><rect x="89.5928%" y="533" width="0.7353%" height="15" fill="rgb(248,87,27)" fg:x="1584" fg:w="13"/><text x="89.8428%" y="543.50"></text></g><g><title>tokio::runtime::task::waker::wake_by_val (2 samples, 0.11%)</title><rect x="90.2149%" y="517" width="0.1131%" height="15" fill="rgb(227,122,2)" fg:x="1595" fg:w="2"/><text x="90.4649%" y="527.50"></text></g><g><title>iralloct (1 samples, 0.06%)</title><rect x="90.4412%" y="101" width="0.0566%" height="15" fill="rgb(229,94,39)" fg:x="1599" fg:w="1"/><text x="90.6912%" y="111.50"></text></g><g><title>_rjem_je_arena_ralloc (1 samples, 0.06%)</title><rect x="90.4412%" y="85" width="0.0566%" height="15" fill="rgb(225,173,31)" fg:x="1599" fg:w="1"/><text x="90.6912%" y="95.50"></text></g><g><title>alloc::fmt::format::format_inner (4 samples, 0.23%)</title><rect x="90.3846%" y="501" width="0.2262%" height="15" fill="rgb(239,176,30)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="511.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.23%)</title><rect x="90.3846%" y="485" width="0.2262%" height="15" fill="rgb(212,104,21)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="495.50"></text></g><g><title>core::fmt::write (4 samples, 0.23%)</title><rect x="90.3846%" y="469" width="0.2262%" height="15" fill="rgb(240,209,40)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="479.50"></text></g><g><title>core::fmt::run (4 samples, 0.23%)</title><rect x="90.3846%" y="453" width="0.2262%" height="15" fill="rgb(234,195,5)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="463.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.23%)</title><rect x="90.3846%" y="437" width="0.2262%" height="15" fill="rgb(238,213,1)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="447.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (4 samples, 0.23%)</title><rect x="90.3846%" y="421" width="0.2262%" height="15" fill="rgb(235,182,54)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="431.50"></text></g><g><title>core::fmt::write (4 samples, 0.23%)</title><rect x="90.3846%" y="405" width="0.2262%" height="15" fill="rgb(229,50,46)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="415.50"></text></g><g><title>core::fmt::run (4 samples, 0.23%)</title><rect x="90.3846%" y="389" width="0.2262%" height="15" fill="rgb(219,145,13)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="399.50"></text></g><g><title>core::fmt::rt::Argument::fmt (4 samples, 0.23%)</title><rect x="90.3846%" y="373" width="0.2262%" height="15" fill="rgb(220,226,10)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="383.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (4 samples, 0.23%)</title><rect x="90.3846%" y="357" width="0.2262%" height="15" fill="rgb(248,47,30)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="367.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (4 samples, 0.23%)</title><rect x="90.3846%" y="341" width="0.2262%" height="15" fill="rgb(231,209,44)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.23%)</title><rect x="90.3846%" y="325" width="0.2262%" height="15" fill="rgb(209,80,30)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="335.50"></text></g><g><title>alloc::string::String::push_str (4 samples, 0.23%)</title><rect x="90.3846%" y="309" width="0.2262%" height="15" fill="rgb(232,9,14)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.23%)</title><rect x="90.3846%" y="293" width="0.2262%" height="15" fill="rgb(243,91,43)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.23%)</title><rect x="90.3846%" y="277" width="0.2262%" height="15" fill="rgb(231,90,52)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.23%)</title><rect x="90.3846%" y="261" width="0.2262%" height="15" fill="rgb(253,192,44)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.23%)</title><rect x="90.3846%" y="245" width="0.2262%" height="15" fill="rgb(241,66,31)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.23%)</title><rect x="90.3846%" y="229" width="0.2262%" height="15" fill="rgb(235,81,37)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.23%)</title><rect x="90.3846%" y="213" width="0.2262%" height="15" fill="rgb(223,221,9)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.23%)</title><rect x="90.3846%" y="197" width="0.2262%" height="15" fill="rgb(242,180,7)" fg:x="1598" fg:w="4"/><text x="90.6346%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.17%)</title><rect x="90.4412%" y="181" width="0.1697%" height="15" fill="rgb(243,78,19)" fg:x="1599" fg:w="3"/><text x="90.6912%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.17%)</title><rect x="90.4412%" y="165" width="0.1697%" height="15" fill="rgb(233,23,17)" fg:x="1599" fg:w="3"/><text x="90.6912%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.17%)</title><rect x="90.4412%" y="149" width="0.1697%" height="15" fill="rgb(252,122,45)" fg:x="1599" fg:w="3"/><text x="90.6912%" y="159.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.17%)</title><rect x="90.4412%" y="133" width="0.1697%" height="15" fill="rgb(247,108,20)" fg:x="1599" fg:w="3"/><text x="90.6912%" y="143.50"></text></g><g><title>do_rallocx (3 samples, 0.17%)</title><rect x="90.4412%" y="117" width="0.1697%" height="15" fill="rgb(235,84,21)" fg:x="1599" fg:w="3"/><text x="90.6912%" y="127.50"></text></g><g><title>thread_alloc_event (2 samples, 0.11%)</title><rect x="90.4977%" y="101" width="0.1131%" height="15" fill="rgb(247,129,10)" fg:x="1600" fg:w="2"/><text x="90.7477%" y="111.50"></text></g><g><title>te_event_advance (2 samples, 0.11%)</title><rect x="90.4977%" y="85" width="0.1131%" height="15" fill="rgb(208,173,14)" fg:x="1600" fg:w="2"/><text x="90.7477%" y="95.50"></text></g><g><title>alloc::string::String::from_utf8_lossy (1 samples, 0.06%)</title><rect x="90.6109%" y="501" width="0.0566%" height="15" fill="rgb(236,31,38)" fg:x="1602" fg:w="1"/><text x="90.8609%" y="511.50"></text></g><g><title>&lt;core::str::lossy::Utf8Chunks as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="90.6109%" y="485" width="0.0566%" height="15" fill="rgb(232,65,17)" fg:x="1602" fg:w="1"/><text x="90.8609%" y="495.50"></text></g><g><title>rustc_demangle::try_demangle (3 samples, 0.17%)</title><rect x="90.6674%" y="501" width="0.1697%" height="15" fill="rgb(224,45,49)" fg:x="1603" fg:w="3"/><text x="90.9174%" y="511.50"></text></g><g><title>&lt;cpp_demangle::ast::FunctionArgSlice as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="90.8371%" y="421" width="0.0566%" height="15" fill="rgb(225,2,53)" fg:x="1606" fg:w="1"/><text x="91.0871%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="90.8371%" y="405" width="0.0566%" height="15" fill="rgb(248,210,53)" fg:x="1606" fg:w="1"/><text x="91.0871%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="90.8371%" y="389" width="0.0566%" height="15" fill="rgb(211,1,30)" fg:x="1606" fg:w="1"/><text x="91.0871%" y="399.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="90.8371%" y="373" width="0.0566%" height="15" fill="rgb(224,96,15)" fg:x="1606" fg:w="1"/><text x="91.0871%" y="383.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="90.8371%" y="357" width="0.0566%" height="15" fill="rgb(252,45,11)" fg:x="1606" fg:w="1"/><text x="91.0871%" y="367.50"></text></g><g><title>&lt;cpp_demangle::ast::Type as cpp_demangle::ast::DemangleAsInner&lt;W&gt;&gt;::demangle_as_inner (1 samples, 0.06%)</title><rect x="90.8371%" y="341" width="0.0566%" height="15" fill="rgb(220,125,38)" fg:x="1606" fg:w="1"/><text x="91.0871%" y="351.50"></text></g><g><title>&lt;cpp_demangle::ast::Encoding as cpp_demangle::ast::DemangleAsInner&lt;W&gt;&gt;::demangle_as_inner (2 samples, 0.11%)</title><rect x="90.8371%" y="437" width="0.1131%" height="15" fill="rgb(243,161,33)" fg:x="1606" fg:w="2"/><text x="91.0871%" y="447.50"></text></g><g><title>cpp_demangle::ast::DemangleAsInner::demangle_as_inner (1 samples, 0.06%)</title><rect x="90.8937%" y="421" width="0.0566%" height="15" fill="rgb(248,197,34)" fg:x="1607" fg:w="1"/><text x="91.1437%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::UnqualifiedName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="90.9502%" y="437" width="0.0566%" height="15" fill="rgb(228,165,23)" fg:x="1608" fg:w="1"/><text x="91.2002%" y="447.50"></text></g><g><title>&lt;cpp_demangle::ast::SourceName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="90.9502%" y="421" width="0.0566%" height="15" fill="rgb(236,94,38)" fg:x="1608" fg:w="1"/><text x="91.2002%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::MangledName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (4 samples, 0.23%)</title><rect x="90.8371%" y="485" width="0.2262%" height="15" fill="rgb(220,13,23)" fg:x="1606" fg:w="4"/><text x="91.0871%" y="495.50"></text></g><g><title>&lt;cpp_demangle::ast::Encoding as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (4 samples, 0.23%)</title><rect x="90.8371%" y="469" width="0.2262%" height="15" fill="rgb(234,26,39)" fg:x="1606" fg:w="4"/><text x="91.0871%" y="479.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (4 samples, 0.23%)</title><rect x="90.8371%" y="453" width="0.2262%" height="15" fill="rgb(205,117,44)" fg:x="1606" fg:w="4"/><text x="91.0871%" y="463.50"></text></g><g><title>&lt;cpp_demangle::subs::Substitutable as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="91.0068%" y="437" width="0.0566%" height="15" fill="rgb(250,42,2)" fg:x="1609" fg:w="1"/><text x="91.2568%" y="447.50"></text></g><g><title>&lt;cpp_demangle::subs::Substitutable as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="91.0068%" y="421" width="0.0566%" height="15" fill="rgb(223,83,14)" fg:x="1609" fg:w="1"/><text x="91.2568%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::UnqualifiedName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="91.0068%" y="405" width="0.0566%" height="15" fill="rgb(241,147,50)" fg:x="1609" fg:w="1"/><text x="91.2568%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::SourceName as cpp_demangle::ast::Demangle&lt;W&gt;&gt;::demangle (1 samples, 0.06%)</title><rect x="91.0068%" y="389" width="0.0566%" height="15" fill="rgb(218,90,6)" fg:x="1609" fg:w="1"/><text x="91.2568%" y="399.50"></text></g><g><title>core::str::converts::from_utf8 (1 samples, 0.06%)</title><rect x="91.0068%" y="373" width="0.0566%" height="15" fill="rgb(210,191,5)" fg:x="1609" fg:w="1"/><text x="91.2568%" y="383.50"></text></g><g><title>&lt;cpp_demangle::ast::BareFunctionType as cpp_demangle::ast::Parse&gt;::parse (2 samples, 0.11%)</title><rect x="91.0633%" y="453" width="0.1131%" height="15" fill="rgb(225,139,19)" fg:x="1610" fg:w="2"/><text x="91.3133%" y="463.50"></text></g><g><title>cpp_demangle::ast::one_or_more (2 samples, 0.11%)</title><rect x="91.0633%" y="437" width="0.1131%" height="15" fill="rgb(210,1,33)" fg:x="1610" fg:w="2"/><text x="91.3133%" y="447.50"></text></g><g><title>&lt;cpp_demangle::ast::TypeHandle as cpp_demangle::ast::Parse&gt;::parse (2 samples, 0.11%)</title><rect x="91.0633%" y="421" width="0.1131%" height="15" fill="rgb(213,50,3)" fg:x="1610" fg:w="2"/><text x="91.3133%" y="431.50"></text></g><g><title>&lt;cpp_demangle::ast::TypeHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="91.1199%" y="405" width="0.0566%" height="15" fill="rgb(234,227,4)" fg:x="1611" fg:w="1"/><text x="91.3699%" y="415.50"></text></g><g><title>&lt;cpp_demangle::ast::TypeHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="91.1199%" y="389" width="0.0566%" height="15" fill="rgb(246,63,5)" fg:x="1611" fg:w="1"/><text x="91.3699%" y="399.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="91.1199%" y="373" width="0.0566%" height="15" fill="rgb(245,136,27)" fg:x="1611" fg:w="1"/><text x="91.3699%" y="383.50"></text></g><g><title>&lt;cpp_demangle::ast::PrefixHandle as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="91.1199%" y="357" width="0.0566%" height="15" fill="rgb(247,199,27)" fg:x="1611" fg:w="1"/><text x="91.3699%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.90%)</title><rect x="90.3281%" y="581" width="0.9050%" height="15" fill="rgb(252,158,49)" fg:x="1597" fg:w="16"/><text x="90.5781%" y="591.50"></text></g><g><title>core::fmt::write (16 samples, 0.90%)</title><rect x="90.3281%" y="565" width="0.9050%" height="15" fill="rgb(254,73,1)" fg:x="1597" fg:w="16"/><text x="90.5781%" y="575.50"></text></g><g><title>core::fmt::rt::Argument::fmt (16 samples, 0.90%)</title><rect x="90.3281%" y="549" width="0.9050%" height="15" fill="rgb(248,93,19)" fg:x="1597" fg:w="16"/><text x="90.5781%" y="559.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (16 samples, 0.90%)</title><rect x="90.3281%" y="533" width="0.9050%" height="15" fill="rgb(206,67,5)" fg:x="1597" fg:w="16"/><text x="90.5781%" y="543.50"></text></g><g><title>pprof::frames::Symbol::name (16 samples, 0.90%)</title><rect x="90.3281%" y="517" width="0.9050%" height="15" fill="rgb(209,210,4)" fg:x="1597" fg:w="16"/><text x="90.5781%" y="527.50"></text></g><g><title>symbolic_demangle::try_demangle_cpp (7 samples, 0.40%)</title><rect x="90.8371%" y="501" width="0.3959%" height="15" fill="rgb(214,185,36)" fg:x="1606" fg:w="7"/><text x="91.0871%" y="511.50"></text></g><g><title>&lt;cpp_demangle::ast::MangledName as cpp_demangle::ast::Parse&gt;::parse (3 samples, 0.17%)</title><rect x="91.0633%" y="485" width="0.1697%" height="15" fill="rgb(233,191,26)" fg:x="1610" fg:w="3"/><text x="91.3133%" y="495.50"></text></g><g><title>&lt;cpp_demangle::ast::Encoding as cpp_demangle::ast::Parse&gt;::parse (3 samples, 0.17%)</title><rect x="91.0633%" y="469" width="0.1697%" height="15" fill="rgb(248,94,17)" fg:x="1610" fg:w="3"/><text x="91.3133%" y="479.50"></text></g><g><title>&lt;cpp_demangle::ast::Name as cpp_demangle::ast::Parse&gt;::parse (1 samples, 0.06%)</title><rect x="91.1765%" y="453" width="0.0566%" height="15" fill="rgb(250,64,4)" fg:x="1612" fg:w="1"/><text x="91.4265%" y="463.50"></text></g><g><title>&lt;str_stack::Writer as core::ops::drop::Drop&gt;::drop (1 samples, 0.06%)</title><rect x="91.2896%" y="565" width="0.0566%" height="15" fill="rgb(218,41,53)" fg:x="1614" fg:w="1"/><text x="91.5396%" y="575.50"></text></g><g><title>core::fmt::write (1 samples, 0.06%)</title><rect x="91.3462%" y="565" width="0.0566%" height="15" fill="rgb(251,176,28)" fg:x="1615" fg:w="1"/><text x="91.5962%" y="575.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.06%)</title><rect x="91.3462%" y="549" width="0.0566%" height="15" fill="rgb(247,22,9)" fg:x="1615" fg:w="1"/><text x="91.5962%" y="559.50"></text></g><g><title>inferno::flamegraph::color::color (1 samples, 0.06%)</title><rect x="91.4027%" y="565" width="0.0566%" height="15" fill="rgb(218,201,14)" fg:x="1616" fg:w="1"/><text x="91.6527%" y="575.50"></text></g><g><title>inferno::flamegraph::merge::frames (2 samples, 0.11%)</title><rect x="91.4593%" y="565" width="0.1131%" height="15" fill="rgb(218,94,10)" fg:x="1617" fg:w="2"/><text x="91.7093%" y="575.50"></text></g><g><title>inferno::flamegraph::merge::flow (2 samples, 0.11%)</title><rect x="91.4593%" y="549" width="0.1131%" height="15" fill="rgb(222,183,52)" fg:x="1617" fg:w="2"/><text x="91.7093%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.06%)</title><rect x="91.5158%" y="533" width="0.0566%" height="15" fill="rgb(242,140,25)" fg:x="1618" fg:w="1"/><text x="91.7658%" y="543.50"></text></g><g><title>core::fmt::Formatter::new (1 samples, 0.06%)</title><rect x="91.5724%" y="533" width="0.0566%" height="15" fill="rgb(235,197,38)" fg:x="1619" fg:w="1"/><text x="91.8224%" y="543.50"></text></g><g><title>core::fmt::write (2 samples, 0.11%)</title><rect x="91.5724%" y="549" width="0.1131%" height="15" fill="rgb(237,136,15)" fg:x="1619" fg:w="2"/><text x="91.8224%" y="559.50"></text></g><g><title>core::fmt::run (1 samples, 0.06%)</title><rect x="91.6290%" y="533" width="0.0566%" height="15" fill="rgb(223,44,49)" fg:x="1620" fg:w="1"/><text x="91.8790%" y="543.50"></text></g><g><title>core::fmt::rt::Argument::fmt (1 samples, 0.06%)</title><rect x="91.6290%" y="517" width="0.0566%" height="15" fill="rgb(227,71,15)" fg:x="1620" fg:w="1"/><text x="91.8790%" y="527.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_exact (1 samples, 0.06%)</title><rect x="91.6290%" y="501" width="0.0566%" height="15" fill="rgb(225,153,20)" fg:x="1620" fg:w="1"/><text x="91.8790%" y="511.50"></text></g><g><title>core::num::flt2dec::to_exact_fixed_str (1 samples, 0.06%)</title><rect x="91.6290%" y="485" width="0.0566%" height="15" fill="rgb(210,190,26)" fg:x="1620" fg:w="1"/><text x="91.8790%" y="495.50"></text></g><g><title>core::ops::function::FnMut::call_mut (1 samples, 0.06%)</title><rect x="91.6290%" y="469" width="0.0566%" height="15" fill="rgb(223,147,5)" fg:x="1620" fg:w="1"/><text x="91.8790%" y="479.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_exact (1 samples, 0.06%)</title><rect x="91.6290%" y="453" width="0.0566%" height="15" fill="rgb(207,14,23)" fg:x="1620" fg:w="1"/><text x="91.8790%" y="463.50"></text></g><g><title>core::num::flt2dec::strategy::dragon::format_exact (1 samples, 0.06%)</title><rect x="91.6290%" y="437" width="0.0566%" height="15" fill="rgb(211,195,53)" fg:x="1620" fg:w="1"/><text x="91.8790%" y="447.50"></text></g><g><title>inferno::flamegraph::svg::write_str (5 samples, 0.28%)</title><rect x="91.5724%" y="565" width="0.2828%" height="15" fill="rgb(237,75,46)" fg:x="1619" fg:w="5"/><text x="91.8224%" y="575.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (3 samples, 0.17%)</title><rect x="91.6855%" y="549" width="0.1697%" height="15" fill="rgb(254,55,14)" fg:x="1621" fg:w="3"/><text x="91.9355%" y="559.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.11%)</title><rect x="91.7421%" y="533" width="0.1131%" height="15" fill="rgb(230,185,30)" fg:x="1622" fg:w="2"/><text x="91.9921%" y="543.50"></text></g><g><title>quick_xml::events::BytesStart::push_attribute (1 samples, 0.06%)</title><rect x="91.8552%" y="565" width="0.0566%" height="15" fill="rgb(220,14,11)" fg:x="1624" fg:w="1"/><text x="92.1052%" y="575.50"></text></g><g><title>quick_xml::escapei::escape (1 samples, 0.06%)</title><rect x="91.8552%" y="549" width="0.0566%" height="15" fill="rgb(215,169,44)" fg:x="1624" fg:w="1"/><text x="92.1052%" y="559.50"></text></g><g><title>inferno::flamegraph::from_lines (18 samples, 1.02%)</title><rect x="91.2330%" y="581" width="1.0181%" height="15" fill="rgb(253,203,20)" fg:x="1613" fg:w="18"/><text x="91.4830%" y="591.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (6 samples, 0.34%)</title><rect x="91.9118%" y="565" width="0.3394%" height="15" fill="rgb(229,225,17)" fg:x="1625" fg:w="6"/><text x="92.1618%" y="575.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.28%)</title><rect x="91.9683%" y="549" width="0.2828%" height="15" fill="rgb(236,76,26)" fg:x="1626" fg:w="5"/><text x="92.2183%" y="559.50"></text></g><g><title>std::sys::unix::time::Timespec::sub_timespec (1 samples, 0.06%)</title><rect x="92.2511%" y="581" width="0.0566%" height="15" fill="rgb(234,15,30)" fg:x="1631" fg:w="1"/><text x="92.5011%" y="591.50"></text></g><g><title>flamegraph (36 samples, 2.04%)</title><rect x="90.3281%" y="677" width="2.0362%" height="15" fill="rgb(211,113,48)" fg:x="1597" fg:w="36"/><text x="90.5781%" y="687.50">f..</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (36 samples, 2.04%)</title><rect x="90.3281%" y="661" width="2.0362%" height="15" fill="rgb(221,31,36)" fg:x="1597" fg:w="36"/><text x="90.5781%" y="671.50">s..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (36 samples, 2.04%)</title><rect x="90.3281%" y="645" width="2.0362%" height="15" fill="rgb(215,118,52)" fg:x="1597" fg:w="36"/><text x="90.5781%" y="655.50">&lt;..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (36 samples, 2.04%)</title><rect x="90.3281%" y="629" width="2.0362%" height="15" fill="rgb(241,151,27)" fg:x="1597" fg:w="36"/><text x="90.5781%" y="639.50">&lt;..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (36 samples, 2.04%)</title><rect x="90.3281%" y="613" width="2.0362%" height="15" fill="rgb(253,51,3)" fg:x="1597" fg:w="36"/><text x="90.5781%" y="623.50">c..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (36 samples, 2.04%)</title><rect x="90.3281%" y="597" width="2.0362%" height="15" fill="rgb(216,201,24)" fg:x="1597" fg:w="36"/><text x="90.5781%" y="607.50">s..</text></g><g><title>tokio::sync::broadcast::Receiver&lt;T&gt;::recv_ref (1 samples, 0.06%)</title><rect x="92.3077%" y="581" width="0.0566%" height="15" fill="rgb(231,107,4)" fg:x="1632" fg:w="1"/><text x="92.5577%" y="591.50"></text></g><g><title>rocksdb::HistogramStat::Data(rocksdb::HistogramData*) const (1 samples, 0.06%)</title><rect x="92.4208%" y="597" width="0.0566%" height="15" fill="rgb(243,97,54)" fg:x="1634" fg:w="1"/><text x="92.6708%" y="607.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.06%)</title><rect x="92.4774%" y="581" width="0.0566%" height="15" fill="rgb(221,32,51)" fg:x="1635" fg:w="1"/><text x="92.7274%" y="591.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="92.4774%" y="565" width="0.0566%" height="15" fill="rgb(218,171,35)" fg:x="1635" fg:w="1"/><text x="92.7274%" y="575.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="92.4774%" y="549" width="0.0566%" height="15" fill="rgb(214,20,53)" fg:x="1635" fg:w="1"/><text x="92.7274%" y="559.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="92.4774%" y="533" width="0.0566%" height="15" fill="rgb(239,9,52)" fg:x="1635" fg:w="1"/><text x="92.7274%" y="543.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="92.4774%" y="517" width="0.0566%" height="15" fill="rgb(215,114,45)" fg:x="1635" fg:w="1"/><text x="92.7274%" y="527.50"></text></g><g><title>rocksdb::StatisticsImpl::getHistogramImplLocked(unsigned int) const (113 samples, 6.39%)</title><rect x="92.4774%" y="597" width="6.3914%" height="15" fill="rgb(208,118,9)" fg:x="1635" fg:w="113"/><text x="92.7274%" y="607.50">rocksdb:..</text></g><g><title>rocksdb::HistogramImpl::Merge(rocksdb::HistogramImpl const&amp;) (112 samples, 6.33%)</title><rect x="92.5339%" y="581" width="6.3348%" height="15" fill="rgb(235,7,39)" fg:x="1636" fg:w="112"/><text x="92.7839%" y="591.50">rocksdb:..</text></g><g><title>rocksdb::HistogramStat::Merge(rocksdb::HistogramStat const&amp;) (112 samples, 6.33%)</title><rect x="92.5339%" y="565" width="6.3348%" height="15" fill="rgb(243,225,15)" fg:x="1636" fg:w="112"/><text x="92.7839%" y="575.50">rocksdb:..</text></g><g><title>rocksdb::DBImpl::PrintStatistics() (115 samples, 6.50%)</title><rect x="92.4208%" y="629" width="6.5045%" height="15" fill="rgb(225,216,18)" fg:x="1634" fg:w="115"/><text x="92.6708%" y="639.50">rocksdb::..</text></g><g><title>rocksdb::StatisticsImpl::ToString[abi:cxx11]() const (115 samples, 6.50%)</title><rect x="92.4208%" y="613" width="6.5045%" height="15" fill="rgb(233,36,38)" fg:x="1634" fg:w="115"/><text x="92.6708%" y="623.50">rocksdb::..</text></g><g><title>rocksdb::StatisticsImpl::getTickerCountLocked(unsigned int) const (1 samples, 0.06%)</title><rect x="98.8688%" y="597" width="0.0566%" height="15" fill="rgb(239,88,23)" fg:x="1748" fg:w="1"/><text x="99.1188%" y="607.50"></text></g><g><title>rocksdb::InternalStats::HandleCFStatsPeriodic(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, rocksdb::Slice) (1 samples, 0.06%)</title><rect x="98.9253%" y="629" width="0.0566%" height="15" fill="rgb(219,181,35)" fg:x="1749" fg:w="1"/><text x="99.1753%" y="639.50"></text></g><g><title>rocksdb::InternalStats::DumpCFStatsNoFileHistogram(bool, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (1 samples, 0.06%)</title><rect x="98.9253%" y="613" width="0.0566%" height="15" fill="rgb(215,18,46)" fg:x="1749" fg:w="1"/><text x="99.1753%" y="623.50"></text></g><g><title>rocksdb::InternalStats::DumpCFStatsWriteStall(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, unsigned long*) (1 samples, 0.06%)</title><rect x="98.9253%" y="597" width="0.0566%" height="15" fill="rgb(241,38,11)" fg:x="1749" fg:w="1"/><text x="99.1753%" y="607.50"></text></g><g><title>rocksdb::InternalStats::DumpCFMapStatsWriteStall(std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;*) (1 samples, 0.06%)</title><rect x="98.9253%" y="581" width="0.0566%" height="15" fill="rgb(248,169,45)" fg:x="1749" fg:w="1"/><text x="99.1753%" y="591.50"></text></g><g><title>rocksdb::WriteStallStatsMapKeys::CauseConditionCount[abi:cxx11](rocksdb::WriteStallCause, rocksdb::WriteStallCondition) (1 samples, 0.06%)</title><rect x="98.9253%" y="565" width="0.0566%" height="15" fill="rgb(239,50,49)" fg:x="1749" fg:w="1"/><text x="99.1753%" y="575.50"></text></g><g><title>rocksdb::WriteStallConditionToHyphenString[abi:cxx11](rocksdb::WriteStallCondition) (1 samples, 0.06%)</title><rect x="98.9253%" y="549" width="0.0566%" height="15" fill="rgb(231,96,31)" fg:x="1749" fg:w="1"/><text x="99.1753%" y="559.50"></text></g><g><title>rocksdb::InternalStats::DumpDBMapStatsWriteStall(std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;*) (1 samples, 0.06%)</title><rect x="98.9819%" y="581" width="0.0566%" height="15" fill="rgb(224,193,37)" fg:x="1750" fg:w="1"/><text x="99.2319%" y="591.50"></text></g><g><title>rocksdb::InternalStats::HandleDBStats(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, rocksdb::Slice) (2 samples, 0.11%)</title><rect x="98.9819%" y="629" width="0.1131%" height="15" fill="rgb(227,153,50)" fg:x="1750" fg:w="2"/><text x="99.2319%" y="639.50"></text></g><g><title>rocksdb::InternalStats::DumpDBStats(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.11%)</title><rect x="98.9819%" y="613" width="0.1131%" height="15" fill="rgb(249,228,3)" fg:x="1750" fg:w="2"/><text x="99.2319%" y="623.50"></text></g><g><title>rocksdb::InternalStats::DumpDBStatsWriteStall(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*) (2 samples, 0.11%)</title><rect x="98.9819%" y="597" width="0.1131%" height="15" fill="rgb(219,164,43)" fg:x="1750" fg:w="2"/><text x="99.2319%" y="607.50"></text></g><g><title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::init(std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;*) (1 samples, 0.06%)</title><rect x="99.0385%" y="581" width="0.0566%" height="15" fill="rgb(216,45,41)" fg:x="1751" fg:w="1"/><text x="99.2885%" y="591.50"></text></g><g><title>std::ios_base::_M_init() (1 samples, 0.06%)</title><rect x="99.0385%" y="565" width="0.0566%" height="15" fill="rgb(210,226,51)" fg:x="1751" fg:w="1"/><text x="99.2885%" y="575.50"></text></g><g><title>rocksdb::DBImpl::DumpStats() (119 samples, 6.73%)</title><rect x="92.4208%" y="645" width="6.7308%" height="15" fill="rgb(209,117,49)" fg:x="1634" fg:w="119"/><text x="92.6708%" y="655.50">rocksdb::..</text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt;(char const*, char const*, std::forward_iterator_tag) (1 samples, 0.06%)</title><rect x="99.0950%" y="629" width="0.0566%" height="15" fill="rgb(206,196,24)" fg:x="1752" fg:w="1"/><text x="99.3450%" y="639.50"></text></g><g><title>rocksdb::DBImpl::EstimateInMemoryStatsHistorySize() const (3 samples, 0.17%)</title><rect x="99.2081%" y="629" width="0.1697%" height="15" fill="rgb(253,218,3)" fg:x="1754" fg:w="3"/><text x="99.4581%" y="639.50"></text></g><g><title>std::_Rb_tree_increment(std::_Rb_tree_node_base const*) (3 samples, 0.17%)</title><rect x="99.2081%" y="613" width="0.1697%" height="15" fill="rgb(252,166,2)" fg:x="1754" fg:w="3"/><text x="99.4581%" y="623.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.06%)</title><rect x="99.4344%" y="613" width="0.0566%" height="15" fill="rgb(236,218,26)" fg:x="1758" fg:w="1"/><text x="99.6844%" y="623.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="99.4344%" y="597" width="0.0566%" height="15" fill="rgb(254,84,19)" fg:x="1758" fg:w="1"/><text x="99.6844%" y="607.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="99.4344%" y="581" width="0.0566%" height="15" fill="rgb(219,137,29)" fg:x="1758" fg:w="1"/><text x="99.6844%" y="591.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="99.4344%" y="565" width="0.0566%" height="15" fill="rgb(227,47,52)" fg:x="1758" fg:w="1"/><text x="99.6844%" y="575.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="99.4344%" y="549" width="0.0566%" height="15" fill="rgb(229,167,24)" fg:x="1758" fg:w="1"/><text x="99.6844%" y="559.50"></text></g><g><title>rocksdb::StatisticsImpl::getTickerCountLocked(unsigned int) const (3 samples, 0.17%)</title><rect x="99.4910%" y="613" width="0.1697%" height="15" fill="rgb(233,164,1)" fg:x="1759" fg:w="3"/><text x="99.7410%" y="623.50"></text></g><g><title>rocksdb::StatisticsImpl::getTickerMap(std::map&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, unsigned long, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;*) const (6 samples, 0.34%)</title><rect x="99.3778%" y="629" width="0.3394%" height="15" fill="rgb(218,88,48)" fg:x="1757" fg:w="6"/><text x="99.6278%" y="639.50"></text></g><g><title>std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&amp;) (1 samples, 0.06%)</title><rect x="99.6606%" y="613" width="0.0566%" height="15" fill="rgb(226,214,24)" fg:x="1762" fg:w="1"/><text x="99.9106%" y="623.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::find(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.06%)</title><rect x="99.7172%" y="629" width="0.0566%" height="15" fill="rgb(233,29,12)" fg:x="1763" fg:w="1"/><text x="99.9672%" y="639.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::operator=(std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt; const&amp;) (1 samples, 0.06%)</title><rect x="99.7738%" y="629" width="0.0566%" height="15" fill="rgb(219,120,34)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="639.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&gt;(std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; const*, std::_Rb_tree_node_base*, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&amp;) (1 samples, 0.06%)</title><rect x="99.7738%" y="613" width="0.0566%" height="15" fill="rgb(226,78,44)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="623.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&gt;(std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; const*, std::_Rb_tree_node_base*, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&amp;) (1 samples, 0.06%)</title><rect x="99.7738%" y="597" width="0.0566%" height="15" fill="rgb(240,15,48)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="607.50"></text></g><g><title>std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;* std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_copy&lt;std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&gt;(std::_Rb_tree_node&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; const*, std::_Rb_tree_node_base*, std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_Reuse_or_alloc_node&amp;) (1 samples, 0.06%)</title><rect x="99.7738%" y="581" width="0.0566%" height="15" fill="rgb(253,176,7)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="591.50"></text></g><g><title>void std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char*&gt;(char*, char*, std::forward_iterator_tag) [clone .constprop.0] (1 samples, 0.06%)</title><rect x="99.7738%" y="565" width="0.0566%" height="15" fill="rgb(206,166,28)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="575.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.06%)</title><rect x="99.7738%" y="549" width="0.0566%" height="15" fill="rgb(241,53,51)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="559.50"></text></g><g><title>_rjem_je_malloc_default (1 samples, 0.06%)</title><rect x="99.7738%" y="533" width="0.0566%" height="15" fill="rgb(249,112,30)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="543.50"></text></g><g><title>imalloc (1 samples, 0.06%)</title><rect x="99.7738%" y="517" width="0.0566%" height="15" fill="rgb(217,85,30)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="527.50"></text></g><g><title>imalloc_body (1 samples, 0.06%)</title><rect x="99.7738%" y="501" width="0.0566%" height="15" fill="rgb(233,49,7)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="511.50"></text></g><g><title>imalloc_no_sample (1 samples, 0.06%)</title><rect x="99.7738%" y="485" width="0.0566%" height="15" fill="rgb(234,109,9)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="495.50"></text></g><g><title>iallocztm (1 samples, 0.06%)</title><rect x="99.7738%" y="469" width="0.0566%" height="15" fill="rgb(253,95,22)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="479.50"></text></g><g><title>arena_malloc (1 samples, 0.06%)</title><rect x="99.7738%" y="453" width="0.0566%" height="15" fill="rgb(233,176,25)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="463.50"></text></g><g><title>tcache_alloc_small (1 samples, 0.06%)</title><rect x="99.7738%" y="437" width="0.0566%" height="15" fill="rgb(236,33,39)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="447.50"></text></g><g><title>_rjem_je_tcache_alloc_small_hard (1 samples, 0.06%)</title><rect x="99.7738%" y="421" width="0.0566%" height="15" fill="rgb(223,226,42)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="431.50"></text></g><g><title>_rjem_je_arena_cache_bin_fill_small (1 samples, 0.06%)</title><rect x="99.7738%" y="405" width="0.0566%" height="15" fill="rgb(216,99,33)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="415.50"></text></g><g><title>arena_slab_alloc (1 samples, 0.06%)</title><rect x="99.7738%" y="389" width="0.0566%" height="15" fill="rgb(235,84,23)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="399.50"></text></g><g><title>_rjem_je_pa_alloc (1 samples, 0.06%)</title><rect x="99.7738%" y="373" width="0.0566%" height="15" fill="rgb(232,2,27)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="383.50"></text></g><g><title>pai_alloc (1 samples, 0.06%)</title><rect x="99.7738%" y="357" width="0.0566%" height="15" fill="rgb(241,23,22)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="367.50"></text></g><g><title>pac_alloc_impl (1 samples, 0.06%)</title><rect x="99.7738%" y="341" width="0.0566%" height="15" fill="rgb(211,73,27)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="351.50"></text></g><g><title>pac_alloc_real (1 samples, 0.06%)</title><rect x="99.7738%" y="325" width="0.0566%" height="15" fill="rgb(235,109,49)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="335.50"></text></g><g><title>_rjem_je_ecache_alloc (1 samples, 0.06%)</title><rect x="99.7738%" y="309" width="0.0566%" height="15" fill="rgb(230,99,29)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="319.50"></text></g><g><title>extent_recycle (1 samples, 0.06%)</title><rect x="99.7738%" y="293" width="0.0566%" height="15" fill="rgb(245,199,7)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="303.50"></text></g><g><title>extent_recycle_split (1 samples, 0.06%)</title><rect x="99.7738%" y="277" width="0.0566%" height="15" fill="rgb(217,179,10)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="287.50"></text></g><g><title>extent_split_interior (1 samples, 0.06%)</title><rect x="99.7738%" y="261" width="0.0566%" height="15" fill="rgb(254,99,47)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="271.50"></text></g><g><title>extent_split_impl (1 samples, 0.06%)</title><rect x="99.7738%" y="245" width="0.0566%" height="15" fill="rgb(251,121,7)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="255.50"></text></g><g><title>edata_init (1 samples, 0.06%)</title><rect x="99.7738%" y="229" width="0.0566%" height="15" fill="rgb(250,177,26)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="239.50"></text></g><g><title>edata_is_head_set (1 samples, 0.06%)</title><rect x="99.7738%" y="213" width="0.0566%" height="15" fill="rgb(232,88,15)" fg:x="1764" fg:w="1"/><text x="100.0238%" y="223.50"></text></g><g><title>operator new(unsigned long) (1 samples, 0.06%)</title><rect x="99.8303%" y="613" width="0.0566%" height="15" fill="rgb(251,54,54)" fg:x="1765" fg:w="1"/><text x="100.0803%" y="623.50"></text></g><g><title>malloc (1 samples, 0.06%)</title><rect x="99.8303%" y="597" width="0.0566%" height="15" fill="rgb(208,177,15)" fg:x="1765" fg:w="1"/><text x="100.0803%" y="607.50"></text></g><g><title>imalloc_fastpath (1 samples, 0.06%)</title><rect x="99.8303%" y="581" width="0.0566%" height="15" fill="rgb(205,97,32)" fg:x="1765" fg:w="1"/><text x="100.0803%" y="591.50"></text></g><g><title>cache_bin_alloc_easy (1 samples, 0.06%)</title><rect x="99.8303%" y="565" width="0.0566%" height="15" fill="rgb(217,192,13)" fg:x="1765" fg:w="1"/><text x="100.0803%" y="575.50"></text></g><g><title>cache_bin_alloc_impl (1 samples, 0.06%)</title><rect x="99.8303%" y="549" width="0.0566%" height="15" fill="rgb(215,163,41)" fg:x="1765" fg:w="1"/><text x="100.0803%" y="559.50"></text></g><g><title>rocksdb::DBImpl::PersistStats() (14 samples, 0.79%)</title><rect x="99.1516%" y="645" width="0.7919%" height="15" fill="rgb(246,83,29)" fg:x="1753" fg:w="14"/><text x="99.4016%" y="655.50"></text></g><g><title>std::_Rb_tree_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_emplace_hint_unique&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt; &gt;(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt;, std::tuple&lt;&gt;) (2 samples, 0.11%)</title><rect x="99.8303%" y="629" width="0.1131%" height="15" fill="rgb(219,2,45)" fg:x="1765" fg:w="2"/><text x="100.0803%" y="639.50"></text></g><g><title>std::_Rb_tree&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt;, std::_Select1st&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::less&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt; &gt;::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const, unsigned long&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;) (1 samples, 0.06%)</title><rect x="99.8869%" y="613" width="0.0566%" height="15" fill="rgb(242,215,33)" fg:x="1766" fg:w="1"/><text x="100.1369%" y="623.50"></text></g><g><title>all (1,768 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(217,1,6)" fg:x="0" fg:w="1768"/><text x="0.2500%" y="703.50"></text></g><g><title>range-server (135 samples, 7.64%)</title><rect x="92.3643%" y="677" width="7.6357%" height="15" fill="rgb(207,85,52)" fg:x="1633" fg:w="135"/><text x="92.6143%" y="687.50">range-serv..</text></g><g><title>rocksdb::Timer::Run() (135 samples, 7.64%)</title><rect x="92.3643%" y="661" width="7.6357%" height="15" fill="rgb(231,171,19)" fg:x="1633" fg:w="135"/><text x="92.6143%" y="671.50">rocksdb::T..</text></g><g><title>rocksdb::InstrumentedCondVar::TimedWait(unsigned long) (1 samples, 0.06%)</title><rect x="99.9434%" y="645" width="0.0566%" height="15" fill="rgb(207,128,4)" fg:x="1767" fg:w="1"/><text x="100.1934%" y="655.50"></text></g></svg></svg>