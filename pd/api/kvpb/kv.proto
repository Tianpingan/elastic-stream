syntax = "proto3";

package kvpb;

service KV {
  // Store stores kv into etcd by transaction.
  rpc Store(StoreRequest) returns (StoreResponse) {}

  // Load support 2 ways to load kv from etcd
  // - `names` iteratively get value from "${prefix}${name}" but not care about revision
  // - `prefix` if `names` is nil can get all values and revision of the path
  rpc Load(LoadRequest) returns (LoadResponse) {}

  // Watch on revision which greater than or equal to the required revision.
  // if the connection of Watch is end or stopped by whatever reason, just reconnect to it.
  rpc Watch(WatchRequest) returns (stream WatchResponse) {}
}

message StoreRequest {
  repeated Item changes = 1;
  bytes prefix = 2;
}

message StoreResponse {
}

message LoadRequest {
  repeated bytes names = 1;
  bytes prefix = 2;
}

message LoadResponse {
  repeated Item items = 1;
  int64 revision = 2;
}

message WatchRequest {
  bytes prefix = 1;
  int64 revision = 2;
}

message WatchResponse {
  repeated Item changes = 1;
  int64 revision = 2;
  Error error = 3;
}

message Item {
  bytes name = 1;
  bytes payload = 2;
  Error error = 3;
  EventType kind = 4;
}

message Error {
  ErrorType type = 1;
  string message = 2;
}

enum ErrorType {
  OK = 0;
  UNKNOWN = 1;
  NOT_FOUND = 2;
  DATA_COMPACTED = 3;
}

enum EventType {
  PUT = 0;
  DELETE = 1;
}
