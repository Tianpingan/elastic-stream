// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type HeartbeatResponseT struct {
	ClientId string `json:"client_id"`
	ClientRole ClientRole `json:"client_role"`
	RangeServer *RangeServerT `json:"range_server"`
	Status *StatusT `json:"status"`
}

func (t *HeartbeatResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	clientIdOffset := flatbuffers.UOffsetT(0)
	if t.ClientId != "" {
		clientIdOffset = builder.CreateString(t.ClientId)
	}
	rangeServerOffset := t.RangeServer.Pack(builder)
	statusOffset := t.Status.Pack(builder)
	HeartbeatResponseStart(builder)
	HeartbeatResponseAddClientId(builder, clientIdOffset)
	HeartbeatResponseAddClientRole(builder, t.ClientRole)
	HeartbeatResponseAddRangeServer(builder, rangeServerOffset)
	HeartbeatResponseAddStatus(builder, statusOffset)
	return HeartbeatResponseEnd(builder)
}

func (rcv *HeartbeatResponse) UnPackTo(t *HeartbeatResponseT) {
	t.ClientId = string(rcv.ClientId())
	t.ClientRole = rcv.ClientRole()
	t.RangeServer = rcv.RangeServer(nil).UnPack()
	t.Status = rcv.Status(nil).UnPack()
}

func (rcv *HeartbeatResponse) UnPack() *HeartbeatResponseT {
	if rcv == nil { return nil }
	t := &HeartbeatResponseT{}
	rcv.UnPackTo(t)
	return t
}

type HeartbeatResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsHeartbeatResponse(buf []byte, offset flatbuffers.UOffsetT) *HeartbeatResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &HeartbeatResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsHeartbeatResponse(buf []byte, offset flatbuffers.UOffsetT) *HeartbeatResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &HeartbeatResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *HeartbeatResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *HeartbeatResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *HeartbeatResponse) ClientId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *HeartbeatResponse) ClientRole() ClientRole {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ClientRole(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *HeartbeatResponse) MutateClientRole(n ClientRole) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *HeartbeatResponse) RangeServer(obj *RangeServer) *RangeServer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RangeServer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *HeartbeatResponse) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func HeartbeatResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func HeartbeatResponseAddClientId(builder *flatbuffers.Builder, clientId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(clientId), 0)
}
func HeartbeatResponseAddClientRole(builder *flatbuffers.Builder, clientRole ClientRole) {
	builder.PrependInt8Slot(1, int8(clientRole), 0)
}
func HeartbeatResponseAddRangeServer(builder *flatbuffers.Builder, rangeServer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rangeServer), 0)
}
func HeartbeatResponseAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(status), 0)
}
func HeartbeatResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
