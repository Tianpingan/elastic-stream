// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DescribePlacementDriverClusterRequestT struct {
	RangeServer *RangeServerT `json:"range_server"`
	TimeoutMs int32 `json:"timeout_ms"`
}

func (t *DescribePlacementDriverClusterRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	rangeServerOffset := t.RangeServer.Pack(builder)
	DescribePlacementDriverClusterRequestStart(builder)
	DescribePlacementDriverClusterRequestAddRangeServer(builder, rangeServerOffset)
	DescribePlacementDriverClusterRequestAddTimeoutMs(builder, t.TimeoutMs)
	return DescribePlacementDriverClusterRequestEnd(builder)
}

func (rcv *DescribePlacementDriverClusterRequest) UnPackTo(t *DescribePlacementDriverClusterRequestT) {
	t.RangeServer = rcv.RangeServer(nil).UnPack()
	t.TimeoutMs = rcv.TimeoutMs()
}

func (rcv *DescribePlacementDriverClusterRequest) UnPack() *DescribePlacementDriverClusterRequestT {
	if rcv == nil { return nil }
	t := &DescribePlacementDriverClusterRequestT{}
	rcv.UnPackTo(t)
	return t
}

type DescribePlacementDriverClusterRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsDescribePlacementDriverClusterRequest(buf []byte, offset flatbuffers.UOffsetT) *DescribePlacementDriverClusterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DescribePlacementDriverClusterRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDescribePlacementDriverClusterRequest(buf []byte, offset flatbuffers.UOffsetT) *DescribePlacementDriverClusterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DescribePlacementDriverClusterRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DescribePlacementDriverClusterRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DescribePlacementDriverClusterRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DescribePlacementDriverClusterRequest) RangeServer(obj *RangeServer) *RangeServer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RangeServer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DescribePlacementDriverClusterRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DescribePlacementDriverClusterRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func DescribePlacementDriverClusterRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DescribePlacementDriverClusterRequestAddRangeServer(builder *flatbuffers.Builder, rangeServer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rangeServer), 0)
}
func DescribePlacementDriverClusterRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(1, timeoutMs, 0)
}
func DescribePlacementDriverClusterRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
