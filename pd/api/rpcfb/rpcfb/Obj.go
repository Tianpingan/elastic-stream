// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ObjT struct {
	StreamId int64 `json:"stream_id"`
	RangeIndex int32 `json:"range_index"`
	Epoch int16 `json:"epoch"`
	StartOffset int64 `json:"start_offset"`
	EndOffsetDelta int32 `json:"end_offset_delta"`
	DataLen int32 `json:"data_len"`
	SparseIndex []byte `json:"sparse_index"`
}

func (t *ObjT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	sparseIndexOffset := flatbuffers.UOffsetT(0)
	if t.SparseIndex != nil {
		sparseIndexOffset = builder.CreateByteString(t.SparseIndex)
	}
	ObjStart(builder)
	ObjAddStreamId(builder, t.StreamId)
	ObjAddRangeIndex(builder, t.RangeIndex)
	ObjAddEpoch(builder, t.Epoch)
	ObjAddStartOffset(builder, t.StartOffset)
	ObjAddEndOffsetDelta(builder, t.EndOffsetDelta)
	ObjAddDataLen(builder, t.DataLen)
	ObjAddSparseIndex(builder, sparseIndexOffset)
	return ObjEnd(builder)
}

func (rcv *Obj) UnPackTo(t *ObjT) {
	t.StreamId = rcv.StreamId()
	t.RangeIndex = rcv.RangeIndex()
	t.Epoch = rcv.Epoch()
	t.StartOffset = rcv.StartOffset()
	t.EndOffsetDelta = rcv.EndOffsetDelta()
	t.DataLen = rcv.DataLen()
	t.SparseIndex = rcv.SparseIndexBytes()
}

func (rcv *Obj) UnPack() *ObjT {
	if rcv == nil { return nil }
	t := &ObjT{}
	rcv.UnPackTo(t)
	return t
}

type Obj struct {
	_tab flatbuffers.Table
}

func GetRootAsObj(buf []byte, offset flatbuffers.UOffsetT) *Obj {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Obj{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsObj(buf []byte, offset flatbuffers.UOffsetT) *Obj {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Obj{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Obj) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Obj) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Obj) StreamId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Obj) MutateStreamId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Obj) RangeIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Obj) MutateRangeIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Obj) Epoch() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Obj) MutateEpoch(n int16) bool {
	return rcv._tab.MutateInt16Slot(8, n)
}

func (rcv *Obj) StartOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Obj) MutateStartOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *Obj) EndOffsetDelta() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Obj) MutateEndOffsetDelta(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *Obj) DataLen() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Obj) MutateDataLen(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *Obj) SparseIndex(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Obj) SparseIndexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Obj) SparseIndexBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Obj) MutateSparseIndex(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ObjStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ObjAddStreamId(builder *flatbuffers.Builder, streamId int64) {
	builder.PrependInt64Slot(0, streamId, -1)
}
func ObjAddRangeIndex(builder *flatbuffers.Builder, rangeIndex int32) {
	builder.PrependInt32Slot(1, rangeIndex, -1)
}
func ObjAddEpoch(builder *flatbuffers.Builder, epoch int16) {
	builder.PrependInt16Slot(2, epoch, -1)
}
func ObjAddStartOffset(builder *flatbuffers.Builder, startOffset int64) {
	builder.PrependInt64Slot(3, startOffset, -1)
}
func ObjAddEndOffsetDelta(builder *flatbuffers.Builder, endOffsetDelta int32) {
	builder.PrependInt32Slot(4, endOffsetDelta, -1)
}
func ObjAddDataLen(builder *flatbuffers.Builder, dataLen int32) {
	builder.PrependInt32Slot(5, dataLen, -1)
}
func ObjAddSparseIndex(builder *flatbuffers.Builder, sparseIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(sparseIndex), 0)
}
func ObjStartSparseIndexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ObjEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
