// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SealRangeRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	Kind SealKind `json:"kind"`
	Range *RangeT `json:"range"`
}

func (t *SealRangeRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	range_Offset := t.Range.Pack(builder)
	SealRangeRequestStart(builder)
	SealRangeRequestAddTimeoutMs(builder, t.TimeoutMs)
	SealRangeRequestAddKind(builder, t.Kind)
	SealRangeRequestAddRange(builder, range_Offset)
	return SealRangeRequestEnd(builder)
}

func (rcv *SealRangeRequest) UnPackTo(t *SealRangeRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	t.Kind = rcv.Kind()
	t.Range = rcv.Range(nil).UnPack()
}

func (rcv *SealRangeRequest) UnPack() *SealRangeRequestT {
	if rcv == nil { return nil }
	t := &SealRangeRequestT{}
	rcv.UnPackTo(t)
	return t
}

type SealRangeRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsSealRangeRequest(buf []byte, offset flatbuffers.UOffsetT) *SealRangeRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SealRangeRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSealRangeRequest(buf []byte, offset flatbuffers.UOffsetT) *SealRangeRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SealRangeRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SealRangeRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SealRangeRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SealRangeRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SealRangeRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *SealRangeRequest) Kind() SealKind {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return SealKind(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SealRangeRequest) MutateKind(n SealKind) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *SealRangeRequest) Range(obj *Range) *Range {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Range)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SealRangeRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SealRangeRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func SealRangeRequestAddKind(builder *flatbuffers.Builder, kind SealKind) {
	builder.PrependInt8Slot(1, int8(kind), 0)
}
func SealRangeRequestAddRange(builder *flatbuffers.Builder, range_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(range_), 0)
}
func SealRangeRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
