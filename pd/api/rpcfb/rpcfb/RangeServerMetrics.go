// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RangeServerMetricsT struct {
	DiskInRate int64 `json:"disk_in_rate"`
	DiskOutRate int64 `json:"disk_out_rate"`
	DiskFreeSpace int64 `json:"disk_free_space"`
	DiskUnindexedDataSize int64 `json:"disk_unindexed_data_size"`
	MemoryUsed int64 `json:"memory_used"`
	UringTaskRate int16 `json:"uring_task_rate"`
	UringInflightTaskCnt int16 `json:"uring_inflight_task_cnt"`
	UringPendingTaskCnt int32 `json:"uring_pending_task_cnt"`
	UringTaskAvgLatency int16 `json:"uring_task_avg_latency"`
	NetworkAppendRate int16 `json:"network_append_rate"`
	NetworkFetchRate int16 `json:"network_fetch_rate"`
	NetworkFailedAppendRate int16 `json:"network_failed_append_rate"`
	NetworkFailedFetchRate int16 `json:"network_failed_fetch_rate"`
	NetworkAppendAvgLatency int16 `json:"network_append_avg_latency"`
	NetworkFetchAvgLatency int16 `json:"network_fetch_avg_latency"`
	RangeMissingReplicaCnt int16 `json:"range_missing_replica_cnt"`
	RangeActiveCnt int16 `json:"range_active_cnt"`
}

func (t *RangeServerMetricsT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	RangeServerMetricsStart(builder)
	RangeServerMetricsAddDiskInRate(builder, t.DiskInRate)
	RangeServerMetricsAddDiskOutRate(builder, t.DiskOutRate)
	RangeServerMetricsAddDiskFreeSpace(builder, t.DiskFreeSpace)
	RangeServerMetricsAddDiskUnindexedDataSize(builder, t.DiskUnindexedDataSize)
	RangeServerMetricsAddMemoryUsed(builder, t.MemoryUsed)
	RangeServerMetricsAddUringTaskRate(builder, t.UringTaskRate)
	RangeServerMetricsAddUringInflightTaskCnt(builder, t.UringInflightTaskCnt)
	RangeServerMetricsAddUringPendingTaskCnt(builder, t.UringPendingTaskCnt)
	RangeServerMetricsAddUringTaskAvgLatency(builder, t.UringTaskAvgLatency)
	RangeServerMetricsAddNetworkAppendRate(builder, t.NetworkAppendRate)
	RangeServerMetricsAddNetworkFetchRate(builder, t.NetworkFetchRate)
	RangeServerMetricsAddNetworkFailedAppendRate(builder, t.NetworkFailedAppendRate)
	RangeServerMetricsAddNetworkFailedFetchRate(builder, t.NetworkFailedFetchRate)
	RangeServerMetricsAddNetworkAppendAvgLatency(builder, t.NetworkAppendAvgLatency)
	RangeServerMetricsAddNetworkFetchAvgLatency(builder, t.NetworkFetchAvgLatency)
	RangeServerMetricsAddRangeMissingReplicaCnt(builder, t.RangeMissingReplicaCnt)
	RangeServerMetricsAddRangeActiveCnt(builder, t.RangeActiveCnt)
	return RangeServerMetricsEnd(builder)
}

func (rcv *RangeServerMetrics) UnPackTo(t *RangeServerMetricsT) {
	t.DiskInRate = rcv.DiskInRate()
	t.DiskOutRate = rcv.DiskOutRate()
	t.DiskFreeSpace = rcv.DiskFreeSpace()
	t.DiskUnindexedDataSize = rcv.DiskUnindexedDataSize()
	t.MemoryUsed = rcv.MemoryUsed()
	t.UringTaskRate = rcv.UringTaskRate()
	t.UringInflightTaskCnt = rcv.UringInflightTaskCnt()
	t.UringPendingTaskCnt = rcv.UringPendingTaskCnt()
	t.UringTaskAvgLatency = rcv.UringTaskAvgLatency()
	t.NetworkAppendRate = rcv.NetworkAppendRate()
	t.NetworkFetchRate = rcv.NetworkFetchRate()
	t.NetworkFailedAppendRate = rcv.NetworkFailedAppendRate()
	t.NetworkFailedFetchRate = rcv.NetworkFailedFetchRate()
	t.NetworkAppendAvgLatency = rcv.NetworkAppendAvgLatency()
	t.NetworkFetchAvgLatency = rcv.NetworkFetchAvgLatency()
	t.RangeMissingReplicaCnt = rcv.RangeMissingReplicaCnt()
	t.RangeActiveCnt = rcv.RangeActiveCnt()
}

func (rcv *RangeServerMetrics) UnPack() *RangeServerMetricsT {
	if rcv == nil { return nil }
	t := &RangeServerMetricsT{}
	rcv.UnPackTo(t)
	return t
}

type RangeServerMetrics struct {
	_tab flatbuffers.Table
}

func GetRootAsRangeServerMetrics(buf []byte, offset flatbuffers.UOffsetT) *RangeServerMetrics {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RangeServerMetrics{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRangeServerMetrics(buf []byte, offset flatbuffers.UOffsetT) *RangeServerMetrics {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RangeServerMetrics{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RangeServerMetrics) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RangeServerMetrics) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RangeServerMetrics) DiskInRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateDiskInRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *RangeServerMetrics) DiskOutRate() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateDiskOutRate(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *RangeServerMetrics) DiskFreeSpace() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateDiskFreeSpace(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *RangeServerMetrics) DiskUnindexedDataSize() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateDiskUnindexedDataSize(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *RangeServerMetrics) MemoryUsed() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateMemoryUsed(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *RangeServerMetrics) UringTaskRate() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateUringTaskRate(n int16) bool {
	return rcv._tab.MutateInt16Slot(14, n)
}

func (rcv *RangeServerMetrics) UringInflightTaskCnt() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateUringInflightTaskCnt(n int16) bool {
	return rcv._tab.MutateInt16Slot(16, n)
}

func (rcv *RangeServerMetrics) UringPendingTaskCnt() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateUringPendingTaskCnt(n int32) bool {
	return rcv._tab.MutateInt32Slot(18, n)
}

func (rcv *RangeServerMetrics) UringTaskAvgLatency() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateUringTaskAvgLatency(n int16) bool {
	return rcv._tab.MutateInt16Slot(20, n)
}

func (rcv *RangeServerMetrics) NetworkAppendRate() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateNetworkAppendRate(n int16) bool {
	return rcv._tab.MutateInt16Slot(22, n)
}

func (rcv *RangeServerMetrics) NetworkFetchRate() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(24))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateNetworkFetchRate(n int16) bool {
	return rcv._tab.MutateInt16Slot(24, n)
}

func (rcv *RangeServerMetrics) NetworkFailedAppendRate() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(26))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateNetworkFailedAppendRate(n int16) bool {
	return rcv._tab.MutateInt16Slot(26, n)
}

func (rcv *RangeServerMetrics) NetworkFailedFetchRate() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(28))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateNetworkFailedFetchRate(n int16) bool {
	return rcv._tab.MutateInt16Slot(28, n)
}

func (rcv *RangeServerMetrics) NetworkAppendAvgLatency() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(30))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateNetworkAppendAvgLatency(n int16) bool {
	return rcv._tab.MutateInt16Slot(30, n)
}

func (rcv *RangeServerMetrics) NetworkFetchAvgLatency() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(32))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateNetworkFetchAvgLatency(n int16) bool {
	return rcv._tab.MutateInt16Slot(32, n)
}

func (rcv *RangeServerMetrics) RangeMissingReplicaCnt() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(34))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateRangeMissingReplicaCnt(n int16) bool {
	return rcv._tab.MutateInt16Slot(34, n)
}

func (rcv *RangeServerMetrics) RangeActiveCnt() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(36))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeServerMetrics) MutateRangeActiveCnt(n int16) bool {
	return rcv._tab.MutateInt16Slot(36, n)
}

func RangeServerMetricsStart(builder *flatbuffers.Builder) {
	builder.StartObject(17)
}
func RangeServerMetricsAddDiskInRate(builder *flatbuffers.Builder, diskInRate int64) {
	builder.PrependInt64Slot(0, diskInRate, 0)
}
func RangeServerMetricsAddDiskOutRate(builder *flatbuffers.Builder, diskOutRate int64) {
	builder.PrependInt64Slot(1, diskOutRate, 0)
}
func RangeServerMetricsAddDiskFreeSpace(builder *flatbuffers.Builder, diskFreeSpace int64) {
	builder.PrependInt64Slot(2, diskFreeSpace, 0)
}
func RangeServerMetricsAddDiskUnindexedDataSize(builder *flatbuffers.Builder, diskUnindexedDataSize int64) {
	builder.PrependInt64Slot(3, diskUnindexedDataSize, 0)
}
func RangeServerMetricsAddMemoryUsed(builder *flatbuffers.Builder, memoryUsed int64) {
	builder.PrependInt64Slot(4, memoryUsed, 0)
}
func RangeServerMetricsAddUringTaskRate(builder *flatbuffers.Builder, uringTaskRate int16) {
	builder.PrependInt16Slot(5, uringTaskRate, 0)
}
func RangeServerMetricsAddUringInflightTaskCnt(builder *flatbuffers.Builder, uringInflightTaskCnt int16) {
	builder.PrependInt16Slot(6, uringInflightTaskCnt, 0)
}
func RangeServerMetricsAddUringPendingTaskCnt(builder *flatbuffers.Builder, uringPendingTaskCnt int32) {
	builder.PrependInt32Slot(7, uringPendingTaskCnt, 0)
}
func RangeServerMetricsAddUringTaskAvgLatency(builder *flatbuffers.Builder, uringTaskAvgLatency int16) {
	builder.PrependInt16Slot(8, uringTaskAvgLatency, 0)
}
func RangeServerMetricsAddNetworkAppendRate(builder *flatbuffers.Builder, networkAppendRate int16) {
	builder.PrependInt16Slot(9, networkAppendRate, 0)
}
func RangeServerMetricsAddNetworkFetchRate(builder *flatbuffers.Builder, networkFetchRate int16) {
	builder.PrependInt16Slot(10, networkFetchRate, 0)
}
func RangeServerMetricsAddNetworkFailedAppendRate(builder *flatbuffers.Builder, networkFailedAppendRate int16) {
	builder.PrependInt16Slot(11, networkFailedAppendRate, 0)
}
func RangeServerMetricsAddNetworkFailedFetchRate(builder *flatbuffers.Builder, networkFailedFetchRate int16) {
	builder.PrependInt16Slot(12, networkFailedFetchRate, 0)
}
func RangeServerMetricsAddNetworkAppendAvgLatency(builder *flatbuffers.Builder, networkAppendAvgLatency int16) {
	builder.PrependInt16Slot(13, networkAppendAvgLatency, 0)
}
func RangeServerMetricsAddNetworkFetchAvgLatency(builder *flatbuffers.Builder, networkFetchAvgLatency int16) {
	builder.PrependInt16Slot(14, networkFetchAvgLatency, 0)
}
func RangeServerMetricsAddRangeMissingReplicaCnt(builder *flatbuffers.Builder, rangeMissingReplicaCnt int16) {
	builder.PrependInt16Slot(15, rangeMissingReplicaCnt, 0)
}
func RangeServerMetricsAddRangeActiveCnt(builder *flatbuffers.Builder, rangeActiveCnt int16) {
	builder.PrependInt16Slot(16, rangeActiveCnt, 0)
}
func RangeServerMetricsEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
