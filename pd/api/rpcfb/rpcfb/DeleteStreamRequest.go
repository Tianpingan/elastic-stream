// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DeleteStreamRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	StreamId int64 `json:"stream_id"`
}

func (t *DeleteStreamRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	DeleteStreamRequestStart(builder)
	DeleteStreamRequestAddTimeoutMs(builder, t.TimeoutMs)
	DeleteStreamRequestAddStreamId(builder, t.StreamId)
	return DeleteStreamRequestEnd(builder)
}

func (rcv *DeleteStreamRequest) UnPackTo(t *DeleteStreamRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	t.StreamId = rcv.StreamId()
}

func (rcv *DeleteStreamRequest) UnPack() *DeleteStreamRequestT {
	if rcv == nil { return nil }
	t := &DeleteStreamRequestT{}
	rcv.UnPackTo(t)
	return t
}

type DeleteStreamRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsDeleteStreamRequest(buf []byte, offset flatbuffers.UOffsetT) *DeleteStreamRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DeleteStreamRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDeleteStreamRequest(buf []byte, offset flatbuffers.UOffsetT) *DeleteStreamRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DeleteStreamRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DeleteStreamRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DeleteStreamRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DeleteStreamRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DeleteStreamRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *DeleteStreamRequest) StreamId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *DeleteStreamRequest) MutateStreamId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func DeleteStreamRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DeleteStreamRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func DeleteStreamRequestAddStreamId(builder *flatbuffers.Builder, streamId int64) {
	builder.PrependInt64Slot(1, streamId, -1)
}
func DeleteStreamRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
