// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RangeT struct {
	StreamId int64 `json:"stream_id"`
	Epoch int64 `json:"epoch"`
	Index int32 `json:"index"`
	Start int64 `json:"start"`
	End int64 `json:"end"`
	Servers []*RangeServerT `json:"servers"`
	ReplicaCount int8 `json:"replica_count"`
	AckCount int8 `json:"ack_count"`
}

func (t *RangeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	serversOffset := flatbuffers.UOffsetT(0)
	if t.Servers != nil {
		serversLength := len(t.Servers)
		serversOffsets := make([]flatbuffers.UOffsetT, serversLength)
		for j := 0; j < serversLength; j++ {
			serversOffsets[j] = t.Servers[j].Pack(builder)
		}
		RangeStartServersVector(builder, serversLength)
		for j := serversLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(serversOffsets[j])
		}
		serversOffset = builder.EndVector(serversLength)
	}
	RangeStart(builder)
	RangeAddStreamId(builder, t.StreamId)
	RangeAddEpoch(builder, t.Epoch)
	RangeAddIndex(builder, t.Index)
	RangeAddStart(builder, t.Start)
	RangeAddEnd(builder, t.End)
	RangeAddServers(builder, serversOffset)
	RangeAddReplicaCount(builder, t.ReplicaCount)
	RangeAddAckCount(builder, t.AckCount)
	return RangeEnd(builder)
}

func (rcv *Range) UnPackTo(t *RangeT) {
	t.StreamId = rcv.StreamId()
	t.Epoch = rcv.Epoch()
	t.Index = rcv.Index()
	t.Start = rcv.Start()
	t.End = rcv.End()
	serversLength := rcv.ServersLength()
	t.Servers = make([]*RangeServerT, serversLength)
	for j := 0; j < serversLength; j++ {
		x := RangeServer{}
		rcv.Servers(&x, j)
		t.Servers[j] = x.UnPack()
	}
	t.ReplicaCount = rcv.ReplicaCount()
	t.AckCount = rcv.AckCount()
}

func (rcv *Range) UnPack() *RangeT {
	if rcv == nil { return nil }
	t := &RangeT{}
	rcv.UnPackTo(t)
	return t
}

type Range struct {
	_tab flatbuffers.Table
}

func GetRootAsRange(buf []byte, offset flatbuffers.UOffsetT) *Range {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Range{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRange(buf []byte, offset flatbuffers.UOffsetT) *Range {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Range{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Range) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Range) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Range) StreamId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Range) MutateStreamId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Range) Epoch() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Range) MutateEpoch(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *Range) Index() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Range) MutateIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *Range) Start() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Range) MutateStart(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *Range) End() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Range) MutateEnd(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *Range) Servers(obj *RangeServer, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Range) ServersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Range) ReplicaCount() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Range) MutateReplicaCount(n int8) bool {
	return rcv._tab.MutateInt8Slot(16, n)
}

func (rcv *Range) AckCount() int8 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		return rcv._tab.GetInt8(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Range) MutateAckCount(n int8) bool {
	return rcv._tab.MutateInt8Slot(18, n)
}

func RangeStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func RangeAddStreamId(builder *flatbuffers.Builder, streamId int64) {
	builder.PrependInt64Slot(0, streamId, -1)
}
func RangeAddEpoch(builder *flatbuffers.Builder, epoch int64) {
	builder.PrependInt64Slot(1, epoch, -1)
}
func RangeAddIndex(builder *flatbuffers.Builder, index int32) {
	builder.PrependInt32Slot(2, index, -1)
}
func RangeAddStart(builder *flatbuffers.Builder, start int64) {
	builder.PrependInt64Slot(3, start, -1)
}
func RangeAddEnd(builder *flatbuffers.Builder, end int64) {
	builder.PrependInt64Slot(4, end, -1)
}
func RangeAddServers(builder *flatbuffers.Builder, servers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(servers), 0)
}
func RangeStartServersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RangeAddReplicaCount(builder *flatbuffers.Builder, replicaCount int8) {
	builder.PrependInt8Slot(6, replicaCount, -1)
}
func RangeAddAckCount(builder *flatbuffers.Builder, ackCount int8) {
	builder.PrependInt8Slot(7, ackCount, -1)
}
func RangeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
