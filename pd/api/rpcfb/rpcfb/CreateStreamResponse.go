// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CreateStreamResponseT struct {
	Status *StatusT `json:"status"`
	Stream *StreamT `json:"stream"`
	ThrottleTimeMs int32 `json:"throttle_time_ms"`
}

func (t *CreateStreamResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	statusOffset := t.Status.Pack(builder)
	streamOffset := t.Stream.Pack(builder)
	CreateStreamResponseStart(builder)
	CreateStreamResponseAddStatus(builder, statusOffset)
	CreateStreamResponseAddStream(builder, streamOffset)
	CreateStreamResponseAddThrottleTimeMs(builder, t.ThrottleTimeMs)
	return CreateStreamResponseEnd(builder)
}

func (rcv *CreateStreamResponse) UnPackTo(t *CreateStreamResponseT) {
	t.Status = rcv.Status(nil).UnPack()
	t.Stream = rcv.Stream(nil).UnPack()
	t.ThrottleTimeMs = rcv.ThrottleTimeMs()
}

func (rcv *CreateStreamResponse) UnPack() *CreateStreamResponseT {
	if rcv == nil { return nil }
	t := &CreateStreamResponseT{}
	rcv.UnPackTo(t)
	return t
}

type CreateStreamResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsCreateStreamResponse(buf []byte, offset flatbuffers.UOffsetT) *CreateStreamResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CreateStreamResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCreateStreamResponse(buf []byte, offset flatbuffers.UOffsetT) *CreateStreamResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CreateStreamResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CreateStreamResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CreateStreamResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CreateStreamResponse) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CreateStreamResponse) Stream(obj *Stream) *Stream {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Stream)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CreateStreamResponse) ThrottleTimeMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CreateStreamResponse) MutateThrottleTimeMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func CreateStreamResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func CreateStreamResponseAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(status), 0)
}
func CreateStreamResponseAddStream(builder *flatbuffers.Builder, stream flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(stream), 0)
}
func CreateStreamResponseAddThrottleTimeMs(builder *flatbuffers.Builder, throttleTimeMs int32) {
	builder.PrependInt32Slot(2, throttleTimeMs, 0)
}
func CreateStreamResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
