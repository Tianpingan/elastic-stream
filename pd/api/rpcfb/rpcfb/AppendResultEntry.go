// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppendResultEntryT struct {
	Status *StatusT `json:"status"`
	TimestampMs int64 `json:"timestamp_ms"`
}

func (t *AppendResultEntryT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	statusOffset := t.Status.Pack(builder)
	AppendResultEntryStart(builder)
	AppendResultEntryAddStatus(builder, statusOffset)
	AppendResultEntryAddTimestampMs(builder, t.TimestampMs)
	return AppendResultEntryEnd(builder)
}

func (rcv *AppendResultEntry) UnPackTo(t *AppendResultEntryT) {
	t.Status = rcv.Status(nil).UnPack()
	t.TimestampMs = rcv.TimestampMs()
}

func (rcv *AppendResultEntry) UnPack() *AppendResultEntryT {
	if rcv == nil { return nil }
	t := &AppendResultEntryT{}
	rcv.UnPackTo(t)
	return t
}

type AppendResultEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsAppendResultEntry(buf []byte, offset flatbuffers.UOffsetT) *AppendResultEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppendResultEntry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppendResultEntry(buf []byte, offset flatbuffers.UOffsetT) *AppendResultEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppendResultEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppendResultEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppendResultEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppendResultEntry) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *AppendResultEntry) TimestampMs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AppendResultEntry) MutateTimestampMs(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func AppendResultEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AppendResultEntryAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(status), 0)
}
func AppendResultEntryAddTimestampMs(builder *flatbuffers.Builder, timestampMs int64) {
	builder.PrependInt64Slot(1, timestampMs, 0)
}
func AppendResultEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
