// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StatusT struct {
	Code ErrorCode `json:"code"`
	Message string `json:"message"`
	Detail []byte `json:"detail"`
}

func (t *StatusT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	messageOffset := flatbuffers.UOffsetT(0)
	if t.Message != "" {
		messageOffset = builder.CreateString(t.Message)
	}
	detailOffset := flatbuffers.UOffsetT(0)
	if t.Detail != nil {
		detailOffset = builder.CreateByteString(t.Detail)
	}
	StatusStart(builder)
	StatusAddCode(builder, t.Code)
	StatusAddMessage(builder, messageOffset)
	StatusAddDetail(builder, detailOffset)
	return StatusEnd(builder)
}

func (rcv *Status) UnPackTo(t *StatusT) {
	t.Code = rcv.Code()
	t.Message = string(rcv.Message())
	t.Detail = rcv.DetailBytes()
}

func (rcv *Status) UnPack() *StatusT {
	if rcv == nil { return nil }
	t := &StatusT{}
	rcv.UnPackTo(t)
	return t
}

type Status struct {
	_tab flatbuffers.Table
}

func GetRootAsStatus(buf []byte, offset flatbuffers.UOffsetT) *Status {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Status{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStatus(buf []byte, offset flatbuffers.UOffsetT) *Status {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Status{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Status) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Status) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Status) Code() ErrorCode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ErrorCode(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Status) MutateCode(n ErrorCode) bool {
	return rcv._tab.MutateInt16Slot(4, int16(n))
}

func (rcv *Status) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Status) Detail(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Status) DetailLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Status) DetailBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Status) MutateDetail(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func StatusStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func StatusAddCode(builder *flatbuffers.Builder, code ErrorCode) {
	builder.PrependInt16Slot(0, int16(code), 0)
}
func StatusAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(message), 0)
}
func StatusAddDetail(builder *flatbuffers.Builder, detail flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(detail), 0)
}
func StatusStartDetailVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func StatusEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
